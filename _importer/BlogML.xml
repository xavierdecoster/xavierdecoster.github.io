<?xml version="1.0" encoding="utf-8"?>
<blog date-created="2017-08-11T12:16:35" root-url="/" xmlns="http://www.blogml.com/2006/09/BlogML">
  <title type="text"><![CDATA[Xavier Decoster Personal Blog]]></title>
  <sub-title type="text"><![CDATA[Just another WordPress site]]></sub-title>
  <authors>
    <author id="1000" date-created="2017-08-11T12:49:45" date-modified="2017-08-11T12:49:45" approved="true" email="xavier.decoster@outlook.com">
      <title type="text"><![CDATA[xavierdecoster]]></title>
    </author>
  </authors>
  <extended-properties>
    <property name="CommentModeration" value="Anonymous" />
    <property name="SendTrackback" value="Yes" />
  </extended-properties>
  <categories />
  <posts>
    <post id="20" date-created="2010-10-08T16:57:00" date-modified="2010-10-08T16:57:00" approved="true" post-url="/2010/10/08/silverlight-4-data-binding-to-dynamic-datacontext/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Silverlight 4 Data Binding to Dynamic DataContext]]></title>
      <content type="text"><![CDATA[<p>If you ever want to build a Silverlight control that supports TwoWay <a title="data binding in Silverlight (MSDN)" href="http://msdn.microsoft.com/en-us/library/cc278072(VS.95).aspx" target="_blank">data binding</a> on a dynamic object, you might hit the same issues as I did, so I hope this post is useful for at least some of you.</p>

<p>To put this in context, think about the following request:<em>As an end-user I want to be able to design my own personalized user control so that I can use my company's branding, business vocabulary, modify the available fields on the control, ...</em>E.g. replace control by a Post-It on a Silverlight wall in an application, or replace by any similar situation you can think of.Of course, this control is not read-only, but has to be editable (hence the TwoWay data binding).</p>

<p>The above use case has some pretty neat consequences:</p>

<ul>
<li>the <strong><a title="FrameworkElement.DataContextProperty" href="http://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.datacontext(VS.95).aspx" target="_blank">datacontext</a> Type is unknown</strong> (yes, I know, you can work-around it with proper OO, although it will take you much more time to come up with a design that fits all scenarios, not to mention maintenance time afterwards): I'm following the principle that <em>all code is bad code</em>: the less code I write, the less defects I create, and the more time I have to do other stuff (in other words, I was lazy ^^)</li>
<li>how do you make the <strong><a title="System.Windows.Controls.ControlTemplate" href="http://msdn.microsoft.com/en-us/library/system.windows.controls.controltemplate(VS.95).aspx" target="_blank">controltemplate</a></strong> suitable for such a scenario? preferably, you won't create new controltemplates for every type of datacontext you might ever bind to it, right? (if you do, I will send you over 10K different scenarios your control needs to support)</li>
<li>there are more, but they can be tackled without this dynamic stuff</li>
</ul>

<p>First of all, it is noteworthy that you won't be able to use the built-in .NET 4 <a title="System.Dynamic.ExpandoObject" href="http://msdn.microsoft.com/en-us/library/system.dynamic.expandoobject.aspx" target="_blank">ExpandoObject</a>, although it implements <a title="System.ComponentModel.INotifyPropertyChanged" href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(VS.95).aspx" target="_blank">INotifyPropertyChanged</a>. The reason is that Silverlight is using reflection to perform binding. In other words, Silverlight looks for the <em>actual</em> property.Hence my approach creating my own dynamic type by inheriting from the new <a href="http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject(VS.95).aspx" target="_blank">DynamicObject</a> class.</p>

<p>Behold, my newly created <strong>DynamicDataContext</strong> type, which supports adding and removing properties of any type at runtime, and above all, it will be supporting Silverlight TwoWay data binding when you use the Silverlight 4 indexer syntax for your Binding Path (see example usage at the bottom of this post).Note that the code sample below does not implement all virtual members of the base type for brevity.</p>

<pre class="brush: csharp;">using System.Dynamic;
using System.ComponentModel;

public class DynamicDataContext : DynamicObject, INotifyPropertyChanged
{
     private readonly IDictionary&lt;string, object&gt; propertyBag = new Dictionary&lt;string, object&gt;();

     public event PropertyChangedEventHandler PropertyChanged;

     /// &lt;summary&gt;
     /// The indexer is needed to be able to use indexer-syntax in XAML
     /// to data bind to the properties available in the private property bag.
     /// &lt;/summary&gt;
     /// &lt;param name="index"&gt;The name of the property.&lt;/param&gt;
     /// &lt;returns&gt;The value of the property, or null if the property doesn't exist.&lt;/returns&gt;
     public object this [string index]
     {
          get
          {
               object result;
               propertyBag.TryGetValue(index, out result);
               return result;
          }
          set { propertyBag[index] = value; RaisePropertyChanged(index); }
     }

     public override bool TryGetMember(GetMemberBinder binder, out object result)
     {
          return propertyBag.TryGetValue(binder.Name, out result);
     }

     public override bool TrySetMember(SetMemberBinder binder, object value)
     {
          propertyBag[binder.Name] = value;
          RaisePropertyChanged(binder.Name);
          return true;
     }

     private void RaisePropertyChanged(string propertyName)
     {
          if(PropertyChanged != null)
               PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
     }
}
</pre>

<p>To perform TwoWay data binding in XAML, you simply use the indexer syntax, forcing the Silverlight data binding system to look for the indexer (which points to the property bag).The example below binds a control to some datacontext of type DynamicDataContext.Also note that this controltemplate is not the one that will be able to pick up all dynamically added properties at runtime (I need to do a bit more magic to do that).</p>

<pre class="brush: xml;">&lt;SomeTemplatedControl DataContext={Binding DynamicDataContext}&gt;
     &lt;SomeTemplatedControl.ControlTemplate&gt;
          &lt;ControlTemplate TargetType="SomeTemplatedControl"&gt;
               &lt;StackPanel Orientation="Vertical"&gt;
                    &lt;ContentPresenter Content="[Title]"/&gt;
                    &lt;ContentPresenter Content="[Description]"/&gt;
               &lt;/StackPanel&gt;
          &lt;/ControlTemplate&gt;
     &lt;/SomeTemplatedControl.ControlTemplate&gt;
&lt;/SomeTemplatedControl&gt;
</pre>

<p>The data context can be created by dynamically by adding any property you want, as shown in the example below:</p>

<pre class="brush: csharp;">dynamic datacontext = new DynamicDataContext();
     datacontext.Title = "A dynamic title";
     datacontext.Description = "A dynamic description (duh!)";
     DynamicDataContext = datacontext;
</pre>

<p>I have to admit, the new dynamic features in .NET 4 are pretty cool stuff.</p>
]]></content>
      <post-name type="text"><![CDATA[silverlight-4-data-binding-to-dynamic-datacontext]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="21" date-created="2011-02-15T17:22:00" date-modified="2011-02-15T17:22:00" approved="true" post-url="/2011/02/15/console-application-visual-studio-gotcha-on-x64-os/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Console Application - Visual Studio gotcha on x64 OS]]></title>
      <content type="text"><![CDATA[<p>I was playing around a bit with <a href="http://entlib.codeplex.com/" target="_blank">Enterprise Library 5.0</a> and it's Logging block. I figured it would be a very simple scenario: Enterprise Library is there to assist us with the most common practices isn't it?</p>

<p>I created a solution with a Database project, a Class Library project and a very simple Console Application project, while following the <a href="http://msdn.microsoft.com/en-us/library/ff664543%28v=PandP.50%29.aspx" target="_blank">Enterprise Library documentation to log to a database</a>.</p>

<p>So far so good:</p>

<ul>
<li>The database was deployed properly with all required tables, keys and stored procedurs.</li>
<li>The console application had it's proper entlib-configuration.</li>
</ul>

<p>However, when running the console app, I noticed that nothing was written to the database. No exceptions were thrown either. I checked, double checked and triple checked the configuration: all seemed fine. Spooky!</p>

<p>Hours of my time went into debugging the 5 lines counting program until I noticed the Build output: *"1 project skipped". *It was the class library that contained my LoggingProvider.</p>

<p>Damn! Everything compiled, no exceptions, no config errors... Only that Visual Studio decided to not compile my class library!</p>

<p>I was developing on a Windows 7 x64 operating system. I first created the class library project and then added a new C# Console Application project to the solution.</p>

<p>It turns out: <a href="http://connect.microsoft.com/VisualStudio/feedback/details/455103/new-c-console-application-targets-x86-by-default" target="_blank">new C# Console application projects target the x86 platform by default</a>!</p>

<p><span style="font-family: verdana,geneva;"><em>"When creating a new Visual C# Console Application in VS2010 for .NET 4.0, the default target settings for the project is to target the x86 platform instead of Any CPU (MSIL) like Visual Studio 2008 does"</em></span></p>

<p>I fixed the issue by targetting the x86 platform in my class library: all of the sudden, my console app was logging to the database using EntLib 5.0...</p>

<p>Unexpected gotcha!</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2010-02-15/2011-2-targetting_x86_platform.png" width="650" height="231" /></p>
]]></content>
      <post-name type="text"><![CDATA[console-application-visual-studio-gotcha-on-x64-os]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="22" date-created="2011-03-31T17:29:00" date-modified="2011-03-31T17:29:00" approved="true" post-url="/2011/03/31/upgrading-nugetexe-to-v12-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Upgrading nuget.exe to v1.2]]></title>
      <content type="text"><![CDATA[<p>Yesterday, <a href="http://haacked.com/archive/2011/03/30/nuget-1-2-released.aspx" target="_blank">Phil Haack announced</a> version 1.2 of NuGet.</p>

<p>Since I already had v1.1 running on my computer, I followed his tip to just run the <em>nuget u</em> command, and you know what, it worked great!</p>

<p>I took a screenshot of the update process and it quickly shows you what new options are available in v1.2.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-03-31/2011-3-NuGet_1.1_to_1.2_upgrade.png" alt="NuGet.exe command help" /></p>

<p>David Ebbo already made a great post on the new <em>nuget setApiKey</em> option, which you find <a href="http://blog.davidebbo.com/2011/03/saving-your-api-key-with-nugetexe.html" target="_blank">here</a>.</p>

<p>The <em>nuget spec</em> option allows you to create a new <strong>nuspec</strong> file for a given assembly you can use to build a new package.</p>

<p>Now, let me upgrade my local repository :-)</p>
]]></content>
      <post-name type="text"><![CDATA[upgrading-nugetexe-to-v12-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="23" date-created="2011-04-29T17:34:00" date-modified="2011-04-29T17:34:00" approved="true" post-url="/2011/04/29/what-you-should-know-before-speaking-at-a-belgian-tech-conference/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[What you should know before speaking at a Belgian tech conference]]></title>
      <content type="text"><![CDATA[<p>I just had a wonderful time at <a href="http://www.microsoft.com/belux/techdays/2011/" target="_blank">TechDays 2011 BeLux</a> this week, with lots of good session by expert speakers. During the conference, it struck me how hard it is for an international (non-Belgian) speaker to get feedback from the audience. You wouldn't be the first one to enter the speaker room after a session and ask yourself: *what's wrong with the audience? was it that bad? *</p>

<p>After reading this post, you should be reassured by the fact that it wasn't your fault; it's the audience. If it was your fault, you'd see people leave the room throughout the entire session (not just 5mins before the end).</p>

<p>The Belgian audience just seems to be thinking binary: either the audience is idle (as in: 0; off; passive; total silence) or the audience is ... laughing! Whatever you do, don't expect anything else but that. Let's illustrate a couple of examples here; real life examples from this week's conference.</p>

<h3>As if the demo-gods decided against you</h3>

<p>Imagine a speaker doing his utmost best to give this awesome cool demo the audience is waiting for. But guess what: as any other human being on this planet, even the best prepared veteran speaker can encounter an issue during his talk that causes the demo not to turn out as well as planned. We have <a href="http://en.wikipedia.org/wiki/Murphy's_law" target="_blank">Murphy</a> to thank for it (I guess he was Belgian too ^^): think about forgetting a semicolon in the code somewhere, or you pasted a snippet in the wrong place or forgot one, lost internet connectivity...</p>

<p><strong><em>Rule #1: don't expect the Belgian audience to help you</em></strong></p>

<p>Instead, either you'll get total silence as you pull your hair out on stage, or you'll hear people laughing at best.</p>

<p>People might arguably state that a technical audience mainly consisting out of developers is by definition introvert and silent. As much as there is truth in there to some degree, you'll still see a big difference between an international audience and a Belgian audience (not to mention an American audience).</p>

<p>To add more weight to this: if an American person stands-up in the audience, he's most likely going to raise a question or assist you in debugging the issue in your demo; if a Belgian stands-up in the audience, he's either leaving the room or he's positioning his cell phone antenna to get a better connection.</p>

<p>This brings me to the second rule.</p>

<h3>Networking at a tech conference</h3>

<p><strong><em>Rule #2: prepare yourself to give an offline/disconnected demo (and most likely, the audience is offline/disconnected too)</em></strong></p>

<p>Yes, Belgium is one of those countries I'd call a developing country in this field. Not only developing in the sense of programming, but truely still developing towards some sort of established state in the online world.</p>

<p>Accessible WiFi hotspots are rare and our buildings often block 3G signals, making those connections unreliable. Add the high telecommunication prices in Belgium to this, and you know that a big part of the audience won't be online during your session, so don't rely on it (e.g. answering live questions coming in on Twitter).</p>

<p>Instead, look for other ways to make your session more interactive.</p>

<h3>Persistence will be rewarded</h3>

<p><strong><em>Rule #3: don't stop trying to make your session interactive</em></strong></p>

<p>Even when you don't get a lot of response from the audience, it is well appreciated. Humor is a good way and has proven to work. Some give away a book to someone who managed to answer a question for instance (and virtual books to subsequent respondents ^^). Whatever you do, be creative and you'll be fine.</p>

<p>One last thing: if you managed to get feedback from a Belgian audience, it is because you deserved it: you've proven that they found your session good enough to spend time on feedback.</p>
]]></content>
      <post-name type="text"><![CDATA[what-you-should-know-before-speaking-at-a-belgian-tech-conference]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="24" date-created="2011-05-30T17:45:00" date-modified="2011-05-30T17:45:00" approved="true" post-url="/2011/05/30/nuget-package-filename-mismatch-between-gallery-and-server-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[NuGet package filename mismatch between gallery and server]]></title>
      <content type="text"><![CDATA[<p>Just noticed this one when setting up a corporate <a href="http://www.nuget.org" target="_blank">NuGet </a>server implementation based on NuGet.Server.dll.</p>

<p>NuGet (both commandline, vs extensions and package explorer) uses the following package filename convention:</p>

<p><em><span style="font-family: mceinline; font-size: 12pt;">$(packageID).$(version).nupkg</span></em></p>

<p>However, when you try to download a package (physically, e.g. for local/offline/archiving reasons), you'll notice there is a mismatch.</p>

<p>Try this one for instance: <a href="http://packages.nuget.org/v1/Package/Download/Ninject/2.2.0.0" target="_blank">http://packages.nuget.org/v1/Package/Download/Ninject/2.2.0.0</a> </p>

<p>Go ahead and try any other package/version combination available on the gallery.</p>

<p>Found it?</p>

<p>This is what you'll get:</p>

<p><em><span style="font-family: mceinline; font-size: 12pt;">$(packageID)<strong>-</strong>$(version).nupkg</span></em></p>

<p>If you want to use these packages to quickly test your own NuGet server implementation (which is what I did), you'll get a <strong>404 Not Found</strong>.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-05-30/2011-5-operation_failed.png" alt="" /></p>

<p>It took me a while to figure out what was wrong, because I was still able to see the package appear in the feed (you know you're probably wrong when you're trying to mess with the server config at this point).</p>

<p><img width="650" height="219" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-05-30/2011-5-pkg_listed.png" /></p>

<p>Solution: you'll have to <strong>rename</strong> them (replace dash with dot!)</p>

<p>Hope this helps someone!</p>
]]></content>
      <post-name type="text"><![CDATA[nuget-package-filename-mismatch-between-gallery-and-server-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="25" date-created="2011-05-31T17:55:00" date-modified="2011-05-31T17:55:00" approved="true" post-url="/2011/05/31/announcing-myget/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Announcing MyGet: NuGet-as-a-Service]]></title>
      <content type="text"><![CDATA[<p>Ever since the announcement of <a href="http://www.nuget.org" target="_blank">NuGet</a> I've been intrigued by the potential it could bring to enterprises building software on the .NET platform (<a href="http://www.hanselman.com/blog/NuGetForTheEnterpriseNuGetInAContinuousIntegrationAutomatedBuildSystem.aspx" target="_blank">one could call them big boring companies</a>). I considered setting up a private NuGet server at both <a href="http://www.realdolmen.com" target="_blank">RealDolmen</a> (my employer) and one of our customers, and it happens to be that many colleagues found it a great idea, including <a href="http://blog.maartenballiauw.be" target="_blank">Maarten Balliauw</a>. We got talking during <a href="http://www.microsoft.com/belux/techdays/2011/" target="_blank">TechDays Belgium</a> about how useful this could be at our company, and at some customer locations, and if you know Maarten a bit, you can expect we ended up quite fast with our heads in the cloud!</p>

<p>An idea was born. Actually, we found it a <em>nice</em> (NaaS) idea! ^^</p>

<h2>NaaS!? Nice!</h2>

<p>Yep, you heard it! NuGet-as-a-Service!<a href="http://www.myget.org" target="_blank"><img alt="" align="right" src="http://www.myget.org/Content/images/myget/logo.png" /></a>What about having some site in the cloud where you could just create your own feeds with your private packages?</p>

<p>What if you could create a private feed for company components and share that with your colleagues, without the need to get a server, reserve some app-pool, create your NuGet repository, ...</p>

<p>You can come up with some awesome features that could make this idea into a product that could work for anyone.</p>

<p>To get us started in this direction, we bring you <a href="http://www.myget.org" target="_blank">MyGet</a>!</p>

<p>MyGet is a NuGet server hosted on <a href="http://www.microsoft.com/windowsazure/" target="_blank">Windows Azure</a> that allows you to create and manage your own private NuGet feeds. </p>

<p>Just register an account and start creating your own private named feeds.</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-05-31/2011-5-manage_feeds.png" width="650" height="434" /></p>

<p>Every feed can be uniquely composed from different NuGet packages from different sources: you can pull packages from the official <a href="http://www.nuget.org" target="_blank">NuGet Gallery</a>, you can upload packages, and in the future (we hope) you will be able to create packages from within the site as well!</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-05-31/2011-5-manage_packages.png" width="650" height="518" /></p>

<p>If you want, you can also check out <a href="http://blog.maartenballiauw.be/post/2011/05/31/Creating-your-own-private-NuGet-feed-myget.aspx" target="_blank">Chuck Norris' feed on Maarten's blog</a> to get you started immediately.</p>

<p>Here are some wild ideas/suggestions we are thinking about:</p>

<ul>
<li>Create a My Account page (we currently support authentication through Live ID)</li>
<li>Support feed sharing management with other accounts (admins, readers, contributers)</li>
<li>Support ACS configuration for admin accounts to point e.g. to company ADFS for feed authentication</li>
<li><a href="http://myget.codeplex.com/workitem/list/basic" target="_blank">Many more on CodePlex</a> (do not hesitate to suggest some there)</li>
</ul>

<p>We believe the future is bright in the cloud, but please, let us know what *you *think!</p>
]]></content>
      <post-name type="text"><![CDATA[announcing-myget]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="26" date-created="2011-06-09T18:08:00" date-modified="2011-06-09T18:08:00" approved="true" post-url="/2011/06/09/get-your-local-nuget-repository-online-in-a-private-myget-feed/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Get your local NuGet repository online in a private MyGet feed]]></title>
      <content type="text"><![CDATA[<p>One of the <a href="http://www.myget.org" target="_blank">MyGet</a> features I've been working on lately should make it easier to populate your private feed with the NuGet packages you want.</p>

<p>One of the specific use cases for MyGet is to be able to <strong>quickly set up a private feed with your own packages</strong>, which you might have in a local repository on your computer.</p>

<p>Before MyGet, you could make this feed available to other computers by sharing your repository for instance on a network drive, or by hosting your own NuGet server.</p>

<p>This required you to do some plumbing to get a server running, or to manage folder security settings, and above all, if a computer trying to consume the feed was not in the network, it could not get any packages from you repository.</p>

<p>MyGet provides you with a service (<em><a href="http://www.xavierdecoster.com/post/2011/05/31/Announcing-MyGet.aspx" target="_blank">NuGet-as-a-Service</a></em>) that allows you to easily host your private NuGet feeds and have it <strong>always accessible</strong> from any computer connected to the internet, <strong>without that setup hassle</strong>.</p>

<p>Since we launched, you were already able to upload a single package at a time to your feed. <a href="http://blog.maartenballiauw.be/post/2011/05/31/Creating-your-own-private-NuGet-feed-myget.aspx" target="_blank">Maarten extended this</a> with a simple checkbox to define whether or not you want to <strong>include its dependencies</strong>. Note that this dependency resolution only works for dependencies to packages on the official NuGet feed at the moment.</p>

<p>To facilitate the upload progress, I've now extended it to allow you to <strong>upload multiple packages at once</strong>.</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-06-09/2011-6-multipackageupload.png" width="650" height="471" /></p>

<p>This saves you again a couple of clicks and redirects!</p>

<p>When the packages are successfully uploaded to your feed, you'll get a nice notification telling you which packages have been added.</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-06-09/2011-6-multi-package-upload_success.png" width="650" height="104" /></p>

<p>Noticed that the above upload of 2 packages results in 3 packages being added? <em>(it resolved a dependency to elmah.corelibrary 1.2 for elmah 1.2.0.1)</em></p>
]]></content>
      <post-name type="text"><![CDATA[get-your-local-nuget-repository-online-in-a-private-myget-feed]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="27" date-created="2011-06-15T18:52:00" date-modified="2011-06-15T18:52:00" approved="true" post-url="/2011/06/15/adding-nuget-packages-from-the-official-feed-to-your-myget-feed-some-improvements/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Adding NuGet packages from the official feed to your MyGet feed: some improvements]]></title>
      <content type="text"><![CDATA[<p>One of the things we want to improve on <a href="http://www.myget.org" target="_blank">MyGet</a> is the add-package functionality from the official <a href="http://www.nuget.org" target="_blank">NuGet</a> feed. We felt this user experience could be better, so here's a first step!</p>

<p>First of all, the <strong>default search behavior</strong> has changed (and we hope improved as well!):</p>

<ul>
<li>the term you enter in the search box is used now to scan the NuGet <strong>package ID and Title only</strong></li>
<li>the default search method is <strong>StartsWith</strong> (self-explanatory I hope?)</li>
<li>uppercasing or lowercasing doesn't matter (we do a ToLower behind the scenes anyway)</li>
<li>by default, we now <strong>only <em>*search through the l</strong>atest versions</em>*</li>
</ul>

<p>You'll notice there are a bit more options in the UI as well, so you can adjust the behavior to your needs.</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-06-15/2011-6-improvedmygetaddpackagefromnugetfeedpart1.png" width="650" height="304" /></p>

<p>Some of the search settings are now optional:</p>

<ul>
<li>search through the package Summary field</li>
<li>search through the package Description field</li>
<li>search through all versions of all packages</li>
</ul>

<div>
  The moment you type at least two characters, an autocomplete box will display with your matching results, as shown below:
</div>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-06-15/2011-6-mygetaddofficialnugetpackageautocomplete.png" alt="" /></p>

<p>In a second phase, I hope to add some more useful functionality to this feature, such as search by Author, OSS license type, ...</p>

<p>Feel free to suggest the ones you feel are really missing on the <a href="http://myget.codeplex.com/workitem/4" target="_blank">MyGet workitems on Codeplex</a>.</p>
]]></content>
      <post-name type="text"><![CDATA[adding-nuget-packages-from-the-official-feed-to-your-myget-feed-some-improvements]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="28" date-created="2011-06-15T18:59:00" date-modified="2011-06-15T18:59:00" approved="true" post-url="/2011/06/15/myget-now-compatible-with-nuget-package-explorer-v15/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[MyGet now compatible with NuGet Package Explorer v1.5]]></title>
      <content type="text"><![CDATA[<p>Most of you will agree that <a href="http://nuget.codeplex.com/releases/view/59864" target="_blank">Package Explorer</a> is a major part within the <a href="http://www.nuget.org" target="_blank">NuGet</a> ecosystem. In preparation for the latest version 1.5 release, Luan Nguyen (aka <a href="http://twitter.com/#!/dotnetjunky" target="_blank">dotNetJunky</a>) pointed us to an incompatibility issue with <a href="http://www.myget.org" target="_blank">MyGet</a> (thanks again for that!).</p>

<p>A new package property <strong>IsLatestVersion</strong> was added and Package Explorer depends on it for the improved <em>Select package dialog</em> as <a href="http://npe.codeplex.com/wikipage?title=NuGet%20Package%20Explorer%201.5%20release%20notes" target="_blank">explained here</a>.</p>

<p>I'm glad to announce that MyGet is now using this property as well, with a slight switch to it.</p>

<p>In the NuGet Gallery, a package with IsLatestVersion=true simply means: it is the latest one... duh! :-) for the record: the latest <strong>official</strong> one!</p>

<p>For MyGet, we use this property within the scope of the specific MyGet feed: this means, it is <strong>the latest version available within that specific feed</strong>. Actually, this is exactly the same behavior as within the NuGet Gallery, but the meaning is different because it concerns a private feed on MyGet. The MyGet feed is (currently) unaware of new versions that might get published on the official one. So unless you upload or add a newer package to your MyGet feed, <span style="text-decoration: underline;">the <em>latest version</em> within your private feed might get out-of-sync with the <em>latest version</em> within the NuGet Gallery</span>.</p>

<p>Let me illustrate this with an example: let's say SomeAwesomePackage shipped a first version 1.0 in the NuGet Gallery which you added to your MyGet feed. This will be flagged with IsLatestVersion = true (it's the only version too). You later add a newer version 1.1 of the package, which in turn will be flagged as the latest version, and will unflag the 1.0 version. Now, your happy with this version and didn't upgrade for a couple of months, while version 1.2 has been made available in the NuGet Gallery. At this point in time, your latest version in the MyGet feed (v 1.1) is not the latest version from the NuGet Gallery (v 1.2). Just trying to point out the difference here :-)</p>

<p>To query your feed, just copy/paste your MyGet feed url into the dialog as shown below.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-06-15/2011-6-npe15testallversions.png" alt="" /></p>

<p>The little checkbox at the bottom saying <em>"Only show latest version of each package Id."</em> is interacting with the IsLatestVersion property of the packages.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-06-15/2011-6-npe15testlatestversiononly.png" alt="" /></p>

<p>Enjoy!</p>
]]></content>
      <post-name type="text"><![CDATA[myget-now-compatible-with-nuget-package-explorer-v15]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="29" date-created="2011-06-22T19:07:00" date-modified="2011-06-22T19:07:00" approved="true" post-url="/2011/06/22/silverlight-advanced-tooltips-v220-released/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Silverlight Advanced ToolTips v2.2.0 released]]></title>
      <content type="text"><![CDATA[<p>This release mainly contains bugfixes for issues reported by users of the library (and a big thanks to all those who even bothered supplying me with a patch!).</p>

<p>Here's the changelog for v2.1.1 --&gt; v2.2.0:</p>

<ul style="margin-left: 0em; padding-left: 2em; list-style-type: none; list-style-image: url('http://i2.codeplex.com/Images/v17889/doublearrow.gif');">
<li style="margin-left: 0px; margin-bottom: 0.3em; margin-top: 0.3em; vertical-align: middle;"><span style="text-decoration: underline;">bugfix</span>: fixed a memory leak issue</li>
<li style="margin-left: 0px; margin-bottom: 0.3em; margin-top: 0.3em; vertical-align: middle;"><span style="text-decoration: underline;">bugfix</span>: fixed an internal NullReferenceException on ToolTipService.OnElementIsEnabledChanged</li>
<li style="margin-left: 0px; margin-bottom: 0.3em; margin-top: 0.3em; vertical-align: middle;"><span style="text-decoration: underline;">bugfix</span>: fixed an internal KeyNotFoundException on ToolTipService.OnElementIsEnabledChanged</li>
<li style="margin-left: 0px; margin-bottom: 0.3em; margin-top: 0.3em; vertical-align: middle;"><span style="text-decoration: underline;">bugfix</span>: now properly supports binding with Fallback value when binding directly against Tooltip attached property</li>
<li style="margin-left: 0px; margin-bottom: 0.3em; margin-top: 0.3em; vertical-align: middle;"><span style="text-decoration: underline;">new</span>: added read-only bindable public property "Owner" which is a reference to the FrameworkElement that owns the ToolTip</li>
</ul>

<p>You can find the full changelog history <a href="http://tooltipservice.codeplex.com/wikipage?title=ChangeLog" target="_blank">here</a>.</p>

<p>Of course, this release is now <a href="http://www.nuget.org/List/Packages/Silverlight.Advanced.ToolTips" target="_blank">also available on NuGet</a>, so go ahead and make a benefit of this awesome packaging system (you'll get update notifications if an updated package is made available in the future).</p>

<p>Enjoy!</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-06-22/2011-6-nugetpackage_tooltipservice220.PNG" width="650" height="74" /></p>
]]></content>
      <post-name type="text"><![CDATA[silverlight-advanced-tooltips-v220-released]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="30" date-created="2011-07-06T19:21:00" date-modified="2011-07-06T19:21:00" approved="true" post-url="/2011/07/06/nuget-package-explorer-extension-open-dlls-with-ilspy/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[NuGet Package Explorer extension: open dlls with ILSpy]]></title>
      <content type="text"><![CDATA[<p>One of the things I find useful is being able to decompile an assembly and explore its inner workings. I bet you all are familiar with such tools as <a href="http://www.jetbrains.com/decompiler/" target="_blank">DotPeek</a>, <a href="http://wiki.sharpdevelop.net/ILSpy.ashx" target="_blank">ILSpy</a>, and the evil one which shall remain unnamed..</p>

<p>If you want to explore assemblies which are packaged into a <a href="http://www.nuget.org/" target="_blank">NuGet</a> package, you have to go through a manual process:</p>

<p>You unzip the entire package, you find the dll you need in explorer, you open it in your favorite decompiler. Of course, you can also just open the package in <a href="http://npe.codeplex.com/" target="_blank">Package Explorer</a>, and save the assemblies you want into some location, then go to explorer, find your assemblies back and open them respectively.</p>

<p>Now, this is just cumbersome. People can call us lazy, developers now we have a name for it, even a&nbsp;<em>best practice</em>: it's <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself" target="_blank">DRY</a>!</p>

<p>So those are my motivations to come up with a little extension to Package Explorer that can make your life easier. I've targetted ILSpy as my decompilation tool, simply because it also supports commandline arguments.</p>

<p><strong>Project description</strong></p>

<p>This extension to NuGet Package Explorer allows you to quickly open dll's from the package into ILSpy, without the need to extract the package, go into explorer, and open it up manually.</p>

<p><strong>Getting started</strong></p>

<p>To install the plugin, just open up <a class="externalLink" href="http://npe.codeplex.com">NuGet Package Explorer</a> and select Tools &gt; Plugin Manager...</p>

<p><img style="width: 600px;" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-07-06/npe_pluginmgr.png" /></p>

<p>Add the <a class="externalLink" href="http://npeilspy.codeplex.com/releases">downloaded library</a> in the list of loaded plugins and you're good to go.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-07-06/npe_loadedplugins.png" /></p>

<p>Just double click an assembly inside an NuGet package and it will prompt you to open it in ILSpy.</p>

<p><img style="width: 600px;" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-07-06/npe_openassembly.png" /></p>

<p><img style="width: 600px;" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-07-06/npe_ilspy.png" /></p>

<p>Of course you need to have <a class="externalLink" href="http://wiki.sharpdevelop.net/ILSpy.ashx">ILSpy</a> on your computer (as well as <a class="externalLink" href="http://npe.codeplex.com">NuGet Package Explorer</a> 1.5 or above).</p>

<p><strong>Bits and pieces</strong></p>

<p>This extension is open-source and available for you on&nbsp;<a href="http://npeilspy.codeplex.com" target="_blank">http://npeilspy.codeplex.com</a>.</p>
]]></content>
      <post-name type="text"><![CDATA[nuget-package-explorer-extension-open-dlls-with-ilspy]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="31" date-created="2011-07-12T19:27:00" date-modified="2011-07-12T19:27:00" approved="true" post-url="/2011/07/12/3-simple-steps-to-publish-a-nupkg-to-myget-using-nuget-package-explorer-16/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[3 simple steps to publish a nupkg to MyGet using NuGet Package Explorer 1.6]]></title>
      <content type="text"><![CDATA[<p>Today, Luan Nguyen (<a href="https://twitter.com/#!/dotnetjunky" target="_blank">@dotnetjunky</a>) <a href="http://npe.codeplex.com/wikipage?title=Release%20notes%20for%20NuGet%20Package%20Explorer%201.6" target="_blank">announced the release of NuGet Package Explorer (NPE) version 1.6</a>.</p>

<p>Those of you who installed/updated yet will have noticed he did a great job in improving the look-and-feel of the app, but I wanted to do a shout out here and point you to the feature I'm most excited about.</p>

<p>As you can read in the <a href="http://npe.codeplex.com/wikipage?title=Release%20notes%20for%20NuGet%20Package%20Explorer%201.6" target="_blank">release notes</a>, NPE now <strong>supports publishing packages to a custom source</strong>!</p>

<p>Now how convenient is that for.. let's say.. <a href="http://www.myget.org" target="_blank">MyGet</a> ?! :-)</p>

<p>Here's a little tutorial for you.</p>

<p><strong>How to publish a package to MyGet using Nuget Package Explorer 1.6</strong></p>

<ol>
<li><p>Grab your MyGet feed details (API key &amp; URL)</p>

<p><img width="650" height="501" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-07-12/2011-07-11_2356.png" /></p>

<p>(Don't try this one, the '<em>Change API key</em>' link <strong>does</strong> work ^^)</p></li>
<li><p>Open up or create your favorite NuGet package in NuGet Package Explorer 1.6</p>

<p><img width="650" height="397" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-07-12/2011-07-11_2353.png" /></p></li>
<li><p>Click on File > Publish... and follow the instructions using your feed details</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-07-12/2011-07-12_0010.png" alt="" /></p></li>
</ol>

<p>And that's it! Notice the "<em>package published successfully</em>" message and go check your MyGet feed. The next time you want to publish a package to this feed, Package Explorer will remember your API-key so you can just pick the feed URL from the dropdown. Nice and easy!</p>

<p><img width="650" height="249" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-07-12/2011-07-12_0018.png" /></p>

<p>Note that package details might be cached for a minute on the site, but the feed is updated immediately.</p>
]]></content>
      <post-name type="text"><![CDATA[3-simple-steps-to-publish-a-nupkg-to-myget-using-nuget-package-explorer-16]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="32" date-created="2011-07-18T19:32:00" date-modified="2011-07-18T19:32:00" approved="true" post-url="/2011/07/18/continuous-package-integration-nuget-vs-source-control/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Continuous Package Integration: NuGet vs Source Control]]></title>
      <content type="text"><![CDATA[<p><strong>Update (August 17, 2011):</strong></p>

<p><strong><em><a href="http://twitter.com/#!/davidfowl" target="_blank">David Fowler</a> created an awesome <a href="https://github.com/davidfowl/NuGetPowerTools" target="_blank">NuGetPowerTools</a> package that streamlines this process further. Also <a href="http://blog.davidebbo.com/2011/08/easy-way-to-set-up-nuget-to-restore.html" target="_blank">check out David Ebbo's post</a> for more info.</em></strong></p>

<p>One of the questions I receive regularly when talking about enterprise approaches for using <a href="http://www.nuget.org" target="_blank">NuGet</a>, is the following one:</p>

<p><em>"Why don't you put the NuGet packages in source control as well?"</em></p>

<p>In my opinion a very valid question to ask, and I reached the point where I realized it's better to write a blogpost on it once and use it for future reference :-)</p>

<p>Please note: what I will discuss here is my take on it, and not the holy grail!</p>

<h3>Storing NuGet packages in source control?</h3>

<p>As <a href="http://blog.davidebbo.com/2011/03/using-nuget-without-committing-packages.html" target="_blank">David Ebbo already explained</a>, there are approaches to not store the NuGet packages in source control. Your question is: why?</p>

<p>One could say that disk space is cheap! That's a valid approach if you have no issues repeating your dependencies in source control every single time. I'd like to see however how that works out for you if you have let's say 500 line of business apps in your SCM, all having the same dependency to your favorite logging library of around 0.5Mb. That's 250Mb worth of storage! This also slows down the time needed to perform a backup, or the disk space required to store your backups, thus increasing your costs in storage and power consumption. Now extrapolate this reasoning to all your dependencies..</p>

<p>Add on top of this that some SCM's don't manage binary files that well (TFS anyone?): ask your devs how much time they lost already fighting with a system that is unable to do binary diffing? You ever experienced upgrading an assembly in TFS from version X to version Y? Forgot to explicitly check out the file, replaced it on disk, to find out the system tells you it found no changes to commit? Don't get me wrong, TFS is a great tool, but its source control system could be better.</p>

<p>For some, this is a reason not to use TFS, but I'd say that any Source Control system is meant to store <span style="font-weight: bold; text-decoration: underline;">sources</span>, <strong>not binaries</strong>. Use a document management system if you need document versioning and take benefit from its search features for instance. Assemblies explicitly tell you their AssemblyVersion, so why would you want history on those files?</p>

<p>What you really want to is to have <strong>history on your dependencies</strong>! You want to be able to say: version A of my app depends on version X of a dependency, version B of my app depends on version Y of that same dependency, we upgraded X to Y on that date when person P was working on feature F... That's the interesting information, not the actual binary.</p>

<p>Now people argue: <em>Yeah, but I want my builds to be reproducable, a given changeset *(pardon my wording: *revision</em>)* should always produce the same output.* Agreed! But does that mean that the dependencies over which you don't have any control need to be in source control? You know, those libraries that already are versioned, the information already compiled and baked into the binary file? Nope, just reference them, you'll only find one binary that matches that specific version of the library out there (I'm coming back on this point later in this post). Now that's exactly the kind of information you'll find in the <em>repositories.config</em> and <em>packages.config</em> files that NuGet uses to keep track of your package dependencies.</p>

<p>A benefit of storing the packages in source control is that its consumers don't need to rely on NuGet. This is one of the main principles behind NuGet, as <a href="http://haacked.com/archive/2010/10/06/introducing-nupack-package-manager.aspx" target="_blank">outlined by Phill Haack in the announcement of NuGet</a>. That is nice indeed, and it is cool that you <em>can</em> do that, but should you? There are cases where you should, but I find them rare. The main reason for me to store those packages in source control would be because you don't want to wait for that choice to be made :-) Team A kicking off a new project could start using it, while Team B has no time because it's dealing with <a href="http://en.wikipedia.org/wiki/Feature_creep" target="_blank">featuritis</a>. In such situations you could benefit from storing the packages to avoid impacting other teams. </p>

<p>In my opinion, using NuGet or supporting teams that want to use it, <em>should preferably be</em> a <strong>company-wide strategic choice</strong>. For the same reason, you probably won't mix IDEs (Visual Studio, SharpDevelop, Notepad, VIM, other? :-)) amongst your team members, or mix source control systems (TFS, Git, SVN, ...), build servers, ...</p>

<p>So here is my statement:</p>

<ul>
<li><strong>don't store the binaries in source control</strong>: keep NuGet packages out</li>
<li><strong>only store the metadata in source control</strong>: keep track of repositories.config and packages.config files</li>
<li><strong>have a strategy</strong>: standardising the way you embrace the power of NuGet inside the organisation will benefit you all and avoid headaches</li>
</ul>

<h3>Continuous (Package) Integration</h3>

<p>Now, as stated earlier: every build of a given changeset/revision of your project should always produce the same output. How does this work when you depend on files which are not in source control?</p>

<p>Given the fact you do store what you depend on (<em>metadata</em>), all you need to do is fetch those dependencies in a pre-build step. This is what I call <strong>Continuous Package Integration</strong>.</p>

<p><em>Note: I'm speaking about CI builds here by example. I use the exact same approach for any other type of build: QA builds, Release builds, ...</em></p>

<p><img width="650" height="392" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-07-18/cpi.png" /></p>

<p>This setup implies you have a corporate NuGet server running, preferably even with multiple feeds. There are multiple ways to accomplish this, but if you want a quick start and play with this setup, I suggest you try out <a href="http://www.myget.org" target="_blank">MyGet (NuGet-as-a-Service)</a> and focus on your process first. MyGet can also help in <a href="http://blog.maartenballiauw.be/post/2011/07/15/Copy-packages-from-one-NuGet-feed-to-another.aspx" target="_blank">ensuring a specific package version is always available by mirroring packages from the official NuGet feed</a>.</p>

<h3>Optimization</h3>

<p>Now, it might seem cumbersome to continuously fetch those packages every single time you do a build, but what prevents you of setting up a caching mechanism on your build agents? Now its my turn to tell you disk space is cheap :-) (with the addition that it's used as a local cache: no need for backup).</p>

<p>This could be very simply accomplished with a few PowerShell scripts hooking into the build steps, that check the local cache first, and if not present fetch it. This mechanism will be self-organizing and become faster as we use it (don't you like that?).</p>

<p>The same counts for your development machines: have a script and local cache for the packages you use. Run a pre-build that checks if any repositories.config or packages.config file has changed and updates your local environment.</p>

<p>Please, feel free to comment and share your thoughts on this matter!</p>
]]></content>
      <post-name type="text"><![CDATA[continuous-package-integration-nuget-vs-source-control]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="33" date-created="2011-09-09T19:37:00" date-modified="2011-09-09T19:37:00" approved="true" post-url="/2011/09/09/a-word-on-using-and-abusing-nuget/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[A word on using and abusing NuGet]]></title>
      <content type="text"><![CDATA[<p>One thing I really like about using NuGet is the fact that it creates a window of opportunities: you can use it in different ways, you can abuse it in different ways. Whether you use it, or you abuse it (read: use it in a different way than it was intended to be used), that's totally up to you. However, there are some common pitfalls I've noticed people struggling with when taking things to the next level.</p>

<p>NuGet is a package management system: it facilitates finding, installing, updating and removing NuGet packages. It also manages metadata such as version and dependency information to prevent missing prerequisites. Packages typically contain binaries and thus implies, in most people's heads, an added dependency when installing the package in a target project or solution. This is as basic as NuGet can get.</p>

<h3>What you see is what you get?</h3>

<p>Some very smart guys immediately saw an opportunity here: what if my package is adding <em>functionality</em> instead of a <em>dependency</em>? Hence <a href="http://blog.stevensanderson.com/2011/01/13/scaffold-your-aspnet-mvc-3-project-with-the-mvcscaffolding-package/" target="_blank">scaffolding</a> was born: really great stuff! This subtle but important tweak kills the assumption though that an installed NuGet package is an added dependency.</p>

<p><strong>Conclusion #1: Installing a NuGet package does not necessarily add a software dependency</strong> to the target project/solution you're developing on.</p>

<p>It usually does, but do not assume it does it all the time. The importance of this first conclusion might not be obvious at first, but I hope to explain it by the end of this post, when you've read my second conclusion.</p>

<h3>Don't automate for the sake of automation</h3>

<p>The biggest opportunity NuGet facilitates unintended, is the fact you can get rid of those referenced binaries polluting your source control system, as <a href="http://www.xavierdecoster.com/post/2011/07/18/Continuous-Package-Integration-NuGet-vs-Source-Control.aspx" target="_blank">I explained in an earlier post</a>. I'm really a big fan of this approach when set up properly. The NuGetPowerTools package (adding <em>functionality!</em>) is a must-have if you want to make life easy. After installing it, you won't have any binary dependency to any referenced library or what-so-ever. What you will get is a few extra commands ready to be used in the NuGet Package Manager Console. <a href="http://blog.davidebbo.com/2011/08/easy-way-to-set-up-nuget-to-restore.html" target="_blank">David Ebbo explains its usage</a> on his blog, but the key take-away relevant to my point here is that this tiny <em>functionality-adding package</em> is affecting the build process. Unlike the scaffolding packages, adding functionality to the IDE, this one is adding functionality to the <em>build process</em>: using MSBuild targets and the NuGet commandline, a pre-build step is added to the projects, fetching the NuGet packages from a configurable package source (or multiple sources).</p>

<p>Knowing all this, it's really important here that you keep in mind that some core principles didn't change... at all! Continuous integration is a proven important development practice and build automation plays a key part in it (<a href="http://paulstack.co.uk/blog/post/How-to-get-started-with-CI.aspx" target="_blank">Paul Stack's excellent series on the topic</a> should get you started). Here's where the other pitfall comes into play. Since we've changed the build process to <em>continuously integrate NuGet packages</em>, people start looking even for more opportunities. It is using the NuGet commandline behind the scenes, right? And it has an <em><a href="http://docs.nuget.org/docs/reference/command-line-reference#Update_Command" target="_blank">update</a></em> command, right? So... why don't we automatically update our packages to the latest version in our automated builds? I mean, it's safe, right? The command comes with a -Safe switch, so it must be!</p>

<p>Well, I'm not questioning whether it is safe or not (although you fully rely on package producers using proper versioning). I'm questioning whether you should even ask the question! </p>

<p>Each build of a given single version (changeset/revision) of your sources should produce the same result, always! If this is not the case, your builds are not reliable, because the state of your product has not changed. Same input produces same output.</p>

<p>If you allow your automated builds to change the version of the referenced packages you rely on (and these are <em>dependencies</em>, as they are <em>referenced</em> by your resulting binaries), you're effectively changing the <em>input</em> of the build process, resulting in a different output, without affecting the state of the product in your version control system. You are adding <em>state</em> to your build environment, and you loose it on every build! Your build of yesterday morning might be a different one than the one produced today, even if the entire team did not commit any changes. Maybe a new version of a package was released during the night, and got picked up by today's build?</p>

<p><strong>Conclusion #2: Do not auto-update NuGet packages during automated builds</strong> for the reasons explained above.</p>

<p>It's a small, but subtle difference between a NuGet <em>dependency</em> package, and a NuGet <em>functionality</em> package, but the implications can reach us from 'dependency hell' (what NuGet helps us to solve) to "bug management hell" (which may occur when bugs get reported on unreliable builds).</p>
]]></content>
      <post-name type="text"><![CDATA[a-word-on-using-and-abusing-nuget]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="34" date-created="2011-09-30T19:40:00" date-modified="2011-09-30T19:40:00" approved="true" post-url="/2011/09/30/an-overview-of-the-nuget-ecosystem/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[An overview of the NuGet ecosystem]]></title>
      <content type="text"><![CDATA[<p>Many people are starting to realize what an awesome tool NuGet really is. If you don't believe me, just take a look the <a href="http://stats.nuget.org" target="_blank">statistics</a>. Looking at the NuGet ecosystem out there, I figured it might be a good idea to summarize it in a blogpost, for those who are experiencing trouble trying to keep up. If you don't know where to start, check the overview below and head over to the <a href="http://docs.nuget.org" target="_blank">NuGet documentation</a>.</p>

<ul>
<li><p><strong>NuGet -</strong> The <a href="http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c" target="_blank">NuGet Visual Studio extension</a>, available in the Visual Studio Gallery, comes with a nice integrated experience that makes managing NuGet packages as simple as adding a reference. You can customize its settings, you can perform most standard operations from a graphical user interface, and you can do more advanced stuff using the Package Manager Console. This PowerShell-enabled console is opening the door to Visual Studio automation and is an example of how NuGet can be so much more than <em>just</em> a package manager. Scaffolding is a great example of this.</p></li>
<li><p><strong>NuGet Gallery</strong> - The <a href="http://www.nuget.org" target="_blank">nuget.org</a> website allows you to create an account and get an API key to start publishing packages to the official NuGet feed. You can also query the NuGet Gallery and find more information about packages and their creators. As a package producer, this is also the place where you will find download statistics.</p></li>
<li><p><strong>NuGet Package Explorer</strong> - This <a href="http://npe.codeplex.com/releases/view/68211" target="_blank">nice and handy tool</a> allows you to open, create, publish and validate NuGet packages from within a graphical user interface. It supports plug-ins allowing you to extend its functionality even further. If you don't feel comfortable playing around with the NuGet manifest XML file (*.nuspec), then this is the right tool for you.</p></li>
<li><p><strong>NuGet Command Line -</strong> The <a href="http://www.nuget.org/List/Packages/NuGet.CommandLine" target="_blank">NuGet command line tool</a> allows you to perform operations against NuGet repositories or Visual Studio solutions/projects. It comes in really handy in continuous (package) integration scenarios. The <a href="http://www.nuget.org/List/Packages/NuGetPowerTools" target="_blank">NuGetPowerTools</a>, which will become part of NuGet itself, makes good use of it.</p></li>
<li><p><strong>NuGet.Server package</strong> - Allows you to set up your own <a href="http://www.nuget.org/List/Packages/NuGet.Server" target="_blank">NuGet server</a> fast and easy and exposes a single feed. Another way is to <a href="https://github.com/NuGet/NuGetGallery" target="_blank">create your own NuGet Gallery</a>.</p></li>
<li><p><strong>MyGet</strong> - <a href="http://www.myget.org" target="_blank">MyGet</a> makes package management even easier, by providing you with NuGet-as-a-Service. Log in, create a feed and start uploading or consuming your packages right away! No need to set up a NuGet server yourself, and you benefit from enhanced security and accessibility through the use of the Windows Azure Access Control Service.</p></li>
<li><p><strong>Chocolatey</strong> - <a href="http://chocolatey.org/" target="_blank">Chocolatey</a> is moving the solution-wide package manager to new frontiers: NuGet as a system-wide package management tool! Looks promising and is definitely something to keep an eye on.</p></li>
<li><p><strong>Octopus</strong> - <a href="http://www.paulstovell.com/octopus/intro" target="_blank">Octopus</a> is a convention-based solution using NuGet as a protocol for automated deployments. Another example of thinking outside of the box and putting NuGet in a new perspective.</p></li>
<li><p><strong>NuGetFeed</strong> - <a href="http://nugetfeed.org/" target="_blank">NuGetFeed</a> allows you to create a <em>favorites</em> list for NuGet packages, allowing you to monitor them for updates. Great addition to the NuGet ecosystem in my opinion.</p></li>
<li><p><strong>Windows Azure NuGetRole</strong> - Not really a tool, but <a href="http://blog.maartenballiauw.be/post/2011/09/23/NuGet-push-to-Windows-Azure.aspx" target="_blank">a very cool (and working!) concept</a> to push deployments to Azure using NuGet.</p></li>
<li><p><strong>NuGet integration in JetBrains TeamCity</strong> - If you're using TeamCity, <a href="http://blogs.jetbrains.com/teamcity/2011/07/20/nuget-plugin/" target="_blank">you'll get all the NuGet goodness</a> built-in!</p></li>
<li><p><strong>NuGit</strong> - <a href="http://nugit.org/" target="_blank">NuGit</a> is a new kid in the blok: distributing opensource projects faster using NuGet integration with Github</p></li>
<li><p><strong>Artifactory</strong> - <a href="http://www.jfrog.com/news.php?id=42" target="_blank">Artifactory</a> is a well-known repository manager which now also supports NuGet packages.</p></li>
<li><p><strong>Sonatype Nexus Professional</strong> - <a href="http://sonatype.com/Products/Nexus-Professional" target="_blank">Nexus</a> is another repository manager that now embraces NuGet, and they even have a nice <a href="http://www.sonatype.com/people/2012/02/what-is-nuget-for-java-developers/" target="_blank">introduction to NuGet for Java Developers</a> on their blog.</p></li>
<li><p><strong>OpenWrap</strong> - <a href="http://www.openwrap.org/" target="_blank">OpenWrap</a> is an alternative package manager <a href="https://github.com/openrasta/openwrap/wiki/Nuget" target="_blank">compatible with NuGet remotes</a>.</p></li>
<li><p><strong>NuGetMustHaves</strong> - The <a href="http://nugetmusthaves.com" target="_blank">NuGetMustHaves.com</a> website provides a nice categoric overview of popular must-have NuGet packages</p></li>
<li><p><strong>NuGet Server in Java</strong> - <a href="http://blog.jonnyzzz.name/2012/03/nuget-server-in-pure-java.html" target="_blank">This</a> is a Java implementation of a NuGet Server.</p></li>
<li><p><strong>ProGet</strong> - By <a href="http://inedo.com/proget/overview" target="_blank">Inedo</a>, another on-premise NuGet repository tool.</p></li>
<li><p><strong>NuGetFight</strong> - <a href="http://www.nugetfight.com" target="_blank">NuGetFight</a> allows you to enter a NuGet packages battle on a NuGet feed (e.g. NuGet Gallery, Chocolatey, MyGet). Can't decide between two packages? Fight!</p></li>
</ul>

<p>It is great to see how NuGet adoption is growing, especially when people come up with innovative ideas that facilitate our work even further. I'm convinced a package manager such as NuGet should be part of any development environment. If you're not using NuGet yet, consider giving it a try and find out for yourself!</p>
]]></content>
      <post-name type="text"><![CDATA[an-overview-of-the-nuget-ecosystem]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="35" date-created="2011-10-06T19:57:00" date-modified="2011-10-06T19:57:00" approved="true" post-url="/2011/10/06/generate-package-dependency-matrix-directly-from-tfs-source-control-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Generate NuGet package dependency matrix directly from TFS source control]]></title>
      <content type="text"><![CDATA[<p>I've played with this idea for a while now, and I've finally <a href="http://nuget.codeplex.com/SourceControl/network/Forks/XavierDecoster/NuGetTfs" target="_blank">forked the NuGet sources</a> to add this functionality to the Commandline tool. This is work in progress, so please bear with me on this one. If you find defects or have suggestions for improvement, feel free to drop me a mail or comment on this post ;-)</p>

<p>Something any decent software factory wants to know at any time is the answer to the following questions:</p>

<ul>
<li>Who is using version X of component Y?</li>
<li>Which versions of component Z are in use (and which not)?</li>
<li>What dependencies does application A have, and to which versions?</li>
</ul>

<p>Answering these questions typically requires someone to maintain a spreadsheet with dependency matrixes. My goal is to get rid of this work and automate this. I've used TFS Source Control for my implementation as I can probably find immediate use for it. Also, it was a good exercise to play with the <a href="http://msdn.microsoft.com/en-us/library/bb130146(v=VS.100).aspx" target="_blank">Team Foundation Server 2010 SDK</a>.</p>

<p>Here's a screenshot of what I committed into my NuGet fork:</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-10-06/nugetcmdlineanalyse.png" alt="" /></p>

<p>Why did I add the <em>tfs</em> action to the command? Because I'd love to see this command work for other version control systems as well, such as SVN, Git, Mercurial...</p>

<p>I've obviously still got some work to do on the authentication part as well as you might notice, although I use <a href="http://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.client.uicredentialsprovider(v=VS.100).aspx" target="_blank">UICredentialsProvider</a> from the SDK, which should prompt you with a dialog when the system cannot automatically authenticate you, as shown below.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-10-06/nugetcmdlineanalyseauthentication.png" alt="" /></p>

<p>As you can see in the first screenshot of this post, I currently enumerate the entire server for all Team Project Collections and all Team Projects within them. The command will of course respect source control permissions for your account and only return those you have access to. Within each Team Project, a lookup is done for any repositories.config and packages.config files, their XML is analysed and a dependency matrix is generated for each Team Project.</p>

<p>Possible improvements I can think off are:</p>

<ul>
<li>add a <em>-Repository</em> option to the command to limit the scope of the analysis on the server to a specific path (and everything underneath)</li>
<li>add some cmdline authentication options</li>
<li>fine tune the analysis on the branch and/or solution level instead of on the team project level</li>
<li>making this a commandline extension command (instead of built-in) to avoid dependencies to TFS SDK in NuGet cmdline?</li>
</ul>

<p>I'm sure you might have other great ideas as well, so don't hesitate to post them here, or provide me with a patch :-)</p>

<p>This is a first implementation and needs further testing, so you've been warned! Hold on to your <a href="http://en.wikipedia.org/wiki/Neutrino" target="_blank">neutrinos</a> if things go horribly wrong!</p>

<p>Enjoy!</p>
]]></content>
      <post-name type="text"><![CDATA[generate-package-dependency-matrix-directly-from-tfs-source-control-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="36" date-created="2011-10-07T20:00:00" date-modified="2011-10-07T20:00:00" approved="true" post-url="/2011/10/07/nuget-analyze-now-available-as-command-line-extension-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[NuGet.Analyze now available as command line extension]]></title>
      <content type="text"><![CDATA[<p><strong>2011-10-20 Edit: the NuGet.Analyze.Installer package is now obsolete, as explained in <a href="http://www.xavierdecoster.com/post/2011/10/20/Install-NuGet-command-line-extensions-using-the-Package-Manager-Console.aspx" target="_blank">this post</a>. Use the more generic installation procedure provided by the NuGet.InstallCommandLineExtension package instead.</strong></p>

<h1>Extending the command line</h1>

<p>Earlier this week, I <a href="http://www.xavierdecoster.com/post/2011/10/06/Generate-package-dependency-matrix-directly-from-TFS-source-control.aspx" target="_blank">posted an article</a> about a proof-of-concept I'm working on. I want to analyze a source control repository for <a href="http://www.nuget.org" target="_blank">NuGet</a> package dependencies and generate some kind of dependency matrix out of it. My proof-of-concept is targeting Team Foundation Server, as it is the most usable scenario for me to support in the short term, but I'd like to be able to do this against any type of source control system in the future.</p>

<p>As it is just a proof-of-concept, I quickly forked the NuGet repository on Codeplex and rambled a piece of code together that did what I wanted to test. This was very quick and even more dirty. Especially the added dependencies to the TFS SDK must have been heart-breaking for the NuGet command line. Sorry about that :-)</p>

<p>However, I noted the usage of MEF and a constant for a command line extensions folder in the sources. About at the same time, my colleague <a href="http://blog.maartenballiauw.be" target="_blank">Maarten Balliauw</a> reminded me about the possibility to extend the NuGet command line. This feature was added in NuGet version 1.4 and has not yet received all the attention it deserves. Another hookpoint to exploit! (read: use properly :-)) If you want to learn how, please take a look at Rob Reynolds (<a href="http://twitter.com/#!/ferventcoder" target="_blank">@ferventcoder</a>) <a href="http://geekswithblogs.net/robz/archive/2011/07/15/extend-nuget-command-line.aspx" target="_blank">great post on this topic</a> for full details.</p>

<p>Knowing this, I thought it was a good idea to refactor this command into a command line extension and package it up for consumption. People who want to try it out can go grab it already, but please be aware that it is a <em>proof-of-concept</em> that deserves more testing and tweaking. However, I find feedback from actual users to be most valuable.</p>

<h1>Installing the command line extension</h1>

<p>There was one thing I didn't like about my package though: the distribution process. My package is adding an extension to the command line, and is not adding a dependency to any target project or solution. I'm crossing the boundaries here of application-level package management, something NuGet was originally designed for. If you've read my blog before, you're probably already aware of the fact that I'm looking at NuGet from a different perspective: NuGet as a protocol.</p>

<p>I learned about an <a href="http://nuget.org/List/Packages/AddConsoleExtension" target="_blank">AddExtension</a> command line extension for NuGet, which should ease this pain. One problem though: installing this extension doesn't feel natural at all! This is the description of the package:</p>

<p><em>To use this package, install the package using NuGet.exe to %LocalAppData%\NuGet\Commands NuGet.exe Install /ExcludeVersion /OutputDir %LocalAppData%\NuGet\Commands AddConsoleExtension</em></p>

<p>Really? I know, strictly speaking, this is a perfectly valid way to install a NuGet package. It is also a way of saying: "You're extending the command line anyway, so use it!". Perfectly fine for me, but what happens if you try to install this package using the Package Manager Console from within Visual Studio? Or using the Package Manager dialogs? You don't get the same results! Even worse, the package is not correctly installed as the package producer intended!</p>

<p>That's why I came up with an installer for my package: a nuget package that installs another nuget package :-) Actually, my idea got inspired by <a href="http://twitter.com/#!/davidfowl" target="_blank">David Fowler</a>'s <a href="http://nuget.org/List/Packages/NuGetPowerTools" target="_blank">NuGetPowerTools</a>, which is having the exact same behavior: it installs functionality, not a dependency. If you would unzip the <a href="http://packages.nuget.org/v1/Package/Download/NuGetPowerTools/0.29" target="_blank">NuGetPowerTools nupkg</a>, you'd notice there's only a bunch of PowerShell scripts. Diving a bit deeper revealed something very noteworthy: the PowerShell scripts are installing <a href="http://nuget.org/List/Packages/NuGet.Build" target="_blank">another package</a>!</p>

<p>Hence, all the pieces required to make things smoother were falling together: I could design my command line extension package just like any other NuGet package, and have an installer package that installs it where I want it to be installed. If you still decide to install my package without using my installer package, you basically decided you wanted to reference it in your project. Either way, both of my packages will always have the same installation results, whether you use the NuGet command line, the Package Manager Console or the GUI.</p>

<p>To install the <a href="http://nuget.org/List/Packages/NuGet.Analyze" target="_blank">NuGet.Analyze</a> command line extension, run the following script:</p>

<ul>
<li>from the Package Manager Console: <em>Install-Package NuGet.Analyze.Installer</em></li>
<li>from the command line: <em>nuget install NuGet.Analyze.Installer</em></li>
</ul>

<p>Or just install the <a href="http://nuget.org/List/Packages/NuGet.Analyze.Installer" target="_blank">NuGet.Analyze.Installer</a> package using the GUI in Visual Studio.</p>

<p>The commands are much more concise, the behavior is consistent! I like.</p>
]]></content>
      <post-name type="text"><![CDATA[nuget-analyze-now-available-as-command-line-extension-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="37" date-created="2011-10-10T20:04:00" date-modified="2011-10-10T20:04:00" approved="true" post-url="/2011/10/10/agile-net-2011-europe-slidedeck-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Agile .NET 2011 Europe slidedeck]]></title>
      <content type="text"><![CDATA[<p><input type="hidden" value="{EAV_BLOG_VER:3a47b38bce3f536c}" /></p>

<p>Today, <a href="http://blog.maartenballiauw.be" target="_blank">Maarten Balliauw</a> and I had the pleasure of hosting a NuGet workshop at the <a href="http://www.agileminds.be/event/5" target="_blank">Agile .NET Europe</a> conference in Ghent, Belgium. We are very happy that <a href="http://www.nuget.org" target="_blank">NuGet</a> found its place next to other very interesting sessions during this conference.</p>

<p>The title of our session was: <em>"Organize your chickens: NuGet for the Enterprise"</em>.</p>

<p><em>Managing software dependencies, whether those created in-house or from third parties can be a pain in the behind. Whether dependencies feel like wild chickens or people run around like chickens dealing with dependencies, the NuGet package manager can be a cure. Let us guide you to creating enterprise (chicken) NuGets and dealing with them in a structured, easy-to-maintain manner. From developer workstation to build server, NuGet tastes great! We'll provide you with the dip sauce.</em></p>

<p>If you want to know what it's all about, please findÂ our slidedeck below, which Maarten gracefully uploaded to SlideShare.</p>

<p>By all means, go through it, ask questions, send us feedback. Enjoy!</p>

<div id="__ss_9632373" style="width: 595px;"><strong style="display: block; margin: 12px 0 4px;"><a title="Organize your chickens: NuGet for the enterprise" href="http://www.slideshare.net/maartenba/organize-your-chickens-nuget-for-the-enterprise" target="_blank">Organize your chickens: NuGet for the enterprise</a></strong> <object id="__sse9632373" width="595" height="497"> <embed type="application/x-shockwave-flash" width="595" height="497" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=20111010-agileminds-organizeyourchickens-nugetfortheenterprise-111010105141-phpapp02&amp;rel=0&amp;stripped_title=organize-your-chickens-nuget-for-the-enterprise&amp;userName=maartenba" name="__sse9632373" allowscriptaccess="always" allowfullscreen="true" /> </object>
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/maartenba" target="_blank">Maarten Balliauw</a></div>
</div>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>
]]></content>
      <post-name type="text"><![CDATA[agile-net-2011-europe-slidedeck-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="38" date-created="2011-10-17T20:09:00" date-modified="2011-10-17T20:09:00" approved="true" post-url="/2011/10/17/tell-tfs-not-to-add-nuget-packages-to-source-control/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Prevent TFS from adding installed NuGet packages to source control]]></title>
      <content type="text"><![CDATA[<p>I recently came accross a tweet asking for help, because TFS was always adding the installed NuGet package binaries into source control automatically. Especially when you want to use <a href="http://www.nuget.org" target="_blank">NuGet</a> with <a href="http://www.xavierdecoster.com/post/2011/07/18/Continuous-Package-Integration-NuGet-vs-Source-Control.aspx" target="_blank">a no-commit strategy</a>, this can be fairly annoying. I also realize a DVCS is using the concept of a .ignore file or something similar, which I really like, but this is not the concept TFS uses. So for those on TFS source control, here's my workaround...</p>

<p>In a nutshell, all we want to have in our VCS, is a trace of which dependencies we have, and which versions we depend on. So in NuGet terms, we're talking about package IDs and package versions. This happens to be exactly what is being stored into the <em>packages.config</em> files that NuGet produces when managing NuGet packages in a project/solution. Next to that, there's also the <em>repositories.config</em>, by default located under the <em>$(solutionDir)\packages</em> folder. The repositories.config, as the file name suggests, keeps track of the different NuGet repositories that your solution projects rely on and is thus pointing to all packages.config files for a given solution. This is the kind of meta-information we want to keep track of.</p>

<p>The no-commit strategy tells you not to commit any NuGet packages into your VCS, but as most people using TFS have mapped the entire branch to their workspace, this causes issues. Whenever we install a package through VisualStudio into a mapped workspace folder, VisualStudio tells TFS to add these files to source control. We want to keep track of the repositories.config, but not of the actual packages, which are by default being installed into the same $(solutionDir)\packages folder. Respecting NuGet's <em>convention-over-configuration</em>Â approach, we want to keep these defaults.</p>

<p>My workaround is actually pretty simple, albeit not that straightforward given the lousy UI that the workspace mapping dialog provides. If you thought you could only map folders, then think again! :-) You can map single files as well!</p>

<p>Knowing this is half of the work, the other part is just setting the correct workspace mapping, as shown below:</p>

<p><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2011-10-17/tfs_workspace_nuget_packages_folder.png" target="_blank"><img width="650" height="338" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-10-17/tfs_workspace_nuget_packages_folder.png" /></a></p>
]]></content>
      <post-name type="text"><![CDATA[tell-tfs-not-to-add-nuget-packages-to-source-control]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="39" date-created="2011-10-20T20:17:00" date-modified="2011-10-20T20:17:00" approved="true" post-url="/2011/10/20/install-nuget-command-line-extensions-using-the-package-manager-console-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Install NuGet command line extensions using the Package Manager Console]]></title>
      <content type="text"><![CDATA[<p>It's quite late into the night over here, and the blog post is quite abstract, so please bare with me on this one :-)</p>

<p>While I was playing around tweaking and optimizing some things on my recently created <a href="http://www.xavierdecoster.com/post/2011/10/07/NuGet-Analyze-now-available-as-command-line-extension.aspx" target="_blank">NuGet.Analyze</a> package, I actually found a way to install a NuGet command line extension from within the NuGet Package Manager Console. Basically, I'm just using some PowerShell scripts to automate the installation procedure.</p>

<p>I've wrapped it up in a package, and created a new cmdlet you all can use from now on: it's called *Install-CommandLineExtension. *To install it, simply install the <strong><a href="http://www.nuget.org/List/Packages/NuGet.InstallCommandLineExtension" target="_blank">NuGet.InstallCommandLineExtension</a></strong> package.</p>

<p><img width="650" height="74" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-10-20/2011-10.png" /></p>

<p>By default, it will also install a first command line extension that provides the same functionality from the command line. This one adds a new command <em><a href="http://www.nuget.org/List/Packages/AddConsoleExtension" target="_blank">addextension</a></em> to the console. As you can see in the description of the <em>addExtension</em> package, it's instructing you with manual steps to get the thing installed, like this:</p>

<p>To use this package, install the package using NuGet.exe to %LocalAppData%\NuGet\Commands: *nuget.exe install -excludeversion -outputdir %LocalAppData%\NuGet\Commands AddConsoleExtension. *I actually ended up with a similar situation for my own extensions, and didn't feel very comfortable about that. Hence I kept looking for a solution I liked more and came up with this.</p>

<p>So in short: you'll be able to install extensions to the commandline, both from within the commandline as from within the package manager console now, just by installing this one single NuGet package.</p>

<p>Once this new cmdlet is available, you can simply extend you nuget command line as shown below:</p>

<p><img width="650" height="95" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-10-20/PMC_InstallCommandLineExtension_NuGetAnalyze.PNG" /></p>

<p>If you intend to create your own NuGet Command Line extensions and publish them on the gallery, please use the 'ConsoleExtension' tag for your package. The extensions that are already available do this, and that allows you to very easily find those extensions in the gallery by using the following link: <a href="http://www.nuget.org/List/Search?searchTerm=tag%3A%20ConsoleExtension">http://www.nuget.org/List/Search?searchTerm=tag%3A%20ConsoleExtension</a>. Please give it a try and install any of those console extensions using this new cmdlet.</p>

<p>It just made my NuGet.Analyze.Installer package obsolete, and actually most likely all future installer packages that would have appeared for other extensions as well.</p>

<p>Hope this helps!</p>
]]></content>
      <post-name type="text"><![CDATA[install-nuget-command-line-extensions-using-the-package-manager-console-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="40" date-created="2011-11-16T20:24:00" date-modified="2011-11-16T20:24:00" approved="true" post-url="/2011/11/16/why-everyone-should-be-using-a-symbol-server/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Why everyone should be using a symbol server]]></title>
      <content type="text"><![CDATA[<p>Today we are excited to <a href="http://blog.maartenballiauw.be/post/2011/11/16/Publishing-symbol-packages-for-a-MyGet-feed.aspx" target="_blank">announce</a> that <a href="http://www.myget.org" target="_blank">MyGet</a> has partnered with <a href="http://www.symbolsource.org" target="_blank">SymbolSource</a> to deliver you private NuGet feeds integrated with private symbol repositories! I really want to send kudos to everyone involved - you know who you are - and I personally really like the direction this is going. With this post I want to explain to you why you, and everyone else, should be using a symbol server as part of his development environment.</p>

<p>First an obvious one: <strong>it is super handy!</strong> We come from an age where we all cloned an open source repository and built the sources locally to reference its resulting binaries. If we were lucky, the binaries where available as well. Others preferred just fetching all sources and reference them as such, so they <em>felt</em> more in control and could see what was happening during the debug process.</p>

<p>With the introduction of a package manager for .NET such as <a href="http://www.nuget.org" target="_blank">NuGet</a>, this behavior has changed. We now can simply query a feed, download and install a package, usually containing binaries which end up as references in the target project. This means that if we now want to step through the code, especially the code from one of those third-party references, we are (actually Visual Studio is) typically missing some information (unless the package author distributes <a href="http://www.wintellect.com/CS/blogs/jrobbins/archive/2009/05/11/pdb-files-what-every-developer-must-know.aspx" target="_blank">PDB files</a> as well, which he really shouldn't).</p>

<p>Before the NuGet-era, those who were using Team Foundation Server (TFS) could easily index there sources in a build definition. As such, a release build, for instance, could easily publish its debug symbols to a central repository. TFS comes with a built-in symbol server, a very neat and little known or used feature. You could simply configure Visual Studio to use the central symbol repository as a <em>symbols source</em> (mind the wording here) for use during the debug process. Read <a href="http://www.edsquared.com/2011/02/12/Source+Server+And+Symbol+Server+Support+In+TFS+2010.aspx" target="_blank">Ed Blankenship's great post</a> on this topic and remember the words: <strong>symbols are as important as source code!</strong> </p>

<p>All this is great! But what if I wasn't using TFS? Well, you could spend a lot of effort and fight your way through <a href="http://msdn.microsoft.com/en-us/library/ms680641%28v=vs.85%29.aspx" target="_blank">Windows Source Server</a> and its scripts for various VCS systems, and a few of us did. It happens to be that some of those brave guys are also the guys that were thinking: is there no easier solution for this? If you're still asking yourself the same question today, now's a good time to read up <a href="http://www.symbolsource.org/Public/Home/About" target="_blank">about SymbolSource</a>, because that's exactly what they meant!</p>

<p>Additionally, there are some <strong>clear benefits for the open source community!</strong> One key benefit for package producers is that it stimulates open source contributions from none team members, or at least allows you to receive more detailed error/bug reports, pointing to the exact location in the code where the issue might be. To all those who do take the effort of reporting those, please do point to source code whenever possible! Any open source project that wants to get better feedback or more contributions/patches/bugfixes from the community, should push his symbols to symbolsource. This brings us to a key benefit for package consumers: you know what€™s happening outside of your code base, because you can now step through and debug in detail, potentially ruling out that the issue is on your side, or on the package€™s side.</p>

<p>It's also <em>*not only for open source code! *</em>Using NuGet and SymbolSource, everyone can now take benefit from a symbol server, whether it concerns symbols of your own or from third parties. If you didn't play with it yet, I really encourage you to do so, and experience the benefits in real life. As of today, it's also no longer limited to open source code: using MyGet and its brand new integration with SymbolSource, you can now very easily set up a private, secured NuGet repository combined with a symbols repository in no time! </p>

<p>All the info you need is right at your fingertips, available in MyGet's feed details. Enjoy!</p>

<p><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2011-11-16/image.png"><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-11-16/image.png" alt="" width="600px" /></a></p>
]]></content>
      <post-name type="text"><![CDATA[why-everyone-should-be-using-a-symbol-server]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="41" date-created="2011-11-13T20:29:00" date-modified="2011-11-13T20:29:00" approved="true" post-url="/2011/11/13/gently-phase-out-support-for-older-nuget-packages-with-myget-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Gently phase out support for older NuGet packages with MyGet]]></title>
      <content type="text"><![CDATA[<p>Simply deleting those packages is most likely not the best option. You probably have no idea of who still depends on them, either directly or through another package depending on it, even though you could try to <a href="http://www.xavierdecoster.com/post/2011/10/06/Generate-package-dependency-matrix-directly-from-TFS-source-control.aspx" target="_blank">analyze your source control repositories</a> and get some first insights.</p>

<p><a href="http://www.myget.org" target="_blank">MyGet</a> now has a new feature that allows you to indicate whether or not you still support a given package.</p>

<h1>Toggle Package Support</h1>

<p>When navigating to the package details page on MyGet, you'll notice that a new button has been added next to each entry in the package history listing, as shown below.</p>

<p><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2011-11-13/package_history.png" target="_blank"><img width="650" height="174" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-11-13/package_history.png" /></a></p>

<p>You can easily toggle the state of a package by marking it as listed or unlisted. We'll also alert you about the impact of your change so you can't break anything by accidentally clicking the button.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2011-11-13/alert_make_unlisted.png" alt="" /></p>

<h1>Package Listing Explained</h1>

<p>By default, all new packages are listed obviously, otherwise you wouldn't be able to download the package from the feed. However, we want to give you the ability to explicitly <em>unlist</em> a package from your feeds. By unlisting a package, you indicate you no longer wish to support that specific version of a package. In essence, you want to <strong>give people a gentle push towards upgrading</strong> to a newer version. That's exactly the goal of this feature.</p>

<p>Unlisting a package is not the same as permanently deleting a package from the feed. You could look at it as performing a <strong>soft delete</strong>. This also means that this operation <strong>can be undone</strong>! The operation of listing or unlisting a package is restricted to <em>feed owners, feed co-owners *and *feed contributors</em>. If you only have <em>package contributor</em> permissions for the feed, you also have to be the explicit <em>package owner</em>.</p>

<p>The reason we require these permissions are obvious: this is a breaking change in your package workflow! If you are using a <a href="http://www.xavierdecoster.com/post/2011/07/18/Continuous-Package-Integration-NuGet-vs-Source-Control.aspx" target="_blank">no-checkin policy for NuGet packages</a>, make sure you inform people to check-in this package into their VCS so you don't break their stuff.</p>

<p>Be a good citizen when using this feature. In a controlled enterprise environment, this should be easy.</p>

<p style="background-color: #ccc; border: 1px solid #000; padding: 5px;">
  Remember: upgrading a dependency is a consumer responsibility, so it's the consumer's decision <em>when</em> to upgrade.
</p>

<p>This feature is all about <strong>discontinuing a NuGet package while maintaining an upgrade path</strong>.</p>
]]></content>
      <post-name type="text"><![CDATA[gently-phase-out-support-for-older-nuget-packages-with-myget-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="42" date-created="2012-01-23T20:31:00" date-modified="2012-01-23T20:31:00" approved="true" post-url="/2012/01/23/slides-for-ugialtnet-nuget-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Slides for UGIALT.NET - NuGet]]></title>
      <content type="text"><![CDATA[<p>Whilst I've been sharing this wonderful EasyJet experience with <a href="http://blog.maartenballiauw.be/post/2012/01/23/Slides-for-UGIALTNET-SignalR.aspx" target="_blank">Maarten Balliauw</a> (flight delayed for 4hrs because they had to fly in a new plane with spare parts, wtf?), I enjoyed this weekends trip to Milano very much! Good* <em>coffee, great pizza,</em> aperitivo a la Milanese* (!), but above all: awesome audience! Thanks to everyone who joined my session during the <a href="http://www.ugialt.net" target="_blank">UgiAlt.Net</a> conference in this nice city!</p>

<p>Here's the abstract: <em>Managing software dependencies, whether those created in-house or from third parties can be a pain in the behind. Whether dependencies feel like wild chickens or people run around like chickens dealing with dependencies, the NuGet package manager can be a cure. Let me guide you to creating enterprise (chicken) NuGets and dealing with them in a structured, easy-to-maintain manner. From developer workstation to build server, NuGet tastes great! This session will provide you the dip sauce.</em></p>

<div id="__ss_11214216" style="width: 425px;"><strong style="display: block; margin: 12px 0 4px;"><a title="UGIALTNET - Organize your chickens - NuGet for the Enterprise" href="http://www.slideshare.net/xavierdecoster/ugialtnet-organize-your-chickens-nuget-for-the-enterprise">UGIALTNET - Organize your chickens - NuGet for the Enterprise</a></strong><embed type="application/x-shockwave-flash" width="425" height="355" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=20120121-milano-ugialtnet-organizeyourchickens-nugetfortheenterprise-120123041738-phpapp01&amp;stripped_title=ugialtnet-organize-your-chickens-nuget-for-the-enterprise&amp;userName=xavierdecoster" allowscriptaccess="always" allowfullscreen="true" wmode="transparent" name="__sse11214216" />
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/xavierdecoster">Xavier Decoster</a>.</div>
</div>

<p></p>

<p><a href="http://vimeo.com/35777282">Organize your chickens: NuGet for the enterprise (Xavier Decoster)</a> from <a href="http://vimeo.com/dotnetmarche">DotNetMarche</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

<p></p>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>
]]></content>
      <post-name type="text"><![CDATA[slides-for-ugialtnet-nuget-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="43" date-created="2012-02-10T20:36:00" date-modified="2012-02-10T20:36:00" approved="true" post-url="/2012/02/10/meet-the-community-at-techdays-belgium-2012-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[MEET the Community at TechDays Belgium 2012]]></title>
      <content type="text"><![CDATA[<p>For those who weren&rsquo;t aware yet, next week, &ldquo;<a href="http://weblogs.asp.net/scottgu/archive/2012/01/29/techdays-in-belgium-and-netherlands.aspx" target="_blank">Gu Almighty</a>&rdquo; is paying our little country a visit during the 10th anniversary edition of <a href="http://www.microsoft.com/belux/techdays/2012/Home.aspx" target="_blank">TechDays Belgium</a>.&nbsp; Besides looking forward to what Scott has to say, it&rsquo;s also a good time to <a href="http://www.microsoft.com/belux/techdays/2012/Sessions.aspx" target="_blank">look at the conference agenda</a> and put a marker next to some must-attend sessions.</p>

<p>First, I&rsquo;d like to invite you to join our Community and meet up at the <a href="http://msdn.microsoft.com/nl-be/hh560770" target="_blank">MEET</a> Corner for a chat and <em>even better</em> coffee! If you&rsquo;re into <a href="http://www.nuget.org" target="_blank">NuGet</a> or wonder what&rsquo;s coming next for <a href="http://www.myget.org" target="_blank">MyGet</a>, don&rsquo;t hesitate to reach out to <a href="http://blog.maartenballiauw.be" target="_blank">Maarten</a> and me.</p>

<p><img style="display: inline;" title="meet-logo" src="http://i.msdn.microsoft.com/hh560770.meet-logo(nl-be,MSDN.10).jpg" width="240" height="42" /></p>

<p>Here are the highlights on my list I'd recommend you:</p>

<div class="sessionlist"><strong>February 14</strong> <i>08:45 - 10:15</i>- Duh Cloud!
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=135&amp;name=scottguthrie.png&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=266"><span class="session">Opening Session with Scott Guthrie</span> </a> Speaker: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=135">Scott Guthrie</a> | Level : 200 | Room : 10 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=266"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<i>10:45 - 12:00</i>- Get up to speed with Metro before the beta arrives!
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=58&amp;name=IMG_6850.jpg&amp;dim=30" /> <img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=24&amp;name=gillCleeren.jpg&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=267"><span class="session">Welcome to the Metro Application Platform</span> </a> Speakers: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=58">Katrien De Graeve</a> , <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=24">Gill Cleeren</a> | Level : 200 | Room : 10 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=267"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<i>12:15 - 13:00</i>- This is a lunch session, but if you can PLEASE make sure to send your corporate IT manager over there! Or even better, join him!
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=101&amp;name=koenvantolhuyzen.PNG&amp;dim=30" /> <img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=28&amp;name=ilse.jpg&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=216"><span class="session">Office 365: Busting the Myths</span> </a> Speakers: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=101">Koen Van Tolhuyzen</a> , <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=28">Ilse Van Criekinge</a> | Level : 300 | Room : 6 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=216"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<i>13:00 - 14:15</i>- Busted: fan, sorry! :)
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=135&amp;name=scottguthrie.png&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=287"><span class="session">A Look at ASP.NET MVC 4</span> </a> Speaker: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=135">Scott Guthrie</a> | Level : 300 | Room : 10 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=287"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<i>14:30 - 15:45</i>
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=68&amp;name=jeffprosise.jpg&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=198"><span class="session">HTML5 Quick Start</span> </a> Speaker: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=68">Jeff Prosise</a> | Level : 300 | Room : 8 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=198"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<i>16:15 - 17:30</i>- Know your tools!
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=117&amp;name=brian keller.png&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=245"><span class="session">What's new in Visual Studio 11 for Application Lifecycle Management</span> </a> Speaker: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=117">Brian Keller</a> | Level : 200 | Room : 10 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=245"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<i>17:45 - 19:00</i>- Bart doing a level 200 on WinRT? Must be good!
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=15&amp;name=bartDesmet.jpg&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=282"><span class="session">Introducing Windows Runtime in Windows 8</span> </a> Speaker: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=15">Bart De Smet</a> | Level : 200 | Room : 8 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=282"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<strong>February 15</strong> <i>08:45 - 10:15</i>- A level 200 chat: I should be able to keep up.
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=135&amp;name=scottguthrie.png&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=286"><span class="session">ScottGu Unplugged</span> </a> Speaker: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=135">Scott Guthrie</a> | Level : 200 | Room : 10 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=286"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<i>10:45 - 12:00</i>- Opening the black box
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=118&amp;name=alexturnerjpg.jpg&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=238"><span class="session">Project Roslyn: Exposing the C# and VB compiler&rsquo;s code analysis</span> </a> Speaker: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=118">Alex Turner</a> | Level : 300 | Room : 10 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=238"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<i>13:00 - 14:15</i>- Performance is UX!
<ul>
<li><span class="firstColumn"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=118&amp;name=alexturnerjpg.jpg&amp;dim=30" /> </span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=239"><span class="session">The zen of async: Best practices for best performance</span> </a> Speaker: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=118">Alex Turner</a> | Level : 400 | Room : 10 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=239"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<p>Stop! Not defined yet on my list :)</p>
<i>17:45 - 19:00</i>- Last session of the conf, time to unleash those pirates: SignalARRRR... Highly recommended!
<ul>
<li><span class="firstColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=23"><img src="http://met.feed.comportal.be/picture.aspx?list=speakers&amp;id=23&amp;name=maarten_balliauw.jpg&amp;dim=30" /> </a></span><span class="secondColumn"><a href="http://www.microsoft.com/belux/techdays/2012/SessionDetail.aspx?sessionId=246"><span class="session">SignalR. Code, not toothpaste. </span></a> Speaker: <a href="http://www.microsoft.com/belux/techdays/2012/SpeakerDetail.aspx?speakerId=23">Maarten Balliauw</a> | Level : 200 | Room: 8 | <a href="http://www.microsoft.com/belux/techdays/2012/SessionICS.aspx?sessionId=246"><img style="width: 16px; height: 16px;" src="http://www.microsoft.com/belux/techdays/2012/images/calendar.png" /></a> </span></li>
</ul>
<p>Oh, and don&rsquo;t forget your red polo! :)</p>
<p>See you there!</p>
</div>
]]></content>
      <post-name type="text"><![CDATA[meet-the-community-at-techdays-belgium-2012-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="44" date-created="2012-02-10T20:48:00" date-modified="2012-02-10T20:48:00" approved="true" post-url="/2012/02/10/resharper-plug-in-minify-xml-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Resharper plug-in: Minify XML]]></title>
      <content type="text"><![CDATA[<h1>The Problem</h1>

<p>I've been working on a little tool that uses WCF serialization lately and had to deal with these XML files representing deserialized datacontracts. One of the requirements of the tool is that some users should be able to feed it with such XML files. Think about it as feeding the tool with an input XML file, processing it to create some output, and compare the output with some other XML file that represents the expected output. You figured it's some kind of testing tool right? :)</p>

<p>Anyway, the expected output and the actual output are being serialized when written to disk, and deserialized when read. The default settings for the WCF DataContractSerializer make sure that the entire deserialized XML string gets saved into one single line. I know you can tweak these settings and <a href="http://stackoverflow.com/questions/739114/formatting-of-xml-created-by-datacontractserializer" target="_blank">change the formatting of the XML created by the DataContractSerializer</a>, but if that's not an option, you'll have to make sure those files respect the expected format.</p>

<p>You have to know that some of the users of the tool have Visual Studio + ReSharper, so these guys will be tempted to open the XML files and change a little value here and there before saving the file and feeding it again to the tool. That's where formatting comes in: if a user wants to get a nice overview of what's inside the file and easily modify a value, he'll just format the document make the job easier. However, this document must be <em>minified</em> again on one single line for the tool to be able to deserialize the file. That's when it struck me that minifying CSS and JS is supported by various tools, but none is available for XML.</p>

<h1>My Solution</h1>

<p><img width="529" height="148" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: 0px; margin-left: 0px; display: inline; background-image: none;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-02-10/2012-02-10_1410.png" /></p>

<p>Now that's a great tip, thank you <a href="http://www.paulstack.co.uk/blog/" target="_blank">Paul</a>! When he told me it would be easy to do so using the <a href="http://download.jetbrains.com/resharper/ReSharperSDK-6.1.0.51.msi" target="_blank">ReSharper 6.1 SDK</a>, I decided to give it a shot and time-box it to an hour. One hour only!</p>

<p>Hence, I installed the SDK, which on first sight looked pretty complete, including samples, project templates and a whole lot of item templates. Awesome! Creating a new ReSharper Plug-In project is really peanuts: it even is preconfigured to debug the project against the <em>Visual Studio Experimental Hive</em>, passing it the necessary parameters to plug-in your plug-in and enabling some hidden internal Resharper diagnostic windows.</p>

<p><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-02-10/2012-02-10_1420.png" target="_blank"><img width="650" height="213" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-02-10/2012-02-10_1420.png" /></a></p>

<p><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-02-10/2012-02-10_1425.png"><img width="650" height="525" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: 0px; margin-left: 0px; display: inline; background-image: none;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-02-10/2012-02-10_1425.png" /></a></p>

<p>In addition to that, <a href="http://hadihariri.com/" target="_blank">Hadi Hariri</a> has a great <a href="http://hadihariri.com/2010/01/12/writing-plug-ins-for-resharper-part-1-of-undefined/" target="_blank">series on writing plug-ins for Resharper</a>, amongst which the first one helped my quite a long way to implementing my own plug-in. In less than a few minutes, I had my solution set up and could focus on the work at hand: minify some XML. That's really a great experience to get started with something you've never done before!</p>

<p>Simply put, the plug-in needs to know when it is available, and needs to know what it has to do. The availability part is easy: I want to be able to minify the entire file, so making it available in the root XML node makes sense. The execution itself, is pretty straightforward as well: take the entire XML element (including its child nodes if any) and replace it with a minified version, leaving the XML structure intact. That's just a matter of pulling a RegEx monkey out of your sleeves and make sure those whitespaces, tabs and carriage returns get removed.</p>

<h1>Minify XML</h1>

<p>Minifying is not necessarily equal to <em>obfuscating</em> or <em>compressing</em>. When it comes to XML, the element names and attribute names usually are meaningful as well. Changing this would definitely break deserialization of such files. Hence, I only had to take care of the whitespace formatting part.</p>

<p>Minifying the XML is done using a tiny XmlMinifier class shown below:</p>

<div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:4f518378-2c14-4403-9c9d-ff200adf0713" style="margin: 0px; display: inline; float: none; padding: 0px;">
  <pre class="brush: c#;">    public class XmlMinifier : IMinifier
    {
        public string Minify(string input)
        {
            // Remove carriage returns, tabs and whitespaces
            string output = Regex.Replace(input, @"\n|\t", " ");
            output = Regex.Replace(output, @"&gt;\s+&lt;", "&gt;&lt;").Trim();
            output = Regex.Replace(output, @"\s{2,}", " ");

            // Remove XML comments
            output = Regex.Replace(output, "&lt;!--.*?--&gt;", String.Empty, RegexOptions.Singleline);

            return output;
        }
    }</pre>
</div>

<p>For the full implementation details, I'll invite you to take a look at the <a href="https://github.com/xavierdecoster/Resharper-XML-Minifier" target="_blank">GitHub repository</a>. It's only something like 100 lines of code amongst which the most meaningful are probably stated above. You might wonder what I did the rest of that hour :)</p>

<h1>How to use it</h1>

<p>Once the plug-in is installed, and you open any XML file into Visual Studio, you'll see a new option appearing when you put your cursor in the root XML element.</p>

<p><img width="266" height="152" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-02-10/2012-02-10_1518.png" /></p>

<p>Alt-Enter (don't you dare to use the mouse!) and select <strong>Minify file</strong>.</p>

<p><img width="127" height="99" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-02-10/2012-02-10_1519.png" /></p>

<p>There you go!</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-02-10/2012-02-10_1521.png" alt="" /></p>

<h1>Give me the goodies</h1>

<p>Installing the plug-in is easy as well: simply <a href="https://github.com/downloads/xavierdecoster/Resharper-XML-Minifier/Resharper.Plugins.Minify.dll">fetch the dll</a> and put it in the following location:C:\Program Files (x86)\JetBrains\ReSharper\v6.1\Bin\PluginsDon't forget to <strong>unblock</strong> the file after downloading it because it might be very unsafe! :)You can verify if the plug-in got installed correctly by navigating to <strong>ReSharper > Tools > Options</strong> and select Plug-ins.</p>

<p><img width="500" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-02-10/2012-02-10_1514.png" /></p>

<h1>Potential for Optimization</h1>

<p>I think it would be cool if I could just minify a selected element and leave the rest of the file formatting untouched. However, in order for this to work without any strange behavior, I need to be able to save the file after each execution of the plug-in (or at least update the cache, because ReSharper seems to work on the cached source file as long as the file isn't saved). If anyone has an idea on how to do this (â€˜cause I couldn't find a working sample), please reach out or submit a patch :-)</p>
]]></content>
      <post-name type="text"><![CDATA[resharper-plug-in-minify-xml-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="45" date-created="2012-03-01T21:06:00" date-modified="2012-03-01T21:06:00" approved="true" post-url="/2012/03/01/myget-tops-vanilla-nuget-feeds-with-a-chocolatey-flavor/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[MyGet tops Vanilla NuGet feeds with a Chocolatey flavor]]></title>
      <content type="text"><![CDATA[<p>We recently deployed an all new version of <a href="http://www.myget.org" target="_blank">MyGet.org</a>, which contains quite a lot of optimizations and some new features as well. If you didn't notice, go check it out!</p>

<p>My personal favorite is in fact the underlying architecture that allows us to aggregate feeds and link <a href="http://blog.myget.org/post/2012/03/01/Introducing-MyGet-package-source-proxy-(beta).aspx" target="_blank">package sources</a>. These package source presets are configurable on Feed level through the new *Package Sources *tab available in the Feed management interface.</p>

<div style="display: inline-block;">
  <a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/managePackageSources.png" target="_blank"><img width="650" height="115" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/managePackageSources.png" /></a>
</div>

<p>To add a package from these package source onto your own feed (either referenced or mirrored, with or without its dependencies), navigate to the <em>Add Package *dialog and select the *From Feed</em> tab (previously called "From NuGet.org").</p>

<div style="display: inline-block;">
  <a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/addChocolateyPackage.png" target="_blank"><img width="650" height="189" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/addChocolateyPackage.png" /></a>
</div>

<p>The default setting is still <a href="http://www.nuget.org" target="_blank">NuGet.org</a> obviously, but you might notice the dropdown containing another feed: <a href="http://www.chocolatey.org" target="_blank">Chocolatey.org</a>! That's right, why not add Chocolatey to your package sources and build a feed containing your favorite tools?</p>

<h2>Build your own favorite Chocolatey tools feed</h2>

<p>Building such feed is very straightforward. Choose a feed name (which will be represented in your URL) and provide a meaningful description.</p>

<div style="display: inline-block;">
  <a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/myChocolateyFeedDetails.png" target="_blank"><img width="650" height="218" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/myChocolateyFeedDetails.png" /></a>
</div>

<p>All that is left for a basic MyGet feed is to choose one of the predefined feed templates, as shown below. Obviously you can modify and tweak these settings further to meet your needs afterwards. We've updated our <a title="Frequently Asked Questions" href="http://www.myget.org/site/Faq" target="_blank">FAQ</a> with a full explanation of <a title="MyGet's security model explained" href="http://www.myget.org/site/Faq-Security" target="_blank">MyGet's security model</a> and how you can assign or revoke user rights on a feed.</p>

<div style="display: inline-block;">
  <a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/myChocolateyFeedTemplate.png" target="_blank"><img width="650" height="203" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/myChocolateyFeedTemplate.png" /></a>
</div>

<p>Once the feed is created, you can start pushing packages to it. We support various ways of doing so, including:</p>

<ul>
<li>Uploading packages through the website (and optionally mirror any dependencies found on the configured package source)</li>
<li>Referencing or mirroring packages from another feed (any package source, such as NuGet.org, Chocolatey.org, â€¦)</li>
<li>Uploading a packages.config file, targeting any package source</li>
</ul>

<p>Let's add some packages from the Chocolatey Gallery shall we? Simply select the Chocolatey Gallery package source and type any package name (or any other search criteria using our other search options). Autocomplete will kick in after you typed a character or two and show you a list of possible matches. Select the one you want, verify whether you want to only reference it (copy the metadata onto your feed and keep the real package in the package source) or mirror it (deep copy). If you perform a deep copy, you might prefer to opt-in and check the <em>include dependencies</em> checkbox.</p>

<div style="display: inline-block;">
  <img width="646" height="200" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/addChocolateyPackageGitExtensions.png" />
</div>

<p>After clicking the upload button, the operation is queued into the background for processing. It might take up to a minute until the package (and its dependencies if requested) appear on your feed. Note that we also cache the packages list on the website, but nevertheless, once processed they will appear instantly onto your feed when queried from within Visual Studio for instance.</p>

<p>For this demo, I only added GitExtensions to the feed but I mirrored it and included dependencies. After processing, my feed packages list contains the following packages.</p>

<div style="display: inline-block;">
  <a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/myFavoriteToolsPackagesList.png" target="_blank"><img width="650" height="161" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-01/myFavoriteToolsPackagesList.png" /></a>
</div>

<p>Now it's a piece of cake to add those other tools I'm using. You might be wonderingâ€¦</p>

<h2>Why do you want to do that?</h2>

<p>Very simple: I don't want to mess around with a script or packages.config file on multiple computers. If I repaved my system, that file is not on there. If I want to put it on that repaved machine, I need to find it back (that's usually the real issue). And if I somehow manage to do so, it's usually out-of-date.</p>

<p>What if there was a central (read: cloudy) location where I could keep track of this list? A single place to manage the tools list, and always the same location to refer to. Something that would reduce the installation of all my favorite tools to a one-liner. When drafting the Chocolatey chapter in our <a href="http://www.apress.com/9781430241911" target="_blank">Pro NuGet</a> book, I learned about the convenient â€“<em>all</em> command line option support by many of Chocolatey's commands, including the <em>update (cup)</em> and <em>list (clist)</em> commands . That's when it struck me that this switch was missing for the <em>install</em> <em>(cinst)</em> command, so I bothered Rob Reynolds (<a href="http://twitter.com/ferventcoder" target="_blank">@ferventcoder</a>) with it :) Rob was so nice to help us out and made sure the <em>cinst â€“all â€“source</em>Â <em>[feedUrl]</em> scenario would be supported in the near future. Guess what, it is! Thanks again Rob!</p>

<p>Knowing this, it's pretty straightforward to repave a system and get all your favorite tools installed in no time. It suffices to run the following command (replace my feed with your feed):</p>

<div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:5ec4e8db-8793-439a-9db0-1b5a3641b3ef" style="margin: 0px; display: inline; float: none; padding: 0px;">
  <pre class="brush: bash;">cinst all -source http://www.myget.org/F/myfavoritetools</pre>
</div>

<p>Not only can you use it after repaving your system, you could use it as well every time you work for a new customer and need to set up your development environment (maybe have multiple feeds for various scenarios?), or why not share the feed with your team members and make sure everyone benefits from these awesome tools out there.</p>

<p>If ever you have a question about MyGet or need further assistance to get you started, please refer to our <a title="MyGet Blog" href="http://blog.myget.org" target="_blank">blog</a>, reach out on twitter (<a title="Follow us on Twitter!" href="https://twitter.com/MyGetTeam" target="_blank">@MyGetTeam</a>) or use the <a href="http://www.myget.org/Support" target="_blank">Support</a> form to contact us. We'll be happy to help!</p>
]]></content>
      <post-name type="text"><![CDATA[myget-tops-vanilla-nuget-feeds-with-a-chocolatey-flavor]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="46" date-created="2012-03-08T21:16:00" date-modified="2012-03-08T21:16:00" approved="true" post-url="/2012/03/08/hidden-gem-the-nuget-package-manifest-xsd/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Hidden gem: the NuGet package manifest XSD]]></title>
      <content type="text"><![CDATA[<p>If you are automating the creation of <a href="http://www.nuget.org" target="_blank">NuGet</a> packages (through CI for instance), you most likely touched a <strong>.nuspec</strong> file somehow. The .nuspec file is an XML file representing the NuGet package manifest, describing your package contents and metadata.</p>

<h2>Creating the NuSpec</h2>

<p>The most easy way of creating a NuGet package manually is through using the <a href="http://npe.codeplex.com" target="_blank">NuGet Package Explorer</a>. It's simply a great UI on top of your packages and a good way of learning about some of the conventions that you need to follow in order to produce a valid NuGet package. It just works.</p>

<p>If you need to make big changes or want to add dependencies to other packages, NuGet Package Explorer is the preferred modification tool for these manifests. However, if you only need to modify the file very slightly, it's often faster to simply modify the XML. I'm sure many of us don't do this because there's quite a few options available and not everyone is familiar with the structure and conventions of this file. If only there was an <strong>XSD</strong> that could provide you with some Visual Studio Intellisense sugarâ€¦ Hey, you know what, that XSD does exist! Actually, there's even more than one.</p>

<h2>But why?</h2>

<p>In the scenario of <strong>automation</strong>, there's no man in the middle that is going to click around in the UI for you, so you take a different approach. That's where the NuGet command line (nuget.exe) comes in. There are various ways of creating a package using the command line, and you don't always have to provide it with a nuspec file upfront (it can create one for you by deriving project or assembly information).</p>

<p>My preference goes to creating the package manifests upfront, manually, in XML. You have full control over its contents, and can create more advanced packages that simply cannot be created for you based on your assembly information, which provides a very limited amount of information. Put these .nuspec files in your VCS, and you have a versioned history on your package manifest modifications as well. Typically, I put them into the <em>.nuget</em> folder in my solution directory, which is created for you when you use the <a href="http://blog.davidebbo.com/2011/03/using-nuget-without-committing-packages.html" target="_blank">Enable-Package-Restore feature</a> (also known as the no-commit rule).</p>

<h2>I'm done reading, give me the XSD!</h2>

<p>If you dive into the <a href="http://nuget.codeplex.com/" target="_blank">NuGet source code</a> (and really, Codeplex, where's that code search box?), you'll find the XSD in the <em>src\Core\Authoring\nuget.xsd</em> path. Now, before you fetch it, remember I said there's more than one? Actually, the one you'll find in the sources is a template that changes over time (as new features are added for instance). The XML namespace actually contains a placeholder which is replaced during release. So <em>*don't *</em>use the file from Codeplex. You don't know whether it has changed since the last release.</p>

<p>To make things easier for you, I've done a look-up on the various XML namespace that are in use, and which version of the XSD matches. <a href="https://nuget.org/packages/NuGet.Manifest.Schema/2.0.0" target="_blank">The end result is a NuGet package</a> (what else?), containing the two XSD's and a sample .nuspec file to get you started.</p>

<p>Simply run the following command from the NuGet Package Manager Console and spend some quality time designing your package:</p>

<div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:2375e2a4-da21-48ba-9753-39baee98e61d" style="margin: 0px; display: inline; float: none; padding: 0px;">
  <pre class="brush: bash;gutter:false;">Install-Package NuGet.Manifest.Schema</pre>
</div>

<p>The real benefit comes with Visual Studio's ability to automatically provide Intellisense for your file when it is declared in an XML-namespace it knows. For instance, when the XSD is available in your solution. Enjoy!</p>

<p><img width="580" height="514" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-08/2012-03-08_2027.png" /></p>
]]></content>
      <post-name type="text"><![CDATA[hidden-gem-the-nuget-package-manifest-xsd]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="47" date-created="2012-03-09T21:19:00" date-modified="2012-03-09T21:19:00" approved="true" post-url="/2012/03/09/how-to-help-yourself-when-nuget-goes-down/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[How to help yourself when NuGet goes down]]></title>
      <content type="text"><![CDATA[<table border="0">
  <tbody>
    <tr>
      <td style="border:none;">
        <p>
          Today will be remembered as the day that <a href="http://www.nuget.org" target="_blank">NuGet.org</a> went down and broke quite some builds. While many people would love to see the NuGet team wearing a pink sombrero, there is something to say about wearing it yourself if you did not manage to work around this. Let me explainâ€¦
        </p>

        <p>
          First of all, just as with the Azure downtime on a leap day, whenever you rely on an external system and make it mission critical, you should design for failure. You need to anticipate downtime. I'm sure the NuGet team does everything within its power to fix this and is going to inform us whenever they can, but give them some credit please: we're all human beings making mistakes, that's how we learn.
        </p>
      </td>

      <td style="border:none;">
        <img width="285" height="202" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="pinksombrero" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-03-09/pinksombrero.png" />
      </td>
    </tr>
  </tbody>
</table>

<h2>How do I know it's not just me?</h2>

<ul>
<li>Check <a href="https://twitter.com/#!/search/%23nuget" target="_blank">twitter for the hashtag #nuget</a> and scan for issues.</li>
<li>Check <a href="http://status.nuget.org">http://status.nuget.org</a></li>
<li>Check <a href="http://jabbr.net/#/rooms/nuget" target="_blank">the NuGet room on Jabbr</a></li>
</ul>

<h2>Here's what you can do</h2>

<p>The best thing one can and should do, again, is to anticipate. Have a backup repository, or <a href="http://blog.maartenballiauw.be/post/2011/07/15/Copy-packages-from-one-NuGet-feed-to-another.aspx" target="_blank">mirror packages</a> on a <a href="http://www.myget.org" target="_blank">MyGet.org</a> feed. Looking at my twitter streams, it is striking to see how many did not think about it.</p>

<p>If you have your packages in source control, impact is limited to not being able to upgrade your packages or install new packages. If you don't have your packages in your VCS, and you did not anticipate, you might get lucky enough and fix your builds by targeting the local NuGet cache.</p>

<p>Simply register the following path as a NuGet package source and target this one:</p>

<div class="wlWriterEditableSmartContent" id="scid:f32c3428-b7e9-4f15-a8ea-c502c7ff2e88:696ca5ca-f5f5-4890-a854-0825adbbcfd1" style="margin: 0px; display: inline; float: none; padding: 0px;">
  <pre class="brush: text;gutter:false;">%Localappdata%\NuGet\Cache</pre>
</div>

<p>Or you could simply upload your packages from cache to a MyGet feed as well and register this feed as a safe haven to fallback upon.</p>

<p>Avoid spending your day fingers crossed!</p>
]]></content>
      <post-name type="text"><![CDATA[how-to-help-yourself-when-nuget-goes-down]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="48" date-created="2012-04-14T21:26:00" date-modified="2012-04-14T21:26:00" approved="true" post-url="/2012/04/14/generated-assemblyversion-for-nuget-package-on-tfs-build/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Generated AssemblyVersion for NuGet package on TFS Build]]></title>
      <content type="text"><![CDATA[<h2>Goal: SemVer &amp; auto-incremented build number on package &amp; project output</h2>

<p>Imagine you want to auto-increment the build number in your <a href="http://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute(v=vs.100).aspx" target="_blank">AssemblyVersion</a> during Continuous Integration, and meanwhile keep control over the first three version numbers (major.minor.patch). This would allow you to apply <a href="http://semver.org" target="_blank">Semantic Versioning</a> whilst generating new builds produce new assemblies/packages with a higher version number.</p>

<p>The NuGet command line allows you to fairly easy <a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package#From_a_project" target="_blank">target a project file</a> or a nuspec file (NuGet package manifest). If you are familiar with targeting a project file, you know you can use <a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package#From_a_project" target="_blank">token placeholders</a> for some parts of the package metadata, e.g. $id$, $version$ etc.</p>

<p>A rather annoying aspect of TFS Build lays in the fact that your compiled project output ends up redirected into a folder called <em>Binaries</em> (and there only!). If your build definition workspace is set to the solution directory (and you didn't modify this part of the Build Definition Template), this Binaries folder can be found here: $(SolutionDir)..\Binaries. Yes, one level up: it is a sibling of your checkout folder (called <em>Sources</em>) on the build agent.</p>

<h2>There's no easy way out</h2>

<p>There are some options at your disposal to get you going for a few hours trying to complete this puzzle.</p>

<ul>
<li>The NuGet command line <em><a href="http://docs.nuget.org/docs/reference/command-line-reference#Pack_Command" target="_blank">pack</a></em> command has an extra option: <em>BasePath</em></li>
<li>You'll have to play with <em>relative paths</em> to include only the stuff you want into your NuGet package</li>
<li>Which also means you'll need to create a NuGet package manifest (<em><a href="http://docs.nuget.org/docs/reference/nuspec-reference" target="_blank">nuspec</a></em>) upfront</li>
</ul>

<p>I spent quite some time trying to figure out how to accomplish this with minimal changes. It actually turned out that there seems to be <a href="http://nuget.codeplex.com/workitem/2103" target="_blank">a bug in the NuGet command line</a>, causing the BasePath to be ignored in certain cases (we are in case #3 if you follow that link).</p>

<h2>This works for me</h2>

<h3>Prerequisites</h3>

<ul>
<li><a href="http://docs.nuget.org/docs/workflows/using-nuget-without-committing-packages" target="_blank">Enable NuGet PackageRestore</a>. This will give you the nuget.exe and some required MSBuild targets &amp; settings in the $(SolutionDir).nuget folder.</li>
<li><p>Create a NuGet package manifest for your target project(s) (<a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package#From_a_project" target="_blank">here's how</a>) and use relative paths to include those files you need to be packaged from the Binaries folder:Â  <pre class="brush: xml;gutter:false;">&lt;files&gt;
&lt;file src="....\Binaries\mylibrary.dll" target="lib\net40"/&gt;
&lt;/files&gt;
</pre></p></li>
<li><p>Get the latest edition of the <a href="http://msbuildextensionpack.codeplex.com/" target="_blank">MSBuild Extension Pack</a> from Codeplex (I used April 2012 edition)</p></li>
<li>Unzip that extension pack and find the following files in the 4.0.5.0 Binaries folder:  <em>Ionic.Zip.dll</em>, <em>MsBuildExtensionPack.dll *and *MSBuild.ExtensionPack.VersionNumber.targets</em>. Add them to the $(SolutionDir).nuget\MsBuildExtensionPack folder and make sure you add them to source control.<br/><br/><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-14/msbuildextensions.png" alt="" /></li>
</ul>

<h3>Modifications</h3>

<p>Modify the <em>nuget.targets</em> file you'll find in the $(SolutionDir).nuget folder to look like this:</p>

<pre class="brush: xml;auto-links:false;">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;Import Project="MsBuildExtensionPack\MSBuild.ExtensionPack.VersionNumber.targets" Condition="$(BuildPackage) == 'true'"/&gt;
  &lt;Import Project="NuGet.settings.targets"/&gt;

  &lt;Target Name="SetPackageVersion" Condition="$(BuildPackage) == 'true'"&gt;
    &lt;PropertyGroup&gt;
      &lt;!-- Fetch the generated assembly version from the AssemblyInfo task (MSBuild Extension Pack, April 2012)--&gt;
      &lt;PackageVersion&gt;$(MaxAssemblyVersion)&lt;/PackageVersion&gt;

      &lt;!-- If no NuSpec file defined in the project, fallback on the project itself--&gt;
      &lt;NuSpecFile Condition="$(NuSpecFile) == ''"&gt;$(ProjectPath)&lt;/NuSpecFile&gt;

      &lt;!-- Override BuildCommand with generated package version, if any --&gt;
      &lt;BuildCommand Condition="$(PackageVersion) != ''"&gt;"$(NuGetExePath)" pack "$(NuSpecFile)" -p Configuration=$(Configuration) -o "$(PackageOutputDir)" -symbols -version $(PackageVersion)&lt;/BuildCommand&gt;
    &lt;/PropertyGroup&gt;

    &lt;!-- Log the generated package version if any --&gt;
    &lt;Message Text="Generated package version '$(PackageVersion)' from built assembly" Importance="high" /&gt;
  &lt;/Target&gt;

  &lt;Target Name="RestorePackages" DependsOnTargets="CheckPrerequisites"&gt;
    &lt;Exec Command="$(RestoreCommand)"
          LogStandardErrorAsError="true"
          Condition="Exists('$(PackagesConfig)')" /&gt;
  &lt;/Target&gt;

  &lt;Target Name="BuildPackage" DependsOnTargets="CheckPrerequisites; SetPackageVersion"&gt;
    &lt;Exec Command="$(BuildCommand)"
          LogStandardErrorAsError="true" /&gt;
  &lt;/Target&gt;
&lt;/Project&gt;</pre>

<p>Edit the project file for which you want to create a NuGet package after compilation, and add the following MSBuild property in the Release configuration (or the configuration you use to build on TFS):</p>

<pre class="brush: xml;gutter:false; hightlight: [3]">&lt;PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|Any CPU'"&gt;
   &lt;!-- Shortened for brevity --&gt;
   &lt;NuSpecFile&gt;relativePathFromProjectFileTo.nuspec&lt;/NuSpecFile&gt;
&lt;/PropertyGroup&gt;</pre>

<p>Change the project's output location in the Release configuration (or the configuration you use to build on TFS) to *....\Binaries* <img style="width: 600px;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-14/2012-4.png" /></p>

<h2>Controlling the Semantic Version</h2>

<p>Note that <span style="text-decoration: underline;">you can't use any token placeholders</span> with this solution. Actually, you might not need them anyway, since we set the (generated) version directly using the <em>pack -version</em> command.</p>

<p>To manage the <em>semantic</em> part of the version number (major.minor.patch), you can simply tweak some properties in the <em>MsBuild.ExtensionPack.VersionNumbers.targets</em> file. Yes, this is done manually, because there's nothing out there that can determine a semantic version for you.</p>

<p>Close to the top of that file, you'll find the properties that you need to tweak in order to change the first 3 version numbers.</p>

<pre class="brush: xml;auto-links:false;">&lt;!-- Properties for controlling the Assembly Version --&gt;
  &lt;PropertyGroup&gt;
    &lt;AssemblyMajorVersion&gt;1&lt;/AssemblyMajorVersion&gt;
    &lt;AssemblyMinorVersion&gt;0&lt;/AssemblyMinorVersion&gt;
    &lt;AssemblyBuildNumber&gt;0&lt;/AssemblyBuildNumber&gt;
    &lt;AssemblyRevision&gt;&lt;/AssemblyRevision&gt;
    &lt;AssemblyBuildNumberType&gt;&lt;/AssemblyBuildNumberType&gt;
    &lt;AssemblyBuildNumberFormat&gt;00&lt;/AssemblyBuildNumberFormat&gt;
    &lt;AssemblyRevisionType&gt;AutoIncrement&lt;/AssemblyRevisionType&gt;
    &lt;AssemblyRevisionFormat&gt;00&lt;/AssemblyRevisionFormat&gt;
  &lt;/PropertyGroup&gt;
</pre>

<p>The build output looks like this:</p>

<p><img style="max-width: 600px;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-14/buildoutput.png" /></p>

<h2>Bonus: auto-push CI packages to MyGet</h2>

<p>Or any other NuGet package repository for that matter. It is actually very easy to extend this setup in such way that the built package is automatically pushed to a CI feed for instance.</p>

<p>To minimize the modifications to the original nuget.targets and nuget.settings.targets files, I've put all my custom msbuild properties, overrides and targets into a separate nuget.Extensions.targets file, which I saved in the .nuget folder. As such, I only have to import the nuget.Extensions.targets file into the nuget.targets file, and make the BuildPackage target depend on the SetPackageVersion target. I've also added a conditional PushPackage call in the BuildPackage target.</p>

<p>Don't forget to enable auto-push by setting the new PushPackage MSBuild property to True in your project file, in the Release configuration (or the configuration you use in the build definition).</p>

<pre class="brush: xml; highlight: [4]">&lt;PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|Any CPU'"&gt;
    &lt;OutputPath&gt;..\..\Binaries\Release\&lt;/OutputPath&gt;
    &lt;BuildPackage&gt;true&lt;/BuildPackage&gt;
     &lt;PushPackage&gt;true&lt;/PushPackage&gt;
    &lt;NuSpecFile&gt;relativePathFromProjectTo.nuspec&lt;/NuSpecFile&gt;
&lt;/PropertyGroup&gt;</pre>

<h2>Bonus 2: auto-push CI Symbols packages to SymbolSource</h2>

<p>One of the interesting features MyGet offers for any private NuGet feed, is its integration with <a href="http://www.symbolsource.org/" target="_blank">SymbolSource</a>. Did you know that when you create a <em>private</em>Â feed on MyGet, you automatically get a private SymbolSource repository at your disposal, with the same shared API key? Maarten explains it <a href="http://blog.maartenballiauw.be/post/2011/11/16/Publishing-symbol-packages-for-a-MyGet-feed.aspx" target="_blank">here</a>.</p>

<p>I simply added an additional PushSymbolsCommand and reproduced the same steps as for the PushPackageCommand.Â You can find my complete nuget.targets and nuget.Extensions.targets file below.</p>

<h3>NuGet.targets</h3>

<pre class="brush: xml; highlight: [4,10,13,15];auto-links:false;">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
 &lt;Import Project="NuGet.settings.targets"/&gt;
 &lt;Import Project="NuGet.Extensions.targets" /&gt;

 &lt;Target Name="RestorePackages" DependsOnTargets="CheckPrerequisites"&gt;
  &lt;Exec Command="$(RestoreCommand)" LogStandardErrorAsError="true" Condition="Exists('$(PackagesConfig)')" /&gt;
 &lt;/Target&gt;

 &lt;Target Name="BuildPackage" DependsOnTargets="CheckPrerequisites; SetPackageVersion"&gt;
  &lt;Exec Command="$(BuildCommand)" LogStandardErrorAsError="true" /&gt;

  &lt;Exec Command="$(PushCommand)" LogStandardErrorAsError="true" Condition="Exists('$(NuPkgFile)') And $(PushPackage) == 'true'"/&gt;

  &lt;Exec Command="$(PushSymbolsCommand)" LogStandardErrorAsError="true" Condition="Exists('$(SymbolsPkgFile)') And $(PushPackage) == 'true'"/&gt;
 &lt;/Target&gt;
&lt;/Project&gt;</pre>

<h3>NuGet.Extensions.targets</h3>

<pre class="brush: xml;auto-links:false; gutter:false;">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
 &lt;Import Project="MsBuildExtensionPack\MSBuild.ExtensionPack.VersionNumber.targets" Condition="$(BuildPackage) == 'true'"/&gt;
 &lt;Target Name="SetPackageVersion" Condition="$(BuildPackage) == 'true'"&gt;
  &lt;PropertyGroup&gt;
   &lt;!-- Fetch generated assembly version from AssemblyInfo task (MSBuild Extension Pack --&gt;
   &lt;PackageVersion&gt;$(MaxAssemblyVersion)&lt;/PackageVersion&gt;
   &lt;PushPkgSource&gt;http://www.myget.org/F/yourfeedname/&lt;/PushPkgSource&gt;
   &lt;SymbolsPkgSource&gt;http://nuget.gw.symbolsource.org/MyGet/yourfeedname&lt;/SymbolsPkgSource&gt;
   &lt;PushApiKey&gt;yourApiKey&lt;/PushApiKey&gt;

   &lt;!-- Property that enables pushing a package from a project --&gt;
   &lt;PushPackage Condition="$(PushPackage) == ''"&gt;false&lt;/PushPackage&gt;

   &lt;!-- Derive package file name in case the package will be pushed & nuspec is defined --&gt;
   &lt;NuPkgFile Condition="$(PushPackage) == 'true' And $(NuSpecFile) != ''"&gt;$(PackageOutputDir)\$(NuSpecFile.Trim('nuspec'))$(PackageVersion).nupkg&lt;/NuPkgFile&gt;
   &lt;SymbolsPkgFile Condition="$(PushPackage) == 'true' And $(NuPkgFile) != ''"&gt;$(NuPkgFile.Trim('nupkg')).Symbols.nupkg&lt;/SymbolsPkgFile&gt;

   &lt;!-- If no NuSpec file defined in the project, fallback on the project itself--&gt;
   &lt;NuSpecFile Condition="$(NuSpecFile) == ''"&gt;$(ProjectPath)&lt;/NuSpecFile&gt;

   &lt;!-- Override BuildCommand with generated package version, if any --&gt;
   &lt;BuildCommand Condition="$(PackageVersion) != ''"&gt;"$(NuGetExePath)" pack "$(NuSpecFile)" -p Configuration=$(Configuration) -o "$(PackageOutputDir)" -symbols -version $(PackageVersion)&lt;/BuildCommand&gt;

   &lt;!-- Added bonus: push command --&gt;
   &lt;PushCommand&gt;"$(NuGetExePath)" push "$(NuPkgFile)" -source "$(PushPkgSource)" -apikey $(PushApiKey)&lt;/PushCommand&gt;
   &lt;PushSymbolsCommand&gt;"$(NuGetExePath)" push "$(SymbolsPkgFile)" -source "$(SymbolsPkgSource)" -apikey $(PushApiKey)&lt;/PushSymbolsCommand&gt;
  &lt;/PropertyGroup&gt;

  &lt;!-- Log the generated package version if any --&gt;
  &lt;Message Text="Generated version '$(PackageVersion)'" Importance="high" /&gt;
 &lt;/Target&gt;
&lt;/Project&gt;</pre>

<p>I do hope TFS11 will bring a nice build template supporting this out-of-the-box, because this is exactly the kind of friction that I'd like to get rid of.</p>
]]></content>
      <post-name type="text"><![CDATA[generated-assemblyversion-for-nuget-package-on-tfs-build]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="49" date-created="2012-04-18T21:32:00" date-modified="2012-04-18T21:32:00" approved="true" post-url="/2012/04/18/distributing-resharper-live-templates-using-nuget/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Creating ReSharper Live Templates & distribute them using NuGet]]></title>
      <content type="text"><![CDATA[<p>In one of my recent projects I created some <a href="http://www.jetbrains.com/resharper/features/code_templates.html" target="_blank">ReSharper Live Templates</a> in order for other developers to easily create some code using a predefined class template. Live templates can significantly speed up the implementation of such classes, because developers only need to provide some minimal information (such as the class name and maybe some generic type parameters and such). There€™s also less room for accidental copy-pasting. Yeah, pressing CTRL+V after CTRL-C should be mapped to some macro that makes Visual Studio crash! :)</p>

<h2>Example use case</h2>

<p>But seriously, <a style="font-style: italic;" href="http://www.jetbrains.com/resharper/features/code_templates.html#File_Templates" target="_blank">file templates</a> can come in quite handy. Consider the following piece of code that needs to be converted into a ReSharper file template. It represents a custom Comparer implementation for a given contract that has a unique key. It's exported using a custom MEF export attribute that exposes some metadata. Such design is quite common for instance when some application dynamically loads assemblies containing such comparers and needs to find the best matching comparer for a given contract.</p>

<pre class="brush: c#;">[Export(typeof(MyContractComparer))]
[ContractComparer(typeof(MyContract))]
public partial class MyContractComparer : KeyComparer&lt;MyContract, long&gt;
{

  protected override Expression&lt;Func&lt;MyContract, long&gt;&gt; KeyProperty
  {
    get { return contract =&gt; contract.Id; }
  }
}</pre>

<p>Imagine that various of those classes need to be implemented, with potentially a different base type and more comparison logic, but in the end they're all minor differences in implementation.</p>

<h2>Exploring ReSharper's Templates</h2>

<p>Here's where templates come in handy. Creating such file template in ReSharper is pretty straightforward and reveals some cool options, such as type completion and smart snippet completion. ReSharper comes with a built-in <em>Templates Explorer</em> which you'll find in the menu under <strong>ReSharper > Templates Explorer</strong>.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-18/2012-04-18_2104.png" alt="" /></p>

<p>In the dialog that opens, you'll notice 3 tabs. I want to create a C# file template so the <em>File Templates</em> tab is the one we need. You'll notice the 4 default C# file templates provided by ReSharper out-of-the-box when you click on C# on the left. These are the templates used when right clicking a project and selecting <strong>Add > New from Template > ...</strong></p>

<p><img style="max-width: 650px;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-18/2012-04-18_2109.png" /></p>

<h2>Creating the File Template</h2>

<p>That's where my new File Template needs to appear, so let's create a new one. I'll call it KeyComparer (click on the image for a high-res view). The description is what you'll see in the right-click context menu above. The default file name needs to include the extension. Notice that this is purely to indicate ReSharper that it should create (in this case) a C# file using the .cs extension. You won't see this in the dialog that will prompt you for the name of the KeyComparer when using the File Template.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-18/2012-04-18_2145.png" alt="" /></p>

<p>You'll notice immediately that there are some placeholders marked in the code window on the left, which also appear in the variables list on the right. Here's where the real magic kicks in: you can assign <em>macros</em> to each of these placeholders and select which ones are editable or not (and even which occurance if the placeholder occurs multiple times in the same template). You see the placeholders in the <span style="color: #ff0000; font-weight: bold;">red</span> box? Those are the only ones that the developer will need to provide when using this template while creating this class. That's like: provide a name, use autocomplete + tab key three times, save the file and done! In this sample use case, you simply provide the type you want to implement the comparer for, you provide the type of the KeyProperty, and you select the property on the compared type that represents the unique key of the object.</p>

<p><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-18/2012-04-18_2131.png" target="_blank"><img style="max-width: 650px;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-18/2012-04-18_2131.png" /></a></p>

<p>There are quite a lot of macros available which allow you to do a lot of neat stuff (some macros can use other variables or contextual information of the file you create). Just play with it and discover for yourself. Don't forget to add the newly created template to the quicklist by dragging and dropping it.</p>

<table border="0">
  <tbody>
    <tr>
      <td style="text-align: center;">
        <img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-18/2012-04-18_2143.png" />
      </td>

      <td style="text-align: center;">
        <img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-18/2012-04-18_2144.png" />
      </td>
    </tr>
  </tbody>
</table>

<h2>Distribute the template in a NuGet package</h2>

<p>It's very cool if you have a set of templates you find useful, but why would you keep them for yourself? This particular template for instance could be considered part of the product that contains the <em>base type</em>. Guess what: the assembly containing these base types and MEF attributes is being shipped as a NuGet package. So why not make the package smarter and embed these ReSharper templates and install them into the consuming target solution?</p>

<p>ReSharper support <em>layers</em> of settings, and one of them is on the solution level. This is the <em><solutionName>.DotSettings</em> file you often find in your code repository. This basically is an XML file, and NuGet supports XML transforms (well, it's called config transforms but it works on any XML file). Great, but sadly enough, I don't know the filename (or solution name) upfront so I cannot take benefit from that. I still had to figure out how to find the name of the target solution and a way to perform this transformation upon installation. If the target file doesn't exist yet, we need to copy and rename our source file. If it does exist, we need to somehow merge the two (for now, I'll only <strong>append</strong>). Luckily, there's PowerShell: any NuGet package can hook into its own installation using an <em>install.ps1</em> file in the Tools folder of the package. And how convenient: we get access to some handy variables amongst which <em>$dte</em> (Visual Studio DTE)!</p>

<p>That's enough information I think, here's the script that will take the file Tools\Comparers.Templates.DotSettings and install it:</p>

<pre class="brush: powershell;gutter:false;auto-links:false;">param($installPath, $toolsPath, $package, $project)

$resharperSettingsPath = [System.IO.Path]::Combine($toolsPath, 'Comparers.Templates.DotSettings')

$slnFullName = $dte.Solution.FullName
$teamsettingsFileName = $slnFullName + ".DotSettings"

if(-not([System.IO.File]::Exists($teamsettingsFileName))){
Copy-Item -Path $resharperSettingsPath -Destination $teamsettingsFileName -ErrorAction stop
}
else{
    $newContents = (Get-Content $resharperSettingsPath);
    $newContents = $newContents -Replace "&lt;wpf:ResourceDictionary xml:space=""preserve"" xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml"" xmlns:s=""clr-namespace:System;assembly=mscorlib"" xmlns:ss=""urn:shemas-jetbrains-com:settings-storage-xaml"" xmlns:wpf=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""&gt;", "";
    (Get-Content $teamsettingsFileName)| Foreach { $_ -Replace "&lt;/wpf:ResourceDictionary&gt;", "$newContents" }| Set-Content $teamsettingsFileName;
}

Write-Host "Successfully installed Resharper Live Templates into '$teamsettingsFileName'"</pre>

<p>Note: there's likely more to it to properly update and uninstall these templates as part of the NuGet package, and I'm not saying the merge/append process is ideal (proper XML processing would be better), but I'll tackle that problem when it occurs. For now, you can at least distribute your templates together with the NuGet package they belong to. If you have no issue with overwriting the entire file, then this solution will do.</p>

<p>Feel free to post your solution :)</p>

<p><img style="max-width: 650px;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-18/2012-04-18_2258.png" /></p>
]]></content>
      <post-name type="text"><![CDATA[distributing-resharper-live-templates-using-nuget]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="50" date-created="2012-04-26T21:38:00" date-modified="2012-04-26T21:38:00" approved="true" post-url="/2012/04/26/nuget-version-token-explained/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[NuGet $version$ token explained]]></title>
      <content type="text"><![CDATA[<p>Many questions that often come to mind when building <a href="http://www.nuget.org" target="_blank">NuGet</a> packages are related to versioning. There's one question in particular I'd like to post here because it's one of the easier to answer. The question is: <strong>How do I use the <em>$version$</em> token in the NuGet manifest (nuspec) file? Where does it get the version number from?</strong></p>

<p>If you look at the <a href="http://docs.nuget.org/docs/reference/nuspec-reference#Replacement_Tokens" target="_blank">NuGet docs explaining the nuspec replacement tokens</a>, it states that the following - if it doesn't, my pull request got accepted :) - <em>The assembly version as specified by the assembly's</em> <strong><em>AssemblyVersionAttribute</em></strong>.</p>

<p>That is not entirely accurate (got a <a href="https://github.com/NuGet/NuGetDocs/pull/27" target="_blank">pull request</a> pending on the docs). Consider the following <em>AssemblyInfo.cs</em> file contents for example.</p>

<pre class="brush: c#;gutter:false;auto-links:false;toolbar:false;wrap-lines:false;">[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyInformationalVersion("1.0.2.0")]</pre>

<p>This is where most people get confused. I won't get into the details of which version attribute you should or should not use, as there can be good reasons to use either one of them in different scenarios. I'll focus on how nuget is using this information to provide a version number to the $version$ replacement token in the nuspec file.</p>

<p>Building a NuGet package using a tokenized nuspec file that relies on assembly information can be achieved in various ways, for instance:</p>

<ol>
<li><em>nuget spec <csproj></em> to generate the tokenized nuspec, followed by <em>nuget pack <csproj></em></li>
<li><em>nuget spec -a <assemblyPath></em> inside the csproj folder to generate a non-tokenized nuspec (so with the metadata already filled in), followed by <em>nuget pack <nuspec></em></li>
</ol>

<p>Basically, it comes down to this:</p>

<ul>
<li>If the <strong><em>AssemblyInformationalVersion</em></strong> attribute is available, then that one is used.</li>
<li>If the <em>AssemblyInformationalVersion</em> attribute is not available, then the <strong><em>AssemblyVersion</em></strong> attribute is used.</li>
<li>If none of the above are specified, your assembly will have a version number of 0.0.0.0, as well as the resulting package.</li>
<li>NuGet totally ignores the <em>AssemblyFileVersion</em> attribute.</li>
</ul>

<p>Note that this behavior is the same when skipping the nuspec at all and building a nuget package directly from an assembly, using <em>using nuget pack <assembly.dll></em>.</p>
]]></content>
      <post-name type="text"><![CDATA[nuget-version-token-explained]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="51" date-created="2012-04-27T21:44:00" date-modified="2012-04-27T21:44:00" approved="true" post-url="/2012/04/27/install-package-nuspec-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Install-Package NuSpec]]></title>
      <content type="text"><![CDATA[<p>If you are like me and regularly produce NuGet packages, then you often deal with NuSpec files. I always found it annoying that I had to leave my Visual Studio environment in order to create a .nuspec file. Well, I've finally automated this step and published it on <a href="https://github.com/xavierdecoster/NuGetPackages/tree/master/NuSpec" target="_blank">Github</a> and on the <a href="https://nuget.org/packages/NuSpec" target="_blank">NuGet Gallery</a>. Feel free to fork it, contribute and provide feedback!</p>

<table style="vertical-align: top;" border="0">
  <tbody>
    <tr>
      <td style="border:none;">
          <img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-27/2012-04-27_1359.png" />
      </td>

      <td style="vertical-align: top; border:none;">
        <h1>
          What this package does
        </h1>

        <p>
          Plain simple:
        </p>

        <ul>
          <li>
            It extends the NuGet Package Manager Console with a new PowerShell cmdlet, called Install-NuSpec
          </li>
          <li>
            It adds the nuspec XSD's to the Solution Items solution-folder, providing you with IntelliSense when editing the nuspec file.
          </li>
          <li>
            It adds a tokenized nuspec file to the target project and renames the nuspec file to <projectname>.nuspec (which allows the PackageBuild feature - or <em>nuget pack <project> </em>- to pick it up as well)
          </li>
        </ul>

        <div>
          Please note that this package obsoletes my old NuGet.Manifest.Xsd package as well.
        </div>
      </td>
    </tr>
  </tbody>
</table>

<p>Under the hood, I'm using an XML template for the generated .nuspec files, which looks like this:</p>

<pre class="brush: xml;auto-links:false;toolbar:false;">&lt;?xml version="1.0"?&gt;
&lt;!--
This tokenized .nuspec manifest file is targeting the latest NuGet namespace,
which ensures you can benefit from the latest packaging features.

If desired, you can change the XML-namespace and target the original XSD.
To do so, replace the current package declaration by the following:

&lt;package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"&gt;

Run "nuget.exe pack &lt;project&gt;" to build a nuget package for this project
using this tokenized nuspec file.

--&gt;
&lt;package xmlns="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd"&gt;
  &lt;metadata&gt;
    &lt;version&gt;$version$&lt;/version&gt;
    &lt;authors&gt;$author$&lt;/authors&gt;
    &lt;owners /&gt;
    &lt;id&gt;$id$&lt;/id&gt;
    &lt;title /&gt;
    &lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
    &lt;description&gt;$description$&lt;/description&gt;
  &lt;/metadata&gt;
  &lt;files /&gt;
&lt;/package&gt;</pre>

<p>Install the package use <em>Install-Package NuSpec</em>.</p>

<p><img style="max-width: 650px;" alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-04-27/2012-04-27_1356.png" /></p>

<p>And start using the Install-NuSpec command instead of losing time messing arround with files and windows and stuff. (kittens die when you do that)</p>
]]></content>
      <post-name type="text"><![CDATA[install-package-nuspec-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="52" date-created="2012-05-06T21:46:00" date-modified="2012-05-06T21:46:00" approved="true" post-url="/2012/05/06/create-auto-build-and-push-a-nuget-package-anywhere-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Install-NuSpec & Enable-PackagePush: create, build & push NuGet packages anywhere]]></title>
      <content type="text"><![CDATA[<p>This short post is basically combining some of my recent posts (<a href="http://www.xavierdecoster.com/post/2012/04/27/Install-Package-NuSpec.aspx" target="_blank">this</a> one and <a href="http://www.xavierdecoster.com/post/2012/04/14/Generated-AssemblyVersion-for-NuGet-package-on-TFS-Build.aspx" target="_blank">that</a> one) into one. Actually, into one single NuGet package :) </p>

<p>Basically, this one single package will allow me to automate and speed up package creation and publication, and it will run anywhere you can run the NuGet command line, because I only use nuget.exe and MSBuild to perform these actions. To set it up, I use a NuGet package (Install-Package NuSpec) and some PowerShell, but that's only to put the pieces of the puzzle in the right place, and give you some commands in Visual Studio. Once you're done, simply uninstall the package.</p>

<p>So, in short:</p>

<ol>
<li><strong>Enable Package Restore</strong> to get the .nuget folder (which contains nuget.exe and some nuget.targets file I'll extend)</li>
<li><strong>Install-Package NuSpec</strong> (once per solution, target project doesn't matter)</li>
<li><strong>Install-NuSpec <projectName> [-EnablePackageBuild]</strong> (for every project you want to trigger a package build)</li>
<li><strong>Enable-PackagePush <projectName></strong> (for every project you want to enable auto-push)</li>
<li><strong>Uninstall-Package NuSpec</strong> (once you're finished with steps 1-4 for the solution)</li>
</ol>

<div>
  A more detailed <a href="https://github.com/myget/NuGetPackages/blob/master/README.md" target="_blank">Readme</a> is available on Github (where the <a href="https://github.com/myget/NuGetPackages" target="_blank">sources</a> are if you fancy some PowerShell).
</div>

<div>
  The package can be found on <a href="https://nuget.org/packages/NuSpec/" target="_blank">NuGet</a>.
</div>

<p>If you're using <a href="http://www.myget.org" target="_blank">MyGet</a> already, you simply need to set the <em>feedname</em> and your own personal API-key in the NuGet.Extensions.targets file you'll find under the $(SolutionDir).nuget folder. If you're not using MyGet, simply replace the entire PushPkgSource and SymbolsPkgSource URLs by the one of your choosing.</p>
]]></content>
      <post-name type="text"><![CDATA[create-auto-build-and-push-a-nuget-package-anywhere-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="53" date-created="2012-05-08T21:48:00" date-modified="2012-05-08T21:48:00" approved="true" post-url="/2012/05/08/slides-code-of-msdn-live-meeting-ci-using-tfs11-nuget-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Slides & code of MSDN Live Meeting: CI using TFS11 & NuGet]]></title>
      <content type="text"><![CDATA[<p>Thanks everyone for joining this session!</p>

<p>As promised, here are the slides and <a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-05-08/MSDN%20Live%20Meeting%20-%20CI%20using%20TFS11%20&%20NuGet%20-%20demo%20code.zip">code</a> used during the presentation. The <a href="http://channel9.msdn.com/posts/Continuous-Integration-using-TFS11--NuGet" target="_blank">Channel9 screencast</a> is now also available.</p>

<p><video controls="controls" poster="http://media.ch9.ms/ch9/d0e9/a6160d10-420a-4ad6-8f24-29903857d0e9/ciusingtfs11nuget_512.jpg"><source src="http://media.ch9.ms/ch9/d0e9/a6160d10-420a-4ad6-8f24-29903857d0e9/ciusingtfs11nuget_mid.mp4" type="video/mp4" /><source src="http://media.ch9.ms/ch9/d0e9/a6160d10-420a-4ad6-8f24-29903857d0e9/ciusingtfs11nuget.webm" type="video/webm" /></video></p>

<div id="__ss_12849211" style="width: 425px;"><strong style="display: block; margin: 12px 0 4px;"><a title="MSDN Live - CI using TFS11 &amp; NuGet" href="http://www.slideshare.net/xavierdecoster/msdn-live-ci-using-tfs11-nuget">MSDN Live - CI using TFS11 &amp; NuGet</a></strong> <object width="425" height="355" id="__sse12849211"> <embed name="__sse12849211" width="425" height="355" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=20120508-msdnlive-ciusingtfs11nuget-120508090831-phpapp01&amp;stripped_title=msdn-live-ci-using-tfs11-nuget&amp;userName=xavierdecoster" type="application/x-shockwave-flash" wmode="transparent" allowfullscreen="true" allowscriptaccess="always" /> </object>
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/xavierdecoster">Xavier Decoster</a>.</div>
</div>

<p><a href="https://xavierdecosterblog.blob.core.windows.net/$root/MSDN%20Live%20Meeting%20-%20CI%20using%20TFS11%20&amp;%20NuGet%20-%20demo%20code.zip">MSDN Live Meeting - CI using TFS11 &amp; NuGet - demo code.zip (2.40 mb)</a></p>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>

<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js?c1=7&amp;c2=7400849&amp;c3=1&amp;c4=&amp;c5=&amp;c6="></script>
]]></content>
      <post-name type="text"><![CDATA[slides-code-of-msdn-live-meeting-ci-using-tfs11-nuget-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="54" date-created="2012-06-01T21:50:00" date-modified="2012-06-01T21:50:00" approved="true" post-url="/2012/06/01/u-no-like-vs2012-shouting-menus-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[U NO LIKE VS2012 SHOUTING MENUS?!]]></title>
      <content type="text"><![CDATA[<h2>::: TO DISABLE ALL CAPS MENUS :::</h2>

<ul>
<li>Install-Package <a href="http://nuget.org/packages/VS2012.RemoveAllCaps" target="_blank">VS2012.RemoveAllCaps</a></li>
<li>Disable-AllCaps</li>
<li>Uninstall-Package VS2012.RemoveAllCaps</li>
</ul>

<p>The <strong>Disable-AllCaps</strong> and <strong>Enable-AllCaps</strong> cmdlets will still be available after uninstalling the package, as it is persisted into the NuGet PowerShell profile.</p>

<p>You might need to restart VS2012 in order for the changes to take effect.</p>

<p><a href="http://www.richard-banks.org/2012/06/how-to-prevent-visual-studio-2012-all.html" target="_blank">Credits to Richard Banks for the registry hack</a> :)</p>
]]></content>
      <post-name type="text"><![CDATA[u-no-like-vs2012-shouting-menus-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="55" date-created="2012-06-04T21:54:00" date-modified="2012-06-04T21:54:00" approved="true" post-url="/2012/06/04/installing-commands-into-the-nuget-powershell-profile/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Installing commands into the NuGet PowerShell profile]]></title>
      <content type="text"><![CDATA[<p>If you're one of those guys who prefers to automate things than repeating them manually, you've probably spent some time already in the NuGet Package Manager Console. Many packages are providing way more than just a set of binaries. Some of them are really full installations of functionality and help you automate actions within Visual Studio. A good example is the well-known <a href="http://nuget.org/packages/MvcScaffolding" target="_blank">MvcScaffolding</a> package, which is providing tons of extra functionality in the PowerShell-enabled console.</p>

<h2>Building a tools package?</h2>

<p>There are also the so called <strong>tools packages</strong>, which only contain a tools folder inside the package and thus only ship such functionality, without installing anything into the target project or solution. If you want to build such package, it might be interesting to know that <a href="http://docs.nuget.org/docs/start-here/Using-the-Package-Manager-Console#Setting_up_a_NuGet_Powershell_Profile" target="_blank">NuGet supports its own PowerShell profile</a>.</p>

<p>An example tools package I recently created is the <a href="https://github.com/myget/NuGetPackages/tree/master/NuSpec" target="_blank">NuSpec</a> package (<a href="http://nuget.org/packages/NuSpec" target="_blank">Install-Package NuSpec</a>). It provides a bunch of PowerShell command-lets that help you automate the creation of .nuspec files within Visual Studio.</p>

<p>Installing this package does not change anything to your solution or project. It's only when you start using the command-lets that you modify these files. So why would we need to install this package for every single solution over and over again? Let's install it into the NuGet PowerShell profile and have it sit there, readily available for whenever you need it, no matter which solution you open.</p>

<h2>Installing the tools once and for all (*)</h2>

<p>(*) until the next update or something :)</p>

<p>The NuGet PowerShell profile is not always available on the consuming computer. So as a package producer, it is our job to make detect it and make sure it's there for us in order to import our own modules into it. For this, we can conveniently make use of the $profile variable which contains the path to the <strong>NuGet_profile.ps1</strong>, which should be available in <em>%USERPROFILE%\My Documents\WindowsPowerShell</em>.</p>

<p>The following piece of PowerShell code creates the file if it doesn't exist, and imports a module with a configurable name:</p>

<pre class="brush: powershell;auto-links:false;"># Set the module name
$moduleName = "MyModule"

# Check if the NuGet_profile.ps1 exists and register the module
if(!(Test-Path $profile)){
  mkdir -force (Split-Path $profile)
  New-Item $profile -Type file -Value "Import-Module $moduleName"
}
else{
  Add-Content -Path $profile -Value "`r`nImport-Module $moduleName"
}</pre>

<p>Put this in the <strong>init.ps1</strong> file of your NuGet package and copy all the required files from your tools folder to the *%USERPROFILE%\My Documents\WindowsPowerShell\Modules\MyModule* directory.</p>

<p>A simple convention here can save you some code: the name of the module is also the name of the directory to copy to in the Modules folder. The following example illustrates what I mean:</p>

<ul>
<li>NuGet package ID: <strong>MyModule</strong></li>
<li>PowerShell module and manifest inside tools folder: <strong>MyModule</strong>.psd1 and <strong>MyModule</strong>.psm1</li>
<li>Target copy location for required files: %USERPROFILE%\My Documents\WindowsPowerShell\Modules*<em>MyModule</em>*\</li>
</ul>

<p>Below, you find some key excerpts from the init.ps1 I use for the NuSpec package:</p>

<pre class="brush: powershell;gutter:false;toolbar:false;">param($installPath, $toolsPath, $package, $project)

# Configure
$moduleName = "NuSpec"

# Derived variables
$psdFileName = "$moduleName.psd1"
$psmFileName = "$moduleName.psm1"
$psd = (Join-Path $toolsPath $psdFileName)
$psm = (Join-Path $toolsPath $psmFileName)

# Check if the NuGet_profile.ps1 exists and register the NuSpec.psd1 module
if(!(Test-Path $profile)){
  mkdir -force (Split-Path $profile)
  New-Item $profile -Type file -Value "Import-Module $moduleName"
}
else{
  Add-Content -Path $profile -Value "`r`nImport-Module $moduleName"
}

# Copy the files to the module in the profile directory
$profileDirectory = Split-Path $profile -parent
$profileModulesDirectory = (Join-Path $profileDirectory "Modules")
$moduleDir = (Join-Path $profileModulesDirectory $moduleName)
if(!(Test-Path $moduleDir)){
  mkdir -force $moduleDir
}
copy $psd (Join-Path $moduleDir $psdFileName)
copy $psm (Join-Path $moduleDir $psmFileName)

# Copy additional files
...
copy "$toolsPath\*.xsd" $moduleDir
copy "$toolsPath\*.xml" $moduleDir
...

# Reload NuGet PowerShell profile
. $profile</pre>

<p><em>Note: This approach doesn't support the classical Update-Package or Uninstall-Package commands obviously. You'll have to detect these upgrades/migrations when installing your package, which, again, is nothing more than some file or file contents manipulation using PowerShell.</em></p>
]]></content>
      <post-name type="text"><![CDATA[installing-commands-into-the-nuget-powershell-profile]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="56" date-created="2012-06-08T22:07:00" date-modified="2012-06-08T22:07:00" approved="true" post-url="/2012/06/08/distributing-net-licensed-components-using-nuget-aspx/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Distributing .NET Licensed components using NuGet]]></title>
      <content type="text"><![CDATA[<p>If you are building components that are licensed using the <a href="http://www.codeguru.com/csharp/.net/net_framework/licensing/article.php/c5469/Licensed-Applications-using-the-NET-Framework.htm" target="_blank">.NET Licensing Model</a>, you might have been looking for a way to take benefit from <a href="http://www.nuget.org" target="_blank">NuGet</a> as a distribution mechanism.</p>

<p>If you are unfamiliar with the .NET Licensing Model, I recommend this <a href="http://www.codeguru.com/csharp/.net/net_framework/licensing/article.php/c5469/Licensed-Applications-using-the-NET-Framework.htm" target="_blank"><em>excellent article</em></a> providing you with a good introduction and sample code.</p>

<p>No matter what licensing model you use, an application that consumes a licensed component needs to use a mysterious <strong>licenses.licx</strong> file and set it as an embedded resource. In addition, the license key or <em>.lic</em> file for the licensed component being consumed must be present.</p>

<p>This makes packaging a .NET licensed component slightly different from packaging a simple assembly.</p>

<h1>Licensing a component</h1>

<p>To illustrate this, I have a sample component (a Windows Forms user control) that I licensed using the .NET built-in <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.licfilelicenseprovider.aspx" target="_blank">LicFileLicenseProvider</a>. Actually, I used a custom one which inherits from it, just because I can :) The only thing I did was changing the license key that I expect from the consuming application. The following code block contains the entire user control (yep, that's all there is to it). The code required to license the control is highlighted.</p>

<pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 2;  toolbar: false; highlight: [7,10,16,17,37,38,39,40,41];">using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace LicensedComponent
{
  [LicenseProvider(typeof(MyLicFileLicenseProvider))]
  public class LicensedUserControl : UserControl
  {
    private License _license;
    private Label _lblText;

    public LicensedUserControl()
    {
      InitializeComponent();
      _license = LicenseManager.Validate(typeof(LicensedUserControl), this);
      _lblText.Text = _license.LicenseKey;
    }

    private void InitializeComponent()
    {
      _lblText = new Label();
      SuspendLayout();
      _lblText.Dock = DockStyle.Fill;
      _lblText.TextAlign = ContentAlignment.MiddleCenter;

      Controls.Add(_lblText);
      Size = new Size(400, 250);

      ResumeLayout(false);
    }

    protected override void Dispose(bool disposing)
    {
      if (_license != null)
      {
        _license.Dispose();
        _license = null;
      }
      base.Dispose(disposing);
    }
  }
}
</pre>

<p>You might be wondering why I keep track of the license object: I simply display the license key in the control's label. Note that you can create your own custom license type by inheriting from License (and extend it with properties, e.g. a boolean IsInDemoMode). To customize the licensing mechanism, you simply create your own LicenseProvider. In this case, the <a href="#MyLicFileLicenseProvider" target="_blank">MyLicFileLicenseProvider</a> looks as following:</p>

<pre class="brush: csharp; gutter: true; first-line: 1; tab-size: 2;  toolbar: false;  width: 650px; height: 352px;">using System.ComponentModel;

namespace LicensedComponent
{
  public class MyLicFileLicenseProvider : LicFileLicenseProvider
  {
    private const string LicenseKeyFormat = "{0} license key: {1}";

    // this key is what makes you a billionaire
    private const string LicenseKey = "{2EDE0218-0996-41D8-9E32-6066F248A215}";

    protected override string GetKey(System.Type type)
    {
      return string.Format(LicenseKeyFormat, type.FullName, LicenseKey);
    }
  }
}</pre>

<p>There's only one thing left for this component to be ready for distribution: the license file. The LicFileLicenseProvider tells the .NET runtime to look for a license file. The license file should have a specific name, which is by convention equal to the following pattern: <strong>classFullName.lic</strong>. Just put it in the component's project.</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-06-08/2012-06-08_1431.png" height="110" width="313" /></p>

<p>In this sample, this results in LicensedComponent.LicensedUserControl.lic</p>

<h1>Consuming a licensed component</h1>

<p>This is heavily dependent on the licensing mechanism obviously. I'll just explain how you can consume the above component to give you an idea. The end result with regard to the <strong>licenses.licx</strong> file and the NuGet package are the same, which is the goal of this post. For more advanced licensing strategies or inspiration, refer to <a href="http://www.codeguru.com/csharp/.net/net_framework/licensing/article.php/c5469/Licensed-Applications-using-the-NET-Framework.htm" target="_blank">this post</a>.</p>

<p>As mentioned in this post's introduction, the consumer needs to have a <em>licenses.licx</em> file (describing the list of components that are licensed). Because I used the simple LicFileLicenseProvider, the consuming application must also have a valid <em>.lic</em> file (for each component, containing it's license key). The latter is not needed if you implemented a different licensing mechanism that doesn't require such file (e.g. checking the registry or calling a web service).</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-06-08/2012-06-08_1447.png" height="356" width="592" /></p>

<p>For a Windows Forms licensed user control, Visual Studio will create the licenses.licx file for you the moment you drag-n-drop the component onto another control in the designer. In the screenshot above, I just docked my control on the form.</p>

<p>The licenses.licx file contains the following, clearly indicating that the <em>LicensedComponent.LicensedUserControl</em> with version 1.0.0.0 contains a licensed control with the name <em>LicensedComponent.</em></p>

<pre class="brush: plain; gutter: false; first-line: 1; tab-size: 2;  toolbar: false;  width: 650px; height: 29px;">LicensedComponent.LicensedUserControl, LicensedComponent, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</pre>

<p>However, where is the <strong>LicensedComponent.LicensedUserControl.lic</strong> file containing the required license key? Well, it must be found next to the assembly containing the licensed component. If this would be a NuGet package (which it already is, if you look at the solution), you'd find the assembly somewhere inside the $(SolutionDir)\Packages folder. More specifically: the $(SolutionDir)\Packages\LicensedComponent.1.0.0.0\lib\net40-client folder in this case. Its contents would look like this:</p>

<pre class="brush: plain; gutter: false; first-line: 1; tab-size: 2;  toolbar: false;  width: 650px; height: 26px;">LicensedComponent.LicensedUserControl license key: {2EDE0218-0996-41D8-9E32-6066F248A215}</pre>

<p>Why exactly this text? Check the <a href="#MyLicFileLicenseProvider" target="_blank">MyLicFileLicenseProvider</a> code again.</p>

<p>As you can see, there's more to it than just adding a reference to the *LicensedComponent.dll, *so the same is true for creating the NuGet package that will distribute it.</p>

<h1>Creating a "licensed" NuGet package</h1>

<p>The full <a href="http://docs.nuget.org/docs/reference/nuspec-reference" target="_blank">nuspec</a> file I used to package this licensed user control can be found below. The nuspec is located next to my .csproj file, while I manually created the licenses.licx file myself in the solution directory (one level up, which explains the relative path in the nuspec).</p>

<pre class="brush: xml; gutter: true; first-line: 1; tab-size: 2;  toolbar: false;  width: 650px; height: 414px;">&lt;?xml version="1.0"?&gt;
&lt;package&gt;
  &lt;metadata&gt;
    &lt;version&gt;$version$&lt;/version&gt;
    &lt;authors&gt;$author$&lt;/authors&gt;
    &lt;owners /&gt;
    &lt;id&gt;$id$&lt;/id&gt;
    &lt;title /&gt;
    &lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
    &lt;description&gt;$description$&lt;/description&gt;
  &lt;/metadata&gt;
  &lt;files&gt;
    &lt;file src="..\licenses.licx"
          target="Content\Properties"/&gt;
    &lt;!--
      Ensure the .lic file is packaged next to its
      companion .dll inside the Lib folder
    --&gt;
    &lt;file src="LicensedComponent.LicensedUserControl.lic"
          target="Lib\net40-Client"/&gt;
  &lt;/files&gt;
&lt;/package&gt;</pre>

<p>If I want to give my package consumer a smooth install experience, I should ensure that the proper license is installed as well. In short, I'll simply ensure the <em>LicensedComponent.LicensedUserControl.lic</em> file is shipped next to its assembly, and copy the <em>licenses.licx</em> file into the target project.</p>

<p>Here's the point where you can finally make that remark about <em>why the hell are these license files not XML files</em>! :)</p>

<p>I'd strongly recommend you to create your own licensing mechanism, using XML, registry, services, etc. because my package will not be able to merge the contents of the licenses.licx file into the target project if this file already exists. You can work around it though using PowerShell if you use this file-based mechanism for your components.</p>

<h1>Securing the package?</h1>

<p>Ok, so you have a package which is worth something. It contains a licensed fully working version of your component (using this very basic licensing mechanism at least). How do I distribute it? Putting it on NuGet.org is a no-go, as everyone can simply consume it without paying the license fee.</p>

<p>Here's an alternative: create a private NuGet feed on <a href="http://www.myget.org" target="_blank">MyGet</a>. Simply give access to those people who paid for it, and secure it for others.</p>

<p><a title="MyGet.org - NuGet-as-a-Service" href="http://www.myget.org" target="_blank"><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-06-08/myget_125x32.png" /></a></p>

<p>Again, I used a very basic licensing mechanism only to demonstrate how you can embed a file-based license into your NuGet package and pointed out you can secure your feed with granular access instead of worrying about your package. It's up to you to ensure your licensing mechanism doesn't support distributing the licensed package elsewhere! (this proof-of-concept doesn't mitigate this at all, so be warned!)</p>

<p>The code as well as the NuGet package are attached to this blog:</p>

<ul>
<li><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-06-08/LicensedComponent.zip">LicensedComponent.zip (212.22 kb)</a></li>
<li><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-06-08/ConsumingClient.zip">ConsumingClient.zip (22.23 kb)</a></li>
<li><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-06-08/LicensedComponent.1.0.0.0.nupkg">LicensedComponent.1.0.0.0.nupkg (5.60 kb)</a></li>
</ul>
]]></content>
      <post-name type="text"><![CDATA[distributing-net-licensed-components-using-nuget-aspx]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="57" date-created="2012-08-07T22:16:00" date-modified="2012-08-07T22:16:00" approved="true" post-url="/2012/08/07/setting-up-your-own-symbolsource-server-step-by-step/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Setting up your own SymbolSource Server: step-by-step]]></title>
      <content type="text"><![CDATA[<p style="font-weight:bold; font-size:1.5em; border:1px solid #eee; background-color:#fff; padding: 10px; line-height:1.5em;">Edit: This post is rather out-dated, and I would now recommend you <span style="font-style:italic; background-color:#FFFBCC">get yourself out of the symbols server hosting business</span>, and instead, use MyGet's Symbol Server capabilities.<br/>
More info: <a href="http://docs.myget.org/docs/reference/symbols">http://docs.myget.org/docs/reference/symbols</a>.</p>

<p>I've already explained <a href="http://www.xavierdecoster.com/post/2011/11/16/Why-everyone-should-be-using-a-symbol-server.aspx">why everyone should be using a symbols server</a>. In that post, I explained that TFS comes with its own integrated symbols server, but <span style="text-decoration: underline;">at the moment</span> it doesn't play very nice with NuGet packages. Or maybe you are not using TFS at all.</p>

<p>That's where <a href="http://www.symbolsource.org/">SymbolSource</a> comes in. NuGet has the ability to <a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-symbol-package">create symbols packages</a>, so you can easily push them to a symbols package repository. This is exactly what SymbolSource offers, either as a public or private repository on SymbolSource.org, or as a separate cloud-based instance of SymbolSource where you also can manage users and repositories. Both <a href="http://www.symbolsource.org/Public/Account/Register">plans</a> are still in an unlimited free beta mode, so <a href="http://www.symbolsource.org/Public/Account/Register">give it a try</a>.</p>

<p>As much as I am a huge fan of the hosted SymbolSource offering, some people prefer to host code, symbols and packages on their own infrastructure, if only to troll some sys-admins or slow down development (if you're a manager, I'm talking about <em>security</em>).</p>

<p>With the release of the SymbolSource <a href="http://www.symbolsource.org/Public/Blog/View/2012-03-13/Releasing_the_community_edition_of_SymbolSource">community edition</a>, I figured it was about time to try it out for myself.</p>

<h2>Prerequisites</h2>

<p>Before you open Visual Studio and search NuGet for the 'symbolsource' keyword, you'll have to install the <a href="http://msdn.microsoft.com/en-us/windows/hardware/gg463009">Debugging Tools for Windows</a>. As I'm going to try it out on a Windows Azure Virtual Machine running Windows Server 2012 RC (living on the edge aren't we), I'll simply install the Windows SDK for Windows 8 Release Preview which contains the <strong>Debugging Tools for Windows</strong> as a standalone component.</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-08-07/install_debugging_tools.png" width="600"></p>

<p><strong>Keep track of the installation path</strong> as you will need it later on.</p>

<h2>Setting up your basic SymbolSource server</h2>

<p>If you are familiar with setting up your own NuGet server (if not, check out <a href="http://bit.ly/ProNuGet">this book</a>), you'll notice that setting up your own SymbolSource server is peanuts. Very similar to the NuGet.Server package, SymbolSource provides you with a <a href="http://nuget.org/packages/SymbolSource.Server.Basic">SymbolSource.Server.Basic</a> package on NuGet (they just released v1.1.0 so go get it while it's hot!). Let's get this thing rolling...</p>

<h3>Creating the Web application</h3>

<p>I started off an <em>empty</em> ASP.NET MVC4 application.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-08-07/new_mvc_project.png" width="600px"></p>

<p>Next I ran the following script in the NuGet Package Manager Console:</p>

<pre class="brush: plain; gutter: true; first-line: 1; tab-size: 2;  toolbar: false;">Install-Package SymbolSource.Server.Basic</pre>

<p>For those who prefer clicking there way through the UI, you can achieve the same by right clicking your Web project's references, select Manage NuGet Packages, and query the NuGet official feed for the term "SymbolSource.Server".</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-08-07/install_symbsrc_basic_server_pkg_ui.png" width="600"></p>

<p>Installing this package injects a ton of dependencies into your consuming Web application project. This isn't a bad thing, really, because you get a whole lot of functionality by simply installing this single NuGet package. It even comes with <a href="http://nuget.org/packages/elmah" target="_blank">ELMAH</a> logging preconfigured, so you get logging out of the box.</p>

<p><strong>Note:</strong> Don't forget about security! See <a href="http://code.google.com/p/elmah/wiki/SecuringErrorLogPages">http://code.google.com/p/elmah/wiki/SecuringErrorLogPages</a> for more information on remote access and securing ELMAH.</p>

<p>Now's the time you need to configure the installation path of <em>Debugging Tools for Windows</em>. To do so, open the Web.config file and adjust the <appsettings> section. You'll find a predefined SrcSrvPath element with the default installation path for a x64 machine running Windows 8 or Windows Server 2012. If you chose a different installation path, or if you are running a previous version of Windows, simply replace the value with your installation path.</appsettings></p>

<p>Windows Server 2012 / Windows 8:</p>

<pre class="brush: xml; gutter: true; first-line:1; tab-size:2; toolbar: false;">&lt;add key="SrcSrvPath" value="C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x64\srcsrv" /&gt;</pre>

<p>Earlier versions of Windows:</p>

<pre class="brush: xml; gutter: true; first-line:1; tab-size:2; toolbar: false;">&lt;add key="SrcSrvPath" value="C:\Program Files\Debugging Tools for Windows (x86)\srcsrv" /&gt;</pre>

<p>You can now start the application and browse the home page shown below.</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-08-07/symsrv_failing_push_test.png" width="600"></p>

<p>All the information you need, including all required URLs, is listed on the application's start page.</p>

<ul>
<li><strong>Visual Studio Debugging URL</strong> - You need to configure this URL in the Debug settings of your Visual Studio development environment. More info and a recommended setup are <a href="http://www.symbolsource.org/Public/Home/VisualStudio" target="_blank">documented on the SymbolSource Web site</a>.</li>
<li><strong>NuGet Symbols Packages Repository URL</strong> - This is the NuGet package repository where you should push your symbols packages to.</li>
<li><strong>OpenWrap Repository URL</strong> - Yep, SymbolSource supports both NuGet and OpenWrap!</li>
<li><strong>Self-diagnostics</strong> - Very useful and very nice from the SymbolSource guys to provide this. This will help you verify whether the prerequisite is installed and your Web site is configured correctly to provide a fully functioning SymbolSource basic server. Shield this info from the public! No one needs to know...</li>
</ul>

<p style="padding-top: 1em;">
  If you look at the previous image, you'll notice that the NuGet push test failed with an InternalServerError. Checking this on the server itself reveals that the application has no access to the App_Data folder. To fix this, simply add write permissions for the IUSR on the <b>App_Data</b> folder through IIS Management Console. Make sure you do the same for the <b>Data</b> and the <b>Index</b> folder.
</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-08-07/edit_site_permissions.png" alt=""></p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-08-07/edit_security_folder.png" alt=""></p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-08-07/add_IUSR_WritePermissions.png" alt=""></p>

<p>There's one last thing you need to do: modify your web.config and add the following elements:</p>

<pre class="brush:xml; gutter: true; first-line:1; tab-size:2; toolbar: false;">&lt;system.webServer&gt;<br />&nbsp;&lt;modules runAllManagedModulesForAllRequests="true" /&gt;<br />&lt;/system.webServer&gt;</pre>

<p>If all went well, your home page should indicate that your server has been configured correctly.</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-08-07/symsrv_homepage.png" alt=""></p>

<h2>Creating and pushing symbols packages</h2>

<p>A symbols package has the *.symbols.nupkg extension and contains only DLL, PDB, XMLDOC and source files. To create them, add the -Symbols option to the NuGet pack command. You should see two packages being created instead of one. A detailed description on the symbols package contents and structure can be found on the online <a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-symbol-package" target="_blank">NuGet Documentation.</a></p>

<p>Quoting from the SymbolSource documentation:</p>

<p><em>"At this moment, the server accepts any NuGet API key, but you are free to secure it using any of the IIS authentication capabilities."</em></p>

<p>This means you can easily push the symbols package using the following command:</p>

<pre class="brush:plain; gutter: true; first-line:1; tab-size:2; toolbar: false;">nuget push {packageID}.symbols.nupkg {API key} -source {url}</pre>

<p>The server will ignore your API key (as it accepts anything at the moment). Replace the {url} placeholder with the NuGet symbols packages repository URL you found on your server's home page.</p>

<p>That's it! Happy packaging!</p>
]]></content>
      <post-name type="text"><![CDATA[setting-up-your-own-symbolsource-server-step-by-step]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="58" date-created="2012-08-21T22:18:00" date-modified="2012-08-21T22:18:00" approved="true" post-url="/2012/08/21/debugging-nuget-package-restore/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Debugging NuGet Package Restore]]></title>
      <content type="text"><![CDATA[<h2>Package Restore Internals</h2>

<p>When enabling NuGet package restore, the NuGet Visual Studio extension modifies your projects in the following way:</p>

<ul>
<li>A .nuget folder is created next to your solution, containing MSBuild targets and the nuget.exe command line tool.</li>
<li>Your existing projects that already consume NuGet packages are modified: the <restorePackages> MSBuild element is added and set to True, and an <import> statement is configured to import the NuGet MSbuild targets. (and technically, a <solutionDir> property is set as well, allowing you to configure the location of your solution if you deviate from the default convention of having a projectdir for each project in your solution: $(SolutionDir)\ProjectDirA\ProjectA.csproj)</li>
</ul>

<p>Check the NuGet documentation to <a href="http://docs.nuget.org/docs/workflows/using-nuget-without-committing-packages" target="_blank">learn how to set up NuGet package restore</a>. I'll focus on the issues now.</p>

<h2>Debugging Checklist</h2>

<p>Depending on the symptoms of your issue, you can start investigating locally, or working your way back starting from the build server. Obviously, the easiest way is to check if all runs fine locally.</p>

<ul>
<li>Clear your $(SolutionDir)\Packages folder (except for the repositories.config file)</li>
<li>Clean your solution (delete bin &amp; obj folders)</li>
<li>Clear your local machine NuGet cache (%LocalAppData%\NuGet\Cache)</li>
</ul>

<p>Rebuild your solution and check if everything compiles OK and the correct packages are installed.</p>

<h3>In Visual Studio</h3>

<ul>
<li>By default, NuGet Package Restore enables restore only for those projects that already consume NuGet packages. If you first enabled package restore and then started consuming packages, it is possible that some projects aren't configured properly. You can verify this by checking whether the project files contain the <restorePackages>true</restorePackages> MSBuild property.</li>
<li>NuGet Package Restore assumes you have a solution in a root directory $(SolutionDir) and all projects have their own subdirectory (e.g. $(SolutionDir)\ProjectDirA\ProjectA.csproj). If you deviate from this convention, you have to manipulate the <solutionDir> MSBuild element in the project files accordingly (using relative paths!).</li>
<li>Ensure the nuget.targets file <packageSources> element is pointing to the correct URL. You can define multiple package sources using a semicolon separator. The order in which they are defined is also the order in which NuGet will look for your packages. When using paths that contain spaces, also ensure to put double quotes around the entire property value declaration (e.g. <packageSources>"\some unc\path;https://some url/feed/packages"</packageSources>)</li>
<li>If you upgraded some regular references to NuGet package dependencies, ensure the <hintpath> in the project file for that reference is pointing towards the correct location in the packages folder.</li>
</ul>

<h3>In Version Control</h3>

<ul>
<li>No matter what type of VCS you are using, NuGet Package Restore requires the .nuget folder to be checked-in, including the nuget.targets, nuget.config and nuget.exe.</li>
<li>Double-check whether you are having the actual nuget.exe command line in the .nuget folder, and not the bootstrapper. The commandline is around 600Kb in file size, the bootstrapper 15Kb. The bootstrapper requires internet access, and has been made obsolete now. It might be revived in the future, but for now, you should make sure you use the nuget.exe command line tool instead. You can get the nuget.exe command line manually as well by downloading it <a href="http://nuget.org/api/v2/package/NuGet.CommandLine/2.0.0" target="_blank">here</a>. Unzip it and replace your 18Kb nuget.exe by the one you'll find inside the package.</li>
<li>Ensure you checked in the Packages\repositories.config file. When using TFS, you'll be better off <a href="http://www.xavierdecoster.com/post/2011/10/17/Tell-TFS-not-to-add-NuGet-packages-to-source-control.aspx" target="_blank">when defining appropriate workspace mappings</a> for this.</li>
</ul>

<h3>On The Build Server</h3>

<ul>
<li>NuGet Package Restore requires a consent (due to privacy policy &amp; legal requirements). This can be set using a system-wide environment variable, which is <a href="http://blog.nuget.org/20120518/package-restore-and-consent.html" target="_blank">explained on the NuGet Blog</a>.</li>
<li><p>When using a secured feed which requires you to authenticate before consuming anything, you'll have to configure the required credentials in the NuGet.config. Ensure you are running this under the build service account. If the service account cannot remote desktop into the server but you can, then you might run a command prompt under another user by running the following from the command line:
<pre>runas /user:DomainName\TfsBuildServiceAccountName cmd
</pre> You'll be prompted for the password and a new command prompt should open. In this new command prompt, follow the below instructions to save authentication information for a given package source. </p>

<p><pre class="brush: plain; gutter: true; first-line: 1; tab-size: 2;  toolbar: true;">nuget.exe sources add -name [feedName] -source [feedUrl]
nuget.exe setapikey [apikey] -source [feedUrl]
nuget.exe sources update -Name [feedName -User [username] -pass [password]
</pre> When using <a href="http://www.myget.org" target="_blank">MyGet</a>, we recommend you to use/create a specific user account for the build service account, if only to avoid you breaking all builds when changing your own password or apikey :)</p></li>
</ul>

<p>Hope this helps anyone!</p>
]]></content>
      <post-name type="text"><![CDATA[debugging-nuget-package-restore]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="59" date-created="2012-10-25T22:22:00" date-modified="2012-10-25T22:22:00" approved="true" post-url="/2012/10/25/nuget-tfs-preview-a-challenging-combination/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[NuGet & TFS Preview: a challenging combination]]></title>
      <content type="text"><![CDATA[<p>I've recently spent some time trying to come up with an end-to-end demo of using <a href="http://www.nuget.org" target="_blank">NuGet</a> on <a href="http://www.tfspreview.com" target="_blank">TFS Preview</a>, and I wanted to share you my findings.</p>

<p>My scenario looks as follows:</p>

<ul>
<li>NuGet packages are <a href="http://docs.nuget.org/docs/workflows/using-nuget-without-committing-packages" target="_blank">restored</a> from an&nbsp;<strong>HTTPS</strong> endpoint on <a href="http://www.myget.org" target="_blank">MyGet.org</a></li>
<li>The build agent auto-increments the build number and check-in the changes to the AssemblyInfo.cs file</li>
<li>Compilation</li>
<li>NuGet packages are created using this incremented version</li>
<li>NuGet packages are pushed to an HTTPS feed on MyGet.org</li>
</ul>

<p>This is quite a basic Continuous Integration set-up which <a href="http://www.developerfusion.com/article/144809/continuous-integration-using-nuget-and-teamcity/" target="_blank">has worked for me before on TeamCity</a>. However, on TFS Preview I would soon find out it's not as straightforward as one would think it is...</p>

<p>If we try to visualize the above scenario, you'd end up with the following flow:</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-10-25/end2end.png" width="750" height="200" /></p>

<p>Now how to implement this? I didn't want to customize any build definition templates for a multitude of reasons, but let's stick to the fact I didn't want to :) That leaves me with few other alternatives: MSBuild, PowerShell and NuGet.exe. I've been in this situation before and was hoping to be able to reuse some of the stuff I used on <a href="http://www.jetbrains.com/teamcity/" target="_blank">TeamCity</a>. So even if you don't use TFS or TFS Preview at all, I hope you'll find some useful information in this post.</p>

<h2>Expect some challenges</h2>

<p>First things first, let's start with the HTTPS endpoint from which the build agent should restore NuGet packages in a pre-build step. When enabling the NuGet package restore feature on your solution, the <a href="http://haacked.com/archive/2012/10/23/the-truth-about-nuget-and-its-future.aspx" target="_blank"><em>NuGet-based Microsoft Package Manager</em></a> (aka NuGet VSIX, aka NuGet Visual Studio Extension) is creating a .nuget folder in your solution directory, injects some files and modifies some if not all of your project files. The files that are being fetched are: nuget.config, nuget.exe and the nuget.targets MSBuild file. Enabling package restore is an optimal experience with little hassle (disabling however isn't). Now where is the catch?</p>

<p>Package restore actually is a call to&nbsp;<em>nuget.exe install</em> with some parameters. One of them is the&nbsp;<em>-source</em> option, allowing you to define which package source should be used to fetch packages from. If the -source option points to an HTTPS endpoint, guess what, you'll be <strong>prompted</strong> for credentials. So we need to feed the tool with the required credentials in a non-interactive way. Luckily enough, there's an option for this as well: simply add the&nbsp;<strong><a href="http://docs.nuget.org/docs/reference/command-line-reference#Options" target="_blank">-NonInteractive</a></strong> switch. This will instruct the NuGet command line tool to silently look for credentials in the nuget.config file. Perfect, right?</p>

<p>NuGet v2.1 is now supporting <a href="http://docs.nuget.org/docs/release-notes/nuget-2.1#Hierarchical_Nuget.config" target="_blank">hierarchical configurations</a>, so adding these credentials to our solution-level nuget.config should work. At least, that's what I thought... Turns out it doesn't take into account credentials yet (I logged an <a href="http://nuget.codeplex.com/workitem/2749" target="_blank">issue</a>). However, I know that nuget.exe does check the nuget.config in the build account's roaming user profile... IF you use the nuget.exe from that location, which doesn't exist, so I have to copy it first. You can see things can quickly get complicated here: a NuGet bug (?) requires me to first <strong>copy over nuget.exe to the %AppData%\NuGet folder</strong> (which I also must create), after which I also need to run a nuget.exe command to <strong>register the package source and its credentials</strong>... And all this must happen&nbsp;<em>before</em> package restore even kicks in. Obviously, that would also mean you need to do some cleanup at the end of the build process as well, unless you run on TFS Preview (because builds run in a sandboxed environment).</p>

<p>All of this can easily be done using a few MSBuild instructions and nuget.exe commands, and this is how I found out that the build agent seems to be running some exotic language pack on the OS :)</p>

<p><strong>Edit:&nbsp;</strong>Actually, it's not. As Chris Patterson explains in a comment to this post, this was bug for which a fix will be deployed soon.</p>

<p>Here's the path to the build account's roaming profile directory: C:\Users\畢汩杤敵瑳\AppData\Roaming. I remember the build user is named&nbsp;<em>buildguest</em>, but because of these exotic characters I occasionally had to switch between %appdata% and $(APPDATA) in my MSBuild file.</p>

<h2>Restore works, next up: versioning</h2>

<p>I've been doing <strong>auto-versioning</strong> before using the MSBuild Extension Pack which contains an AssemblyVersionTask. However, I also noticed that this task's changes to the AssemblyInfo.cs file are being undone! This happens inside the DLL that is containing this MSBuild Task, so I created my own <em>NuGet.MSBuildExtensions.dll</em> (currently very basic and only fixing this scenario). Undoing changes is not desirable, as we need to keep track of the version change. This means that these changes need to be <strong>committed into source control</strong>. To do that in a&nbsp;<em>non-interactive</em> way, you need to use <a href="http://msdn.microsoft.com/en-us/library/cc31bk2e(v=vs.110).aspx" target="_blank">tf.exe</a> and know the credentials of the account to be used to check-in these changes. Another challenge: what are my TFS Preview credentials? I use a Windows Live ID for authentication, so should I simply use my email and password? Nope, turns out there's a <a href="http://blog.hinshelwood.com/tfs-service-credential-viewer/" target="_blank">TFS Service Credential Viewer</a> which allows you to authenticate using your Windows Live ID and fetch your actual username and encrypted password. This is what you should be using when checking in those changes using tf.exe.</p>

<h2>Easy, let's create packages</h2>

<p>Here's another breaking change coming into play: those familiar with TFS know that all TFS output by default ends up into a&nbsp;<em><strong>Binaries</strong></em> folder, which is a sibling folder of the&nbsp;<em>Sources</em> folder where your Build Definition workspace gets checked out. Big news: this folder <strong>got renamed to</strong>&nbsp;<strong>bin</strong>! Again, I found out by trial and error... This also means you need to ensure that your project output ends up in this bin folder for the Release configuration (assuming you are building in Release mode). Simply change this in your project's properties: replace <i>"bin\Release"</i> by <em>"..\..\bin\"</em>, and do this for each project that should produce a NuGet package. You can optionally create a NuSpec file and make it available next to your project file to add some additional package metadata.</p>

<h2>Actual scenario</h2>

<p>All of the above makes it very cumbersome to support this scenario on TFS Preview at the moment. I'm sure if you'd go the custom build definition template way you'd end up with something very similar but less portable. I prefer this MSBuild + command line approach because it allows me to partially reuse some scripts on another environment such as TeamCity, which definitely has the lead at the moment in supporting NuGet in Continuous Integration scenarios. Adding the above "hacks" to the visualization gives us the following image:</p>

<p><img alt="" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-10-25/end2end-detailed.png" width="750" height="285" /></p>

<p>I've <a title="Click to download" href="https://xavierdecosterblog.blob.core.windows.net/blog/2012-10-25/.nuget.zip" target="_blank">uploaded</a> the relevant sources to this post for those interested. I'd rather see first-class support for NuGet rather soon (meaning full support for this scenario as a bare minimum)...</p>
]]></content>
      <post-name type="text"><![CDATA[nuget-tfs-preview-a-challenging-combination]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="6" date-created="2012-10-27T00:24:07" date-modified="2012-10-27T00:24:07" approved="true" post-url="/2012/10/27/community/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Talks & Community]]></title>
      <content type="text"><![CDATA[<h2>Deliverables</h2>

<h3>Talks &amp; Presentations</h3>

<table style="border: 1px solid #333; padding: 5px; margin: 5px; min-width: 600px;" border="0" cellspacing="0" cellpadding="5">
  <thead style="font-weight: bold; background-color: #cccccc;">
    <tr>
      <td>
        Date
      </td>

      <td>
        Title
      </td>

      <td>
        Event
      </td>

      <td>
        Where
      </td>

      <td>
        Slides
      </td>

      <td>
        Recording
      </td>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>
        May 28, 2014
      </td>

      <td>
        Cloud Development with a SaaS of SaaS - A Story of Continuous Improvement
      </td>

      <td>
        Techorama 2014
      </td>

      <td>
        Belgium - Mechelen
      </td>

      <td>
        <a href="https://speakerdeck.com/xavierdecoster/cloud-development-with-a-saas-of-saas-a-story-of-continuous-improvement" target="_blank">download</a>
      </td>

      <td>
      </td>
    </tr>
    <tr>
      <td>
        June 20, 2013
      </td>

      <td>
        NuGet (Anti-) Patterns – Tales from the trenches
      </td>

      <td>
        Community Day 2013
      </td>

      <td>
        Belgium - Mechelen
      </td>

      <td>
        <a href="http://www.slideshare.net/xavierdecoster/20130620-com-daybe-nuget-antipatterns-tales-from-the-trenches" target="_blank">download</a>
      </td>

      <td>
      </td>
    </tr>

    <tr>
      <td>
        January 16, 2013
      </td>

      <td>
        Organize your chickens: NuGet for the Enterprise
      </td>

      <td>
        Warm Crocodile Developer Conference
      </td>

      <td>
        Denmark - Copenhagen
      </td>

      <td>
        <a href="http://www.slideshare.net/xavierdecoster/organize-your-chickens-nuget-for-the-enterprise-16028732" target="_blank">download</a>
      </td>

      <td>
      </td>
    </tr>

    <tr>
      <td>
        January 16, 2013
      </td>

      <td>
        NuGet (Anti-)Patterns - Tales from the Trenches
      </td>

      <td>
        Warm Crocodile Developer Conference
      </td>

      <td>
        Denmark - Copenhagen
      </td>

      <td>
        <a href="http://www.slideshare.net/xavierdecoster/nuget-antipatterns-tales-from-the-trenches" target="_blank">download</a>
      </td>

      <td>
      </td>
    </tr>

    <tr>
      <td>
        May 8, 2012
      </td>

      <td>
        Continuous Integration using TFS11 & NuGet
      </td>

      <td>
        MSDN Live Webcast
      </td>

      <td>
        Belgium - Brussels
      </td>

      <td>
        <a href="http://www.slideshare.net/xavierdecoster/msdn-live-ci-using-tfs11-nuget" target="_blank">download</a>
      </td>

      <td>
        <a href="http://channel9.msdn.com/posts/Continuous-Integration-using-TFS11--NuGet" target="_blank">download</a>
      </td>
    </tr>

    <tr>
      <td>
        January 21, 2012
      </td>

      <td>
        Organize your chickens: NuGet for the Enterprise
      </td>

      <td>
        UgiAlt.Net
      </td>

      <td>
        Italy - Milan
      </td>

      <td>
        <a href="http://www.slideshare.net/xavierdecoster/ugialtnet-organize-your-chickens-nuget-for-the-enterprise" target="_blank">download</a>
      </td>

      <td>
        <a href="http://vimeo.com/35777282" target="_blank">download</a>
      </td>
    </tr>

    <tr>
      <td>
        October 11, 2011
      </td>

      <td>
        Organize your chickens: NuGet for the Enterprise
      </td>

      <td>
        VISUG
      </td>

      <td>
        Belgium - Brussels
      </td>

      <td>
        <a href="http://www.slideshare.net/xavierdecoster/visug-organize-your-chickens-nuget-for-the-enterprise" target="_blank">download</a>
      </td>

      <td>
      </td>
    </tr>

    <tr>
      <td>
        October 10, 2011
      </td>

      <td>
        Organize your chickens: NuGet for the Enterprise
      </td>

      <td>
        Agile.NET Europe
      </td>

      <td>
        Belgium - Ghent
      </td>

      <td>
        <a href="http://www.slideshare.net/xavierdecoster/20111010-agile-minds-organize-your-chickens-nuget-for-the-enterprise" target="_blank">download</a>
      </td>

      <td>
      </td>
    </tr>
  </tbody>
</table>

<h3>Articles &amp; Books</h3>

<table style="border: 1px solid #333; padding: 5px; margin: 5px; min-width: 600px;" border="0" cellspacing="0" cellpadding="5">
  <thead style="font-weight: bold; background-color: #cccccc;">
    <tr>
      <td>
        Date
      </td>

      <td>
        Title
      </td>

      <td>
        Publisher
      </td>

      <td>
        Link
      </td>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>
        October 7, 2013
      </td>

      <td>
        Pro NuGet - Second Edition
      </td>

      <td>
        Apress
      </td>

      <td>
        <a href="http://www.apress.com/9781430260011" target="_blank">Read</a>
      </td>
    </tr>
    <tr>
      <td>
        July 30, 2013
      </td>

      <td>
        An Overview of the NuGet Ecosystem
      </td>

      <td>
        Code Project
      </td>

      <td>
        <a href="http://www.codeproject.com/Reference/628210/An-Overview-of-the-NuGet-Ecosystem" target="_blank">Read</a>
      </td>
    </tr>
    <tr>
      <td>
        November 17, 2012
      </td>

      <td>
        Top 10 NuGet (Anti-) Patterns
      </td>

      <td>
        MSDN Magazine
      </td>

      <td>
        <a href="http://msdn.microsoft.com/en-us/magazine/jj851071.aspx" target="_blank">Read</a>
      </td>
    </tr>
    <tr>
      <td>
        July 16, 2012
      </td>

      <td>
        Continuous Integration Using NuGet And TeamCity
      </td>

      <td>
        DeveloperFusion
      </td>

      <td>
        <a href="http://www.developerfusion.com/article/144809/continuous-integration-using-nuget-and-teamcity/" target="_blank">Read</a>
      </td>
    </tr>

    <tr>
      <td>
        March 7, 2012
      </td>

      <td>
        Pro NuGet
      </td>

      <td>
        Apress
      </td>

      <td>
        <a href="http://www.apress.com/9781430241911" target="_blank">Read</a>
      </td>
    </tr>
  </tbody>
</table>

<p><hr style="margin-top: 20px; margin-bottom: 20px;" /></p>

<h2>Projects &amp; Contributions</h2>

<h3>Community Projects</h3>

<ul>
<li><a href="http://www.myget.org" target="_blank">MyGet</a> : NuGet-as-a-Service - Co-founder &amp; developer</li>
</ul>

<h3>Open Source</h3>

<p>I'm a project coordinator and/or contributor/developer on the following open source projects:</p>

<ul>
<li><a href="https://github.com/xavierdecoster/Resharper-XML-Minifier" target="_blank">ReSharper XML Minify Plug-in</a> : a ReSharper plug-in that allows you to minify XML files without affecting the XML element names and attributes</li>
<li><a href="http://github.com/xavierdecoster/NuGet.Analyze" target="_blank">NuGet Analyze Commandline Plug-in</a> : allows you to analyze a source control repository (e.g. TFS source control and local Git, SVN, Mercurial clones) and generate a NuGet package dependency matrix</li>
<li><a href="http://npeilspy.codeplex.com/" target="_blank">NuGet Package Explorer ILSpy Plug-in</a> : world's first plugin for NuGet Package Explorer (NPE), which allows you to double-click on a library in a NuGet package within NPE and launches it in the ILSpy decompiler.</li>
<li><a title="Silverlight Advanced ToolTips" href="http://tooltipservice.codeplex.com/" target="_blank">Silverlight Advanced ToolTips</a> : brings extra functionality to Silverlight's tooltipservice, such as tooltip open/close animations, custom duration, custom delay, ... (also available on the <a href="http://www.nuget.org/List/Packages/Silverlight.Advanced.ToolTips" target="_blank">NuGet Gallery</a>)</li>
<li><a title="Visual Studio 2010 Image Debugger Visualizer" href="http://imagedebugvisualizer.codeplex.com/" target="_blank">VS2010 Image Debugger Visualizer</a> : a Visual Studio add-in/debugvisualizer allowing you to preview image streams during debugging (also available on the <a href="http://visualstudiogallery.msdn.microsoft.com/0954c361-ae31-491b-a503-926032c79a3d" target="_blank">VisualStudio Gallery</a>)</li>
</ul>
]]></content>
      <post-name type="text"><![CDATA[community]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="60" date-created="2012-11-24T20:43:49" date-modified="2012-11-24T20:43:49" approved="true" post-url="/2012/11/24/update-project-template-to-latest-nuget-packages/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Update project templates to the latest NuGet packages]]></title>
      <content type="text"><![CDATA[<p>Today I noticed <a href="http://stackoverflow.com/questions/13532909/update-default-nuget-packages">a question on StackOverflow</a> that proved I wasn't the only one finding it a little sub-optimal having to update NuGet packages right after creating a new project.</p>

<p>I think most of us use the default project templates that come with Visual Studio or an SDK. Let's take the example of the MVC4 project template for C#, using Razor syntax. </p>

<p><img width="600" alt="MVC4 C# Web application template using Razor syntax" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-11-24/2012-11-24_2212.png" /></p>

<p>This project template is consuming quite a few NuGet packages by default. jQuery is one of them. The whole point is that these NuGet packages can be updated more frequently and independent from any pending SDK update or other product release. This is a good thing!</p>

<p>As a direct consequence, this also means that the default templates become "outdated". Outdated is a strong word, as the template itself isn't really outdated, but rather the packages list it wants to consume from NuGet. jQuery is one of those packages that gets very frequent updates. There's an easy way to update all packages in a solution all at once. Use the Package Manager Console, type </p>

<blockquote>
  <p>Update-Package</p>
</blockquote>

<p>and hit ENTER. Done!</p>

<p><strong>But why not avoid this step (or at least partially) and change the defaults?</strong></p>

<p><em>Note: I'd recommend you to create your own project template so you can always revert back to the default one in case you, or someone else, is going to mess things up :)</em></p>

<p>All Visual Studio (2012) project templates can be found here:</p>

<blockquote>
  <p>C:\Program Files (x86)\Microsoft
  Visual Studio
  11.0\Common7\IDE\ProjectTemplates\</p>
</blockquote>

<p>If you want to create some custom project templates, I'd recommend you to create them here:</p>

<blockquote>
  <p>%USERPROFILE%\Documents\Visual Studio
  2012\Templates\ProjectTemplates</p>
</blockquote>

<p>In this post, I'll show you how you can change the defaults for the MVC4 CSHTML project template. You can find it here:</p>

<blockquote>
  <p>C:\Program Files (x86)\Microsoft
  Visual Studio
  11.0\Common7\IDE\ProjectTemplates\CSharp\Web\1033\MvcWebApplicationProjectTemplatev4.0.cshtml\</p>
</blockquote>

<p>To modify the files, you'll have to edit them <strong>as Administrator</strong> (you know the drill, right-click Notepad++ or Sumblime and click Run As Administrator).</p>

<p>The file you'll want to take a look at is the <strong>.vstemplate</strong> file. It's an XML file containing template instructions for Visual Studio. Look for a section called <strong>packages</strong>. It should look something like this:</p>

<pre><code>&lt;WizardData&gt;
        &lt;packages repository="registry" keyName="AspNetMvc4VS11" isPreunzipped="true"&gt;
            &lt;package id="EntityFramework" version="5.0.0" skipAssemblyReferences="true" /&gt;
            &lt;package id="jQuery" version="1.7.1.1" /&gt;
...
</code></pre>

<p>Let's take jQuery as an example again: I want to upgrade the dependency to version 1.8.2 by default.</p>

<p>To do so, I modify the above snippet to look like this:</p>

<pre><code>&lt;WizardData&gt;
        &lt;packages repository="registry" keyName="AspNetMvc4VS11" isPreunzipped="true"&gt;
            &lt;package id="EntityFramework" version="5.0.0" skipAssemblyReferences="true" /&gt;
            &lt;package id="jQuery" version="1.8.2" /&gt;
...
</code></pre>

<p>Easy huh?</p>

<p>Now you found the candy, you can change the default installed package versions, or even add or remove the packages you want. Whatever you do, make sure you don't break the template so proceed with caution. If you remove a package dependency, make sure you remove any dependent configuration or references in the project template's files. If you update a package to a newer version, make sure those dependent configurations are updated as well.</p>

<p>Take a look at the project template's <em>Scripts</em> folder. You see that little _references.js file?</p>

<p><img width="600" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-11-24/2012-11-24_2207.png" /></p>

<p>This is AFAIK a harmless example of things that can be left behind and out-of-sync with the package edits you make. Open the file (<em>run as administrator</em>) and update those references accordingly. The jQuery reference should now be the following:</p>

<blockquote>
  <p>/// &lt;reference path="jquery-1.8.2.js" /&gt;</p>
</blockquote>

<p>Ever wondered why you didn't have to be online to be able to create a new MVC project and consume all those packages? Then check this folder and be amazed:</p>

<blockquote>
  <p>C:\Program Files (x86)\Microsoft
  ASP.NET\ASP.NET MVC 4\Packages</p>
</blockquote>

<p>Obviously, the packages you want to support in your default project templates should be available there as well, so download those NuGet packages and extract them here. You can download the NuGet package after logging in to <a href="http://www.nuget.org">NuGet.org</a>: look for the package you want, select the version you need, and you'll notice a download link on the left side.</p>

<p><img width="600" alt="Download a NuGet packages from the Gallery" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-11-24/2012-11-24_2232.png" /></p>

<p>Once downloaded, unblock the package (right-click, properties, unblock), copy it to the packages directory (C:\Program Files (x86)\Microsoft ASP.NET\ASP.NET MVC 4\Packages). Next, unzip it, and remove all <em>garbage</em>. The relevant content is selected on the following screenshot. Ensure you rename the .nuspec file by adding the version in front of it, e.g. jquery.1.8.2.nuspec.</p>

<p><img alt="Relevant package contents" src="https://xavierdecosterblog.blob.core.windows.net/blog/2012-11-24/2012-11-24_2235.png" width="600"/></p>

<p>From now on, all newly created <em>default</em> MVC4 CSHTML Web projects will already contain the updated jQuery dependency.</p>
]]></content>
      <post-name type="text"><![CDATA[update-project-template-to-latest-nuget-packages]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="61" date-created="2012-12-12T10:05:03" date-modified="2012-12-12T10:05:03" approved="true" post-url="/2012/12/12/nuget-package-restore-from-a-secured-feed/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[NuGet Package Restore from a secured feed]]></title>
      <content type="text"><![CDATA[<p>One of the most frequently asked questions at <a href="http://www.myget.org">MyGet</a> is the following one (we have pending updates to our <a href="http://www.myget.org/site/Faq">FAQ</a> section):</p>

<p><em>How do I set up NuGet package restore against a private MyGet feed requiring authentication?</em></p>

<p>This is also one of the things you might end up doing when <a href="http://www.xavierdecoster.com/debugging-nuget-package-restore">debugging NuGet package restore issues</a>.</p>

<p>For public feeds, you only need to change the repository URL in the nuget.targets file to let your build server know from where it needs to fetch the packages.
For private feeds however, there are a few things you need to know.</p>

<h3>Which credentials should I use?</h3>

<p>At MyGet, we recommend you to create a separate account for your build agents and give it specific permission on your feed (e.g. readonly or read/write, but no additional permissions). </p>

<p>It is not a technical requirement though: you could simply use your personal account, but please be aware that in this case you share your credentials! </p>

<p>As you'll see in this post, you can store the credentials for the build service account on the build agent(s) without having to share them with anyone. Using a user's account for the build agent can break anyone's build if access for this user is revoked...</p>

<h3>Visual Studio will prompt for credentials</h3>

<p>As soon as you try to communicate with a secured package source in Visual Studio, it will prompt you for credentials.</p>

<p><img src="http://xavierdecosterblog.blob.core.windows.net/blog/2012-12-12/2012-12-12_1014.png" alt="alt text" /></p>

<p>So why do you get the following build error when using package restore?</p>

<p><img src="http://xavierdecosterblog.blob.core.windows.net/blog/2012-12-12/2012-12-12_1513.png" alt="Cannot prompt for input in non-interactive mode" /></p>

<h3>There's no non-interactive way to provide credential parameters</h3>

<p>NuGet package restore relies on the <a href="https://nuget.org/nuget.exe">NuGet.exe</a> commandline tool by using the <a href="http://docs.nuget.org/docs/reference/command-line-reference#Install_Command">install</a> command. The commandline will either prompt you for credentials (which isn't suitable for automated build scenarios), or will look for credentials in nuget.config file in <code>%AppData%\NuGet\nuget.config</code> (if you use the Non-Interactive option). </p>

<p>The latter looks like what you need in automated build scenarios, but requires you to store feed credentials on the machine, for the user account that will perform the build. This can become cumbersome if you have a multitude of solutions using this feature.</p>

<h3>Hierarchical NuGet.config doesn't take credentials into account (yet!)</h3>

<p style="font-weight:bold;">Edit: As of v2.2 released on Dec 12, it is possible to use hierarchical config files for this. <a href="http://www.xavierdecoster.com/nuget-package-restore-using-solution-specific">Check my follow-up post</a> on this matter.</p>

<p>The latest version of NuGet has support for hierarchical nuget.config files, which is an attempt to overcome the need to store everything on the machine. It allows you to have a solution-level NuGet configuration which should be taken into account during package restore. </p>

<p>This means that feed URL and credentials could be stored next to your solution instead of being pre-configured in the user profile. However, credentials aren't picked up (yet), and there's no easy way to store them (encrypted) into any nuget.config file other than the one in your roaming user profile (explained in the next section of this post).</p>

<p>This is a known issue which seems to be fixed in vNext of NuGet. Check <a href="http://nuget.codeplex.com/workitem/2718">this Codeplex issue</a> for more details. Not sure though whether this will be facilitated without having to copy-paste those encrypted credentials from one config to another.</p>

<h3>You can store feed credentials in your user-profile NuGet.config</h3>

<p>That's likely to be the easiest approach: as you register the package source URL, you might want to save the required credentials as well. This is however not exposed in the Visual Studio NuGet Package Manager extension, so you'll have to use the NuGet.exe commandline tool, which has a handy but fairly unknown <a href="http://docs.nuget.org/docs/reference/command-line-reference">config command</a> (anyone using a corporate proxy?) and <a href="http://docs.nuget.org/docs/reference/command-line-reference#Sources_Command">sources</a> command. The following gist illustrates a few of these options that should help you configure your secured feed, including credentials.</p>

<script src="https://gist.github.com/3205826.js"></script>
]]></content>
      <post-name type="text"><![CDATA[nuget-package-restore-from-a-secured-feed]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="62" date-created="2012-12-13T08:57:52" date-modified="2012-12-13T08:57:52" approved="true" post-url="/2012/12/13/nuget-package-restore-using-solution-specific/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[NuGet Package Restore using solution-specific NuGet.config]]></title>
      <content type="text"><![CDATA[<p>In my post on <a href="http://www.xavierdecoster.com/nuget-package-restore-from-a-secured-feed">how to restore packages from a secured feed</a>, I already anticipated an important fix in the upcoming 2.2 release of NuGet to further facilitate this using hierarchical config files. Well, today, that 2.2 version got released, so let's take a look at the hierarchical config approach in more detail.</p>

<p>The hierarchical configuration feature allows you to have a solution-level <code>NuGet.config</code> file which should be taken into account during package restore. For feed credentials, this wasn't the case until now.</p>

<p>When enabling NuGet package restore, you'll notice a <code>.nuget</code> folder is created in the solution directory. Inside that folder resides the solution-level NuGet.config. This config file can be used to deviate from the global NuGet.config file you'll find in your roaming user profile: <code>%appdata%\NuGet\NuGet.config</code>.</p>

<p>Now imagine you want to restore NuGet packages from a secured feed, for instance from <code>https://www.myget.org/F/mysecuredfeed/</code>, or any feed requiring basic authentication using a username and a password.</p>

<p>You'll need to point NuGet to this feed URL and provide the required credentials. There are only <a href="http://www.xavierdecoster.com/nuget-package-restore-from-a-secured-feed">a few options</a>, but as of today, when using v2.2 of NuGet, you might want to prefer this one.</p>

<p>In the .nuget\NuGet.targets (MSBuild) file, ensure package restore is pointing to your secured feed. Look for this ItemGroup section and add it in there:</p>

<pre class="brush: xml;auto-links:false;toolbar:false;">
&lt;ItemGroup Condition=" '$(PackageSources)' == '' "&gt;
    &lt;!-- Package sources used to restore packages. By default, registered sources under %APPDATA%\NuGet\NuGet.Config will be used --&gt;
    &lt;!-- The official NuGet package source (https://nuget.org/api/v2/) will be excluded if package sources are specified and it does not appear in the list --&gt;
    &lt;!--
        &lt;PackageSource Include="https://nuget.org/api/v2/" /&gt;
    --&gt;
    &lt;PackageSource Include="http://www.myget.org/F/mysecuredfeed/" /&gt;
&lt;/ItemGroup&gt;
</pre>

<p>By default, the solution-level NuGet.config file looks like this:</p>

<pre class="brush: xml;auto-links:false;toolbar:false;">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
  &lt;solution&gt;
    &lt;add key="disableSourceControlIntegration" value="true" /&gt;
  &lt;/solution&gt;
&lt;/configuration&gt;
</pre>

<p>We need to somehow add the feed credentials in there. I haven't found a <em>straightforward</em> way of doing so, other than the following one:</p>

<ol>
<li>Ensure the feed is registered in your global NuGet.config by running <br/><code>nuget sources add -name "My Secured Feed" -source https://www.myget.org/F/mysecuredfeed/</code>.</li>
<li>Next, register the feed credentials in the global NuGet.config by running <br/><code>nuget sources update -Name "My Secured Feed" -User &lt;username&gt; -Pass &lt;password&gt;</code>.</li>
<li>Open the global NuGet.config file (located in <code>%appdata%\NuGet\NuGet.config</code>) in a text editor, and copy the <code>packageSourceCredentials</code> section (only include the feed credential child-nodes you need for your solution). You'll notice the password is stored in an encrypted format.</li>
<li>Open your solution-level NuGet.config file (located in <code>$(SolutionDir)\.nuget\NuGet.config</code>), and paste the <code>packageSourceCredentials</code> section into the <code>configuration</code> root of the XML file.</li>
</ol>

<p>Your solution-level NuGet.config should now look similar to the following:</p>

<pre class="brush: xml;auto-links:false;toolbar:false;">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
  &lt;solution&gt;
    &lt;add key="disableSourceControlIntegration" value="true" /&gt;
  &lt;/solution&gt;
  &lt;packageSourceCredentials&gt;
    &lt;My_x0020_Secured_x0020_Feed&gt;
      &lt;add key="Username" value="username" /&gt;
      &lt;add key="Password" value="AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAtA/nIrdkAEaYf19cCBs6wgAAAAACAAAAAAAQZgAAAAEAACAAAABCszDHAgQ2OZASfFIGGmQKUTa4SwEqM9erKl1WoHsZDAAAAAAOgAAAAAIAACAAAACMsh26fEmwHSPz3DTzcEGuk+V/CjlAZWb2s5t2Tcr22BAAAADrMOh0Yn8FaydTiyWKIWD9QAAAAB9o2+fEdSaztWNgzjU1eBnI/aOjR95kKaJYMqF2d3LaOri6QUZ40Zm9kqa0RC/DkTTSMAr5DOES2dt0OmdiNi0=" /&gt;
    &lt;/My_x0020_Secured_x0020_Feed&gt;
  &lt;/packageSourceCredentials&gt;
&lt;/configuration&gt;
</pre>

<p>Et voilà! </p>

<p>That's all folks, happy packaging!</p>
]]></content>
      <post-name type="text"><![CDATA[nuget-package-restore-using-solution-specific]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="65" date-created="2013-01-03T00:00:00" date-modified="2013-01-03T00:00:00" approved="true" post-url="/2013/01/03/exit-2012-enter-2013/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Exit 2012, Enter 2013]]></title>
      <content type="text"><![CDATA[<p><p>I'm usually not the guy who spends too much time looking at the past, but 2012 has been so much fun I can't resist the temptation of summing up what I've enjoyed most.</p>  <ul>   <li><a href="http://www.myget.org" target="_blank">MyGet.org</a> - With <strong>6 feature-adding releases</strong> in 2012 and a few intermediate hotfix deployments along the way (from 1.0.x to 1.6.x), I've had a blast developing and moving this NuGet-as-a-Service platform to the next level. It’s great fun working with <a href="http://blog.maartenballiauw.be/" target="_blank">Maarten Balliauw</a> on our little pet project which experienced a few backlog explosions: glad we survived :). With tons of great stuff in the pipeline and numerous ideas yet to put on the drawing board, I'm sure this year will bring more MyGet goodness. </li>    <li><a href="http://bit.ly/ProNuGet" target="_blank">Pro NuGet</a> – In March 2012, <strong>my first book</strong> got released by Apress. Currently considering to write a vNext with more chapters or recipes dedicated to real world problems and scenarios. </li>    <li><a href="http://www.microsoft.com/belux/meet/default.aspx#Xavier+Decoster" target="_blank">MEET</a> – I’ve participated in lots of the 2012 events – including many Windows 8 hack-a-thons and an <a href="http://channel9.msdn.com/posts/Continuous-Integration-using-TFS11--NuGet" target="_blank">MSDN Live Webcast</a> - as part of the Microsoft Extended Experts Team, a group of enthousiastic community members in Belgium. <b>Proud to be part of MEET</b> and looking forward to more awesomeness in 2013 (including <a href="www.microsoft.com/belux/techdays/" target="_blank">TechDays Belgium</a> in March)! </li>    <li>Technical writing – I’ve written a few articles and 21 blog posts in 2012 (and a few more on the MyGet <a href="http://blog.myget.org" target="_blank">blog</a>), including <strong>my first MSDN Magazine article</strong> <a href="http://msdn.microsoft.com/en-us/magazine/jj851071.aspx" target="_blank">Top 10 NuGet (anti-)patterns</a> and a DeveloperFusion article on <a href="http://www.developerfusion.com/article/144809/continuous-integration-using-nuget-and-teamcity/" target="_blank">Continuous Integration using NuGet and TeamCity</a>. </li>    <li><a href="http://www.xavierdecoster.com/community" target="_blank">Talks</a> – I’ve been lucky to give <strong>my first talk abroad</strong>: I had a blast at <a href="http://www.slideshare.net/xavierdecoster/ugialtnet-organize-your-chickens-nuget-for-the-enterprise" target="_blank">UgiAlt.NET</a> in Milan (great interactive audience!). I’d love to speak more in 2013 starting with the <a href="http://warmcrocconf.net/xavier.aspx" target="_blank">Warm Crocodile Conference</a> (Copenhagen) in a few weeks where I’ll be giving 2 sessions on NuGet. </li> </ul>  <p>In my day-to-day job as a <a href="http://www.realdolmen.com" target="_blank">RealDolmen</a> consultant, I’ve been working on <a href="http://www.nuget.org" target="_blank">NuGet</a>/ALM (both with TFS and TeamCity), I’ve set up an on-premise <a href="http://www.symbolsource.org" target="_blank">SymbolSource</a> repository, and delivered my first SignalR project in production. Much of this work has resulted in new ideas for MyGet and 15 issues logged for NuGet (I whish I could contribute more code instead, but hey, it's a start). Let’s hope some more Azure goodness can be added to the mix as well in 2013!</p>  <p>It’s really rewarding to be part of such great community, and a source of inspiration going forward. Also thank you <a href="http://ferventcoder.com" target="_blank">Rob Reynolds</a> for the interesting chats about <a href="http://www.chocolatey.org" target="_blank">Chocolatey</a> and other cool stuff; I owe you a beer if we get the chance to meet. <strong>Thanks to all of you</strong> for all the stuff I learned from you! Sharing is caring :) Let's get the best out of 2013!</p></p>
]]></content>
      <post-name type="text"><![CDATA[exit-2012-enter-2013]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="66" date-created="2013-01-14T12:17:59" date-modified="2013-01-14T12:17:59" approved="true" post-url="/2013/01/14/team-foundation-services-binaries-folder/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Team Foundation Services Binaries folder]]></title>
      <content type="text"><![CDATA[<p>In order to add some custom post-build steps to a TFS Build process, it usually comes in handy - might sound as a surprise - to get a hold on the produced output of that build. If you're familiar with Team Foundation Server and the way it deals with the project output, you know I'm talking about the infamous "Binaries" folder where all produced output gets copied to.</p>

<p>Many problems extending the build process find their origin in this rather annoying convention. Imagine for instance you want to create NuGet packages in a post-build step (<a href="http://www.xavierdecoster.com/nuget-tfs-preview-a-challenging-combination">I already told you it's a bit of a challenge</a>). Let's say you want to target certain *.csproj files with an associated *.nuspec manifest, containing metadata that should get merged with the data NuGet is able to derive from the project. Let's say you want to add some extra files (e.g. a readme.txt, some PowerShell scripts...) to the produced NuGet package. Any idea on how the .nuspec file should look like? Any idea where to point the <file src="..."/> element at?</p>

<p>Preferably, you'd like to recreate the package on your development machine as well, for testing purposes, without having to redirect the .nuspec file elements, or any MSBuild property involved in these instructions. This is cumbersome to say the least.</p>

<p>Looking at TFServices, it seems that the Binaries folder got relocated. AFAIK the new location of the Binaries folder is the following one: C:\a\bin. However, I can't find any useful documentation on it. Why the 'a' in the path, should we anticipate a 'b' some day? Why not just C:\bin? What's the underlaying folder structure look like, if any? The Binaries path got shortened, which is a good thing! But a little documentation could 've been nice... (and if I can't find it in any search results on page 1, it's not documented IMO).</p>

<p><strong>Edit:</strong> As Justin points out in a comment to this post, this is considered an implementation detail and as such undocumented as it isn't part of the public contract. The 'a' stands for 'agent'.</p>

<p>So here's a little <a href="https://gist.github.com/4529586">gist</a> I produced to scan the Binaries directory (or any directory for that matter), allowing you to <strong>investigate its contents in the build logs</strong>.</p>

<p>Simply add the following statement anywhere in your MSBuild files where you want the Task to be executed, preferably post-build in the case of the Binaries folder :)</p>

<pre><code>&lt;DisplayBinariesFolder RootFolder="$(OutDir)"/&gt;
</code></pre>

<p>And here's the MSBuild task itself:</p>

<script src="https://gist.github.com/4529586.js"></script>

<p>Hope this helps anyone!</p>
]]></content>
      <post-name type="text"><![CDATA[team-foundation-services-binaries-folder]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="67" date-created="2013-01-17T06:56:36" date-modified="2013-01-17T06:56:36" approved="true" post-url="/2013/01/17/warm-crocodile-conference-slides/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Warm Crocodile Conference slides]]></title>
      <content type="text"><![CDATA[<p>I'm really happy I got the opportunity to talk at the Danish Warm Crocodile Conference this week. I loved the enthousiasm and interactivity with the audience, asking some really good questions as well (resulting in some of you getting a free copy of our <a href="http://bit.ly/ProNuGet">Pro NuGet</a> book), so thanks for that Dear Audience!</p>

<p>Below you can find my slides for the two talks I did on NuGet:</p>

<p><strong>Organize your chickens: NuGet for the Enterprise</strong></p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/16028732" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/xavierdecoster/organize-your-chickens-nuget-for-the-enterprise-16028732" title="Organize your chickens - NuGet for the Enterprise" target="_blank">Organize your chickens - NuGet for the Enterprise</a> </strong> from <strong><a href="http://www.slideshare.net/xavierdecoster" target="_blank">Xavier Decoster</a></strong> </div></p>

<p><strong>NuGet (Anti-)Patterns: Tales from the Trenches</strong></p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/16022684" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/xavierdecoster/nuget-antipatterns-tales-from-the-trenches" title="NuGet (Anti-)Patterns - Tales from the Trenches" target="_blank">NuGet (Anti-)Patterns - Tales from the Trenches</a> </strong> from <strong><a href="http://www.slideshare.net/xavierdecoster" target="_blank">Xavier Decoster</a></strong> </div></p>

<p>Obviously the slides don't tell the whole story, otherwise there would be no talk :) I also want to stress that I'm just a guy with an opinion sharing a few experiences and lessons learned using NuGet on various occasions. There obviously might be alternative paths towards a solution depending on context, or you might have a different opinion on some of my points, but I'm not stopping you from challenging me :-) </p>

<p>Links to topics touched in these sessions:</p>

<ul>
<li><a href="http://www.nuget.org">NuGet</a></li>
<li><a href="http://www.semver.org">Semantic Versioning (SemVer)</a></li>
<li><a href="http://www.myget.org">MyGet</a></li>
<li><a href="http://www.chocolatey.org">Chocolatey</a></li>
<li><a href="www.octopusdeploy.com">OctopusDeploy</a></li>
</ul>

<p>I hope you liked the sessions and perhaps until next time!</p>
]]></content>
      <post-name type="text"><![CDATA[warm-crocodile-conference-slides]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="68" date-created="2013-01-31T00:00:00" date-modified="2013-01-31T00:00:00" approved="true" post-url="/2013/01/31/nuget-package-analysis-encouraging-semantic-versioning/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[NuGet Package Analysis: Encouraging Semantic Versioning]]></title>
      <content type="text"><![CDATA[<p><p>If you've been in one of my recent talks or follow my blog or Twitter ramblings, you might have noticed I'm quite a fan of adhering to the <a href="http://semver.org">Semantic Versioning</a> specification. I find it particularly useful as a means to communicate changes in your API towards your package consumers who in turn will be able to set proper expectations about what they'll get when updating a certain package. It also enables NuGet to be smarter about package updates (e.g. Update-Package <a href="http://docs.nuget.org/docs/reference/package-manager-console-powershell-reference">–Safe</a>). So in short, I don't see any reason to deviate from SemVer.
</p><p>However, not everyone knows about SemVer and definitely not all of us are applying the SemVer scheme to the packages they produce. Simply take a look at the <a href="http://www.nuget.org">NuGet Gallery</a> and look for a package that has a non-SemVer version, it will take you less than a page scroll to find one (e.g. a version in the MSDN format <a href="http://msdn.microsoft.com/en-us/library/51ket42z.aspx">major.minor.build.revision</a>).
</p><p>There are two major impediments at the moment when it comes to SemVer and NuGet:
</p><ul><li>Not everyone applies SemVer to their packages
</li><li>NuGet doesn't (yet) fully support the SemVer specification
</li></ul><h1>Not everyone produces SemVer packages
</h1><p>I recently noticed this tweet from Steve Bohlen:
</p><blockquote class="twitter-tweet"><p>posited: the fact that <a href="https://twitter.com/search/%23nuget">#nuget</a> tooling respects <a href="https://twitter.com/search/%23semver">#semver</a> but many pkg authors do not is a continued threat to its efficacy and success</p>&mdash; Steve Bohlen (@sbohlen) <a href="https://twitter.com/sbohlen/status/294453663987027968">January 24, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><p>
 </p><p>I agree with the statement in the sense that different versioning schemes on the same repository can cause trouble and are an impediment. The NuGet Gallery is a single public repository, currently hosting a mix of packages with different versioning schemes. It's really hard to support both SemVer and legacy schemes and come up with a generic algorithm to define version precedence! Just take a look at this <a href="https://github.com/mojombo/semver/issues/51">discussion on GitHub</a> (home of the SemVer spec).
</p><p>Only package producers can control what type of versioning they'll use, but in my opinion it is up to the repository owner to validate packages before accepting them on the repository. That's why I built an extension that hooks into the NuGet commandline, which does have package validation logic applied during package creation. You can find it on my GitHub repository (check the readme for details): <a href="https://github.com/xavierdecoster/NuGet.PackageAnalysis">https://github.com/xavierdecoster/NuGet.PackageAnalysis</a>. For now it will only throw warnings (this is a limitation by the current version of the NuGet CLI which treats errors as warnings), but your build log should show something similar to this when violating SemVer:
</p><p><a href="https://github.com/xavierdecoster/NuGet.PackageAnalysis"><img src="http://www.xavierdecoster.com/get/013113_1144_NuGetPackag1_634952294442925653.png" style="max-width:750px;" alt="" border="0"/></a>
    </p><p>Don't be surprised to see this feature pop-up in a next version of <a href="http://www.myget.org/">MyGet</a> as a feed-setting.
</p><h1>NuGet &amp; SemVer are not aligned
</h1><p>I know this is on the roadmap and I'm sure it will get priority once the SemVer specification hits RTM (it's an RC at the moment). But until then, try to stick to SemVer as good as you can. Maybe the following table can help:
</p><div><table style="border-collapse:collapse" border="0"><colgroup><col style="width:75px"/><col style="width:75px"/><col style="width:254px"/><col style="width:361px"/></colgroup><tbody valign="top"><tr style="height: 25px"><td vAlign="middle" style="background: #0188b5; padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p style="text-align: center"><span style="color:white; font-size:12pt"><strong>SemVer</strong></span></p></td><td vAlign="middle" style="background: #0188b5; padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  none"><p style="text-align: center"><span style="color:white; font-size:12pt"><strong>NuGet</strong></span></p></td><td colspan="2" vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  none"> </td></tr><tr style="height: 25px"><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p style="text-align: center"><strong>v</strong></p></td><td vAlign="middle" style="background: #e2001a; padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p style="text-align: center"><strong>x</strong></p></td><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p>  SemVer Versioning Scheme</p></td><td vAlign="middle" style="background: #e2001a; padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  none"><p>  major.minor.patch[-prerelease][+build]</p></td></tr><tr style="height: 25px"><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p style="text-align: center"><strong>v</strong></p></td><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p style="text-align: center"><strong>v</strong></p></td><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p>  NuGet pre-release package</p></td><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  none"><p>  major.minor.patch-prerelease</p></td></tr><tr style="height: 25px"><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p style="text-align: center"><strong>v</strong></p></td><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p style="text-align: center"><strong>v</strong></p></td><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  solid black 1.0pt"><p>  NuGet release package</p></td><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  solid black 1.0pt; border-right:  none"><p>  major.minor.patch</p></td></tr><tr style="height: 42px"><td vAlign="middle" style="background: #e2001a; padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  none; border-right:  solid black 1.0pt"><p style="text-align: center"><strong>x</strong></p></td><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  none; border-right:  solid black 1.0pt"><p style="text-align: center"><strong>v</strong></p></td><td vAlign="middle" style="padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  none; border-right:  solid black 1.0pt"><p>  Legacy Versioning Scheme</p></td><td vAlign="middle" style="background: #e2001a; padding-top: 3px; padding-left: 3px; padding-bottom: 3px; padding-right: 3px; border-top:  none; border-left:  none; border-bottom:  none; border-right:  none"><p>  major.minor.build.revision</p></td></tr></tbody></table></div><p>Basically, it comes down to this:
</p><ul><li>Avoid 3 dots in your package version
</li><li>Avoid build numbers in your package version (unless you use the leading-zeros-prerelease-suffix trick, e.g. 1.0.0-alpha0001 – as explained in my MSDN Article "<a href="http://msdn.microsoft.com/en-us/magazine/jj851071.aspx">Top 10 NuGet (anti-)patterns</a>")
</li></ul><p>The NuGet Package Analysis <a href="https://github.com/xavierdecoster/NuGet.PackageAnalysis">SemanticVersionRule extension</a> I built might help you in avoiding this trap. Good luck!</p></p>
]]></content>
      <post-name type="text"><![CDATA[nuget-package-analysis-encouraging-semantic-versioning]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="69" date-created="2013-03-18T00:00:00" date-modified="2013-03-18T00:00:00" approved="true" post-url="/2013/03/18/introducing-a-nuget-exe-extension-for-package-source-discovery/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Introducing a NuGet.exe extension for Package Source Discovery]]></title>
      <content type="text"><![CDATA[<p><p>As we have reached 1500 NuGet feeds on <a href="http://www.myget.org">MyGet</a> for the first time – with some great stuff in our <a href="http://www.myget.org/gallery">Gallery</a> - we felt it's about time we make it even easier for people to discover them. Where NuGet makes it easy to discover packages, we want to push it further and make it easier to discover package sources as well. We've had numerous discussions with several people closely involved with the NuGet project and are quite happy with the outcome of our combined efforts: the NuGet <a href="http://psd.myget.org">Package Source Discovery</a> (PSD) spec. Thanks again <a href="http://www.hanselman.com/" target="_blank">Scott</a>, <a href="http://www.haacked.com" target="_blank">Phil</a>, <a href="http://jeffhandley.com" target="_blank">Jeff</a> and <a href="http://codebetter.com/howarddierking/" target="_blank">Howard</a> for your most valuable input and feedback! Be sure to check the <a href="http://blog.maartenballiauw.be/post/2013/03/18/NuGet-Package-Source-Discovery.aspx">announcement on Maarten's blog</a>!
</p><h1>The Spec
</h1><p>Before you think <em>here we go again with yet another spec</em>, let us explain the following first: we are recycling an existing spec (<a href="https://github.com/danielberlinger/rsd">RSD</a> – Really Simple Discoverability) and reuse existing standards (<a href="http://dublincore.org/documents/2012/06/14/dcmi-terms/?v=elements">Dublin Core</a>). We simply combined them into something suitable for package source discovery. This spec has a single goal in mind: make it as easy as possible to discover package sources (and its metadata).
</p><p>The spec is flexible enough to support very basic as well as more complete implementations:
</p><ul><li>Most basic scenario: define a relationship between your own domain/web site and a NuGet package source by directly pointing to it
</li><li>Most intelligent scenario: define a relationship between your own domain/web site and a NuGet package source by exposing a <em>discovery endpoint</em>
        </li></ul><p>Obviously you can combine the above, or have multiple relationships defined in a single HTML page. We started with a simple NuGet package that adds a new PowerShell cmdlet <a href="http://nuget.org/packages/DiscoverPackageSources/"><em>Discover-PackageSources</em></a> to your NuGet Package Manager console. We also implemented a nuget.exe commandline extension: the <a href="https://github.com/myget/PackageSourceDiscovery/tree/master/src/Extension">NuGet.PackageSourceDiscovery.Extension</a>. Again, all sources are available on our <a href="https://github.com/myget/PackageSourceDiscovery">GitHub repository</a>. Also check the <a href="https://github.com/myget/PackageSourceDiscovery/wiki">project Wiki</a> for further details.
</p><h1>The NuGet CLI Extension
</h1><p style="font-weight:bold;">Important note: this extension requires NuGet.exe v2.3+ (so grab it from <a href="http://build.nuget.org" target="_blank">http://build.nuget.org</a> or wait for the release).</p><p>I usually ship stuff as a NuGet package, however, for this one, I figured it was more appropriate to give you a PowerShell one-liner. Open a CMD prompt and run the following script:
</p><p><pre>@powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('http://bit.ly/PSD-ext-install'))"
</pre></p><p>No need to be afraid, the URL this script is pointing to is just a <a href="http://bit.ly/PSD-ext-install">Gist</a> containing some more PowerShell.
</p><p>Once you've installed the extension, it will be available whenever you run nuget.exe on your machine. You can easily verify this by running <em>nuget help</em>. Notice the new <em>discover</em> command?
</p><p><a href="http://www.xavierdecoster.com/get/031813_2013_Introducing1_634992344231492908.png" target="_blank"><img src="http://www.xavierdecoster.com/get/031813_2013_Introducing1_634992344231492908.png" alt="" style="max-width:750px;"/></a>
    </p><p>Now, let's see how you can use it: <em>nuget help discover</em>.
</p><p><a href="http://www.xavierdecoster.com/get/031813_2013_Introducing2_634992344237433220.png" target="_blank"><img src="http://www.xavierdecoster.com/get/031813_2013_Introducing2_634992344237433220.png" alt="" style="max-width:750px;"/></a>
    </p><p>Straightforward, isn't it? Let's put it to a test. You probably have guessed by now that my blog now also functions as a NuGet Package Source Discovery endpoint. But first, I want to see the configured NuGet endpoints on my machine: <em>nuget sources. </em>
    </p><p><a href="http://www.xavierdecoster.com/get/031813_2013_Introducing3_634992344240090728.png" target="_blank"><img src="http://www.xavierdecoster.com/get/031813_2013_Introducing3_634992344240090728.png" alt="" style="max-width:750px;"/></a>
    </p><p>Here goes: <em>nuget discover –Url <a href="http://www.xavierdecoster.com">www.xavierdecoster.com</a></em>.
</p><p>The feeds that were discovered are now added to your %appdata%\NuGet\NuGet.config.
</p><p><a href="http://www.xavierdecoster.com/get/031813_2013_Introducing4_634992344243373532.png" target="_blank"><img src="http://www.xavierdecoster.com/get/031813_2013_Introducing4_634992344243373532.png" alt="" style="max-width:750px;"/></a>
    </p><p>Obviously, we drafted <a href="http://blog.myget.org/post/2013/03/18/Support-for-Package-Source-Discovery-draft.aspx">support for this spec into MyGet</a> as well: read all about it on our blog!
</p><p>What happened under the hood? Check the sources of my blog: you'll find the following tag:
</p><p><pre>&lt;link rel="nuget" type="application/rsd+xml" src="http://nuget.xavierdecoster.com"/&gt;</pre>
</p><p>That URL is a simple 301 to a gist containing my RSD file. I don't even need to redeploy anything to maintain my discovery endpoint: I update the gist and redirect to the new raw gist. Done!
</p><h1>What's next?
</h1><p>Imagine a world where you could point the NuGet Package Explorer to your corporate web site and have it automagically discover the feeds you can use? Or have them added to your NuGet settings in Visual Studio all at once? And when authenticated, it could even discover your API keys and symbol server settings! It's up to you how far you want to take this.
</p><p>One could build a feed monitoring dashboard on top of it, or give me a widget I can plug into my web site, or … well, you get it, use your imagination <span style="font-family:Wingdings">J</span>
    </p><p>We really believe this type of functionality can add value to the NuGet ecosystem, and we'd love to see support for it in all NuGet clients. Send us your feedback, ideas, remarks and concerns. Raise your voice on Twitter, our <a href="http://blog.myget.org">blog</a> and our <a href="https://github.com/myget/PackageSourceDiscovery">GitHub repository</a>. Open an issue, start a discussion, submit a pull request, or even better: let us know about your implementations!</p></p>
]]></content>
      <post-name type="text"><![CDATA[introducing-a-nuget-exe-extension-for-package-source-discovery]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="70" date-created="2013-03-24T00:00:00" date-modified="2013-03-24T00:00:00" approved="true" post-url="/2013/03/24/deploying-to-azure-web-sites-using-nuget-package-restore-from-a-secured-feed/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Deploying to Azure Web Sites using NuGet package restore from a secured feed]]></title>
      <content type="text"><![CDATA[<p>
<b>
Update: This post pre-dates NuGet v2.7 which changed the NuGet package restore flow (it is now by default no longer part of the MSBuild process, but runs before the MSBuild process starts).
</b><br/>
The method explained below might no longer work and you'll need to upgrade your projects to the new NuGet package restore mechanism.<br/>
To do so:
<ol>
<li>Strip out the NuGet.targets file from your project(s)</li>
<li>Remove the .nuget folder (you can keep it but it's no longer needed)</li>
<li>Add this NuGet.config file into the path where your solution file resides:<br/>
<pre>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;configuration&gt;
  &lt;packageSources&gt;
    &lt;add key="Feed name" value="https://www.myget.org/F/feed_goes_here/api/v2/" /&gt;
  &lt;/packageSources&gt;
  &lt;activePackageSource&gt;
    &lt;add key="All" value="(Aggregate source)" />
  &lt;/activePackageSource&gt;
&lt;/configuration&gt;
</pre></li>
</ol>
</p>

<hr/>

<p><b>Original post:</b></p>

<p><p><a href="http://www.windowsazure.com/en-us/home/scenarios/web-sites/">Windows Azure Web Sites</a> has this great feature to automate deployments from various source code repositories, such as Team Foundation Service, Codeplex, GitHub, DropBox, BitBucket or a local Git repository. A popular support request we receive at <a href="http://www.myget.org">MyGet</a> is the following one: <strong>"I have this web site in my hosted source code repository. How can I auto-deploy my web site and have it restore my NuGet packages from my private MyGet feed?" </strong>This is quite a common scenario. This post will focus on the set up of having a private GitHub repository and a private MyGet feed.
</p><h1>Creating &amp; configuring the Azure Web Site for auto-deployment from GitHub
</h1><p>I have a private GitHub repository containing the <a href="http://blog.ntotten.com/2012/07/24/windows-azure-web-sites-modern-application-sample-cloud-survey/">CloudSurvey sample web application from the Azure Toolkit</a>. It requires a Sql database so I'll set up Windows Azure Sql Database in one go as well. This is a breeze really: walk through the following screenies: next – next – next – finish.
</p><p><img src="http://www.xavierdecoster.com/get/032413_1935_Deployingto1_634997505156711815.png" alt=""/>
    </p><p><img src="http://www.xavierdecoster.com/get/032413_1935_Deployingto2_634997505160930295.png" alt=""/>
    </p><p><img src="http://www.xavierdecoster.com/get/032413_1935_Deployingto3_634997505164992535.png" alt=""/>
    </p><p><img src="http://www.xavierdecoster.com/get/032413_1935_Deployingto4_634997505169367235.png" alt=""/>
    </p><h1>Understanding the Deployment Workflow
</h1><p>When you connect your Windows Azure Web Site to GitHub, a post-commit hook will be created and connect the GitHub repository with a newly created remote on Windows Azure. As soon as someone pushes changes to the GitHub repository, this post-commit hook will be called and inform the <a href="https://github.com/projectkudu/kudu">Kudu</a> service about this event. Kudu will in turn do its magic in order to build and deploy the web site.
</p><p><img src="http://www.xavierdecoster.com/get/032413_1935_Deployingto5_634997505173898166.png" alt=""/>
    </p><h1>NuGet Package Restore
</h1><p>Kudu takes care of the build and deployment fase. It fetches the changes linked to the commit that triggered the service, and prepares a local working environment. If your project is <a href="http://docs.nuget.org/docs/workflows/using-nuget-without-committing-packages">configured to use NuGet package restore</a>, then this will happen in a <em>pre-build step</em>. It is key to understand that NuGet package restore by default is <em>executed as part of the MSBuild process</em>. At least, that's how it works today.
</p><p>When you enable NuGet package restore on your solution, it downloads NuGet.targets (MSBuild), NuGet.exe and a NuGet.config. It also registers the NuGet.targets and some default settings into the project files that consume NuGet packages. Taking a closer look at the NuGet.targets file will reveal that a pre-build step is configured to call <em>nuget.exe install</em> on the packages.config file for the project being build. This install command is actually the restore command for the NuGet packages consumed by the project. It is <strong>configurable</strong> and <a href="http://docs.nuget.org/docs/reference/command-line-reference">documented</a>. In fact: so is the <a href="http://docs.nuget.org/docs/reference/nuget-config-file">NuGet.config</a> file!
</p><p>For the purpose of this post, I'll disable the default NuGet.org endpoint and redirect package restore to my private MyGet feed. The private MyGet feed requires basic authentication, so I'll need my MyGet credentials (you can set them in your MyGet user profile). The API key is not needed as that one's only required when pushing to the feed.
</p><p>Creating the private MyGet feed is just another walk in the park.
</p><p><img src="http://www.xavierdecoster.com/get/032413_1935_Deployingto6_634997505178897814.png" alt=""/>
    </p><p>Next, you'll need to adjust the NuGet configuration to point to this package source. Open the $(SolutionDir).nuget\nuget.targets file and make sure you have disabled the check for package restore consent:
</p><p><pre>&lt;!-- Determines if package restore consent is required to restore packages --&gt;<br/>&lt;RequireRestoreConsent Condition=" '$(RequireRestoreConsent)' != 'false' "&gt;false&lt;/RequireRestoreConsent&gt;</pre></p><p>You also need to configure the MyGet private feed to be used as the one and only package source. Open your local nuget.config file and edit it to something as shown below. Note that I'm using the new <strong>ClearTextPassword</strong> capabilities in the <a href="http://build.nuget.org/NuGet.exe">latest dev-build</a> (<a href="http://nuget.codeplex.com/SourceControl/network/forks/XavierDecoster/NuGet2991/contribution/4018#!/tab/comments" target="_blank">yeay, pull request accepted!</a>):
</p><p><script src="https://gist.github.com/xavierdecoster/0b8b6fa4986b18283373.js"></script></p><p>Because by default NuGet encrypts feed credentials using machine specific information, these encrypted credentials are not portable. There's no way to encrypt them on-the-fly on WAWS:
</p><ul><li>the Kudu process does not have write permissions on the global nuget.config
</li><li>if you use the new –ConfigFile option to store the encrypted credentials in your local nuget.config, it will fail as well because the Kudu process runs with impersonation enabled or without loading the user profile
</li></ul><p>I've got <a href="http://nuget.codeplex.com/SourceControl/network/forks/XavierDecoster/ClearTextOptionInSourcesCommand/contribution/4311" target="_blank">another accepted pull-request</a> to add the –StorePasswordInClearText option to the nuget.exe sources command, so you should be able to run the following in the future as well:
</p><p><pre>nuget.exe sources add –Name &lt;feedname&gt; -User &lt;username&gt; -Password &lt;password&gt; -ConfigFile nuget.config -StorePasswordInClearText</pre>
</p><p>One last thing: adjust the RestoreCommand in your nuget.targets file to the following:
</p><p><pre>&lt;RestoreCommand&gt;$(NuGetCommand) install "$(PackagesConfig)" -NonInteractive $(RequireConsentSwitch) -solutionDir "$(SolutionDir) "&lt;/RestoreCommand&gt;</pre></p><p>And that's it: you should be up and running now. Your build log should contain the following trace:
</p><p><pre>1>  Using credentials from config. UserName: xavierdecoster</pre></p><p>One last tip in case you hit any issues or you need more information to debug: all nuget.exe commands support a –verbosity switch, so simply add <em>–verbosity detailed</em> at the end of the commands in the nuget.targets file to get more verbose output. Can't wait for the v2.5 release :-)</p></p>

<h1>How's that secure?!</h1>

<p>Exactly... For now: clear text is the only supported credential format. I'd love to see a new section in the WAWS Management portal though: nuget.config overrides. Similar to how you can secure your storage credentials or other web.config settings. Assuming the default convention of $(SolutionDir)\.nuget\nuget.config, it cannot be that hard to build?</p>

<p>As for the credentials to use: you should use an account with limited permissions for package restore. At MyGet you can easily create an account with only read-access on your NuGet repository. Please do that and use that one instead of your admin account! Also, if you don't want people to get access to your private feed, simply use a private GitHub or BitBucket repository.</p>

<p>Anyway, many thanks to the NuGet team for the new -ConfigFile command option, and for hinting into sending another PR to add the -StorePasswordInClearText option as well!</p>
]]></content>
      <post-name type="text"><![CDATA[deploying-to-azure-web-sites-using-nuget-package-restore-from-a-secured-feed]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="71" date-created="2013-04-30T17:06:00" date-modified="2013-04-30T17:06:00" approved="true" post-url="/2013/04/30/a-resharper-plugin-to-detect-suspicious-semicolons-in-razor-views/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[A ReSharper plugin to detect suspicious semicolons in Razor views]]></title>
      <content type="text"><![CDATA[<p><p>I must admit, every now and then I find myself typing yet another semicolon in one of my razor views. I usually also hit the backspace key immediately after. But sometimes, a lone wolf semicolon gets through and is rendered in the resulting HTML page. I HATE this! It's the most silly bug report you'll ever spend time on. The effort-value ratio of filing the bug and resolving it is far below zero, but as it is a UI issue it most likely will get prioritized over other more important stuff. It's still waste. <a href="http://www.jetbrains.com/resharper/">ReSharper</a> is great at reducing waste, so I figured it'd be a good idea to have a ReSharper code inspection to highlight these semicolons and generate warnings. To my surprise I found this wasn't built-in so the idea of a plug-in was born.
</p><p>I've built <a href="https://github.com/xavierdecoster/Resharper-XML-Minifier">a very simple XML-minification plug-in for ReSharper</a> before, but didn't really plan the time for building another one. The <a href="http://www.jetbrains.com/resharper/download/">ReSharper SDK</a> is quite awesome, though it could use some more loose-coupling and perhaps be <em>NuGetized</em>? I popped the idea on Twitter to see if people would think it's useful or not, and in the hopes to find someone who had the time or was willing to assist. A huge thanks to Matt Ellis (<a href="https://twitter.com/citizenmatt">@citizenmatt</a>) and Igal Tabachnik (<a href="https://twitter.com/hmemcpy">@hmemcpy</a>) for your enthousiasm and sharing some very useful <a href="http://t.co/M369JEySWS">pointers</a> on how this plug-in could be implemented! Your input made it look like a no-brainer so I figured it couldn't harm to spend half-an-hour on it.
</p><p>The idea was to build a custom <a href="http://confluence.jetbrains.com/display/ReSharper/2.4+Daemons+and+Daemon+Stages+(R7)"><em>daemon</em></a> to analyze HTML <em>tokens</em> within a Razor file. Razor files can contain HTML, JavaScript, Razor-syntax, C#, CSS… and hence are considered a <a href="http://confluence.jetbrains.com/display/ReSharper/3.4+Multi-Language+PSI+(R7)">multi-language PSI</a> file. Bear with me, it's actually pretty straightforward and there's a great sample daemon implementation included in the SDK as well. It's a matter of understanding the concepts, reading the sample code, writing some similar code and hitting F5 a few times to debug your own implementation. This plug-in is only 5 classes!
</p><p>The SDK comes with a set of project and item-templates, pre-configured to provide the necessary "devenv.exe /ReSharper.Internal" instructions to unlock some ReSharper internal utilities in the Visual Studio instance you'll be debugging. The PSI Browser is a kind of document explorer and provides a ton of information on each element, character and its context within the file.
</p><p>That's how I found out I only needed to inspect the HTML tokens. It also showed me that a <em>whitespace</em> character is a separate token, thus splitting up HTML tokens containing text. Finding the <em>suspicious semicolon</em> (usually at the end of a Razor statement and at the beginning of meaningful HTML tokens) is as easy as finding the HTML token that only contains a single semicolon character. This covers about 95% of semicolon mistakes I believe, which is good enough for me at the moment. I also didn't want this plug-in to generate warnings for the semicolon character in code snippets, in <a href="http://www.w3schools.com/tags/ref_entities.asp">HTML entities</a> (such as <em>&amp;copy; </em>for instance), or in smileys ;-).
</p><p>This plug-in will provide warnings and highlighting when a suspicious semicolon has been detected in a Razor view, and a quick-fix to get rid of it ALT-ENTER-style.
</p><p><img src="http://www.xavierdecoster.com/get/040913_0959_AReSharperp1_635010983939422428.jpg" alt="" style="max-width:600px;"/>
    </p><p>Just file an issue on my <a href="https://github.com/xavierdecoster/ReSharper.RazorExtensions">GitHub repo</a> if you find something fishy, and note that I accept pull requests (and will happily add your name to the Author's tag of the NuGet package that this plug-in will ship in).
</p><p>JetBrains just <a href="http://blogs.jetbrains.com/dotnet/2013/04/new-features-in-the-latest-resharper-8-ea/" target="_blank">announced</a> the new ReSharper Extension Manager using a NuGet feed which is now <a href="http://blog.myget.org/post/2013/04/29/Create-a-list-of-favorite-ReSharper-plugins.aspx" target="_blank">also available as a package source preset on MyGet</a>. For those interested: I've hooked up my GitHub repository with my <a href="http://www.myget.org">MyGet</a> feed's POST hook, so I can automatically package-n-publish the plug-in for testing and release it with a click of a button. I'll do a follow-up post on how I did this, but for those who can't wait, there's useful info in <a href="http://blog.myget.org/post/2013/03/06/MyGet-Build-Services-Package-Versioning-Explained.aspx">this blog post</a> (I'm using a <a href="https://github.com/xavierdecoster/ReSharper.RazorExtensions/blob/master/build.bat">build.bat</a> file to hook into the build process).
</p><p>
To install my ReSharper extension, you need ReSharper 8 EAP or higher. For those on an earlier version of ReSharper, check for a compatible download in my GitHub repository.</p>
<img src="https://xavierdecosterblog.blob.core.windows.net/blog/2013-04-30/2013-04-29_1901.png" style="max-width:600px"/></p>

<p>Installing ReSharper plug-ins shipped as NuGet packages and get notifications about available updates: killer feature if you ask me!</p>
]]></content>
      <post-name type="text"><![CDATA[a-resharper-plugin-to-detect-suspicious-semicolons-in-razor-views]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="72" date-created="2013-04-29T00:00:00" date-modified="2013-04-29T00:00:00" approved="true" post-url="/2013/04/29/semantic-versioning-auto-incremented-nuget-package-versions/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Semantic Versioning & auto-incremented NuGet package versions]]></title>
      <content type="text"><![CDATA[<p><p>Any NuGet package is uniquely identified by a <em>package ID</em> and a <em>version</em>. If you've been to one of my talks or follow my blog, you know I'm quite a fan of <a href="http://semver.org">semantic versioning</a>. I even wrote <a href="http://www.xavierdecoster.com/nuget-package-analysis-encouraging-semantic-versioning">a NuGet package analysis rule</a> for it, which is now also built-in as <a href="http://blog.myget.org/post/2013/03/16/Require-semantic-versioning-for-packages-pushed-to-your-feed.aspx">a MyGet feed setting</a>. Versioning a NuGet package is fairly easy – stamping a NuGet package with a version, how hard can it be? – but when applied <em>continuously</em> as part of your automated builds, it might mess with your mind at some point.
</p><h1>Contradictio in terminis: auto-versioning a yet unknown semantic version
</h1><p>If you apply Continuous Integration on NuGet packages (I call it <a href="http://www.xavierdecoster.com/post/2011/07/18/continuous-package-integration-nuget-vs-source-control">Continuous Package Integration</a>), you are basically producing NuGet packages as part of your automated build process. These packages ideally end up on a NuGet repository specifically meant for CI/development purposes. This concept is a core feature of <a href="http://www.myget.org/">MyGet.org</a>: you can <a href="http://blog.myget.org/post/2013/03/22/Whats-new-in-Build-Services.aspx">connect</a> for instance your GitHub repository with our build services and continuously produce your NuGet packages upon each commit. They'll be hosted on the connected MyGet feed, and from there you can push them upstream to any other <a href="http://www.nuget.org">NuGet</a> feed (or yet another MyGet feed). To be able to host these continuously build packages, you should version them uniquely, e.g. add a build stamp! No complex logic there: use an auto-incremented number or a datetime-stamp for instance. You can automate this easily.
</p><p>On the other hand you have <a href="http://semver.org">Semantic Versioning</a> which is a very pragmatic approach towards versioning: it gives a meaning (semantics) to each version number. The major, minor and patch version numbers are defined based on the changes you <em>did</em> between two releases. In other words: you only know for sure what changes you did until you have frozen the code base, which actually happens at release-time (I mean, why delay it further?).
</p><p>The contradiction is hitting you right in your face at this point:
</p><ul><li>Auto-increment a build stamp (part of the version number)…
</li><li>… on a yet unknown semantic version? Wait! What?
</li></ul><p>How can I auto-increment an unknown version?
</p><h2>Adding NuGet to the mix
</h2><p>Now, if the above is causing you trouble, it gets even more complicated. The following is a slide I use in my anti-patterns talk which sums it up in a single overview. The "legacy" versioning scheme mentioned on the slide is the one you'll find on <a href="http://msdn.microsoft.com/en-us/library/51ket42z(v=vs.110).aspx">MSDN</a>.
</p><p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2013-04-30/nuget_semver_comparison.png" alt="" style="max-width:600px;"/>
    </p><p>That's right: NuGet – at this point – does not <em>fully</em> support SemVer yet. I know it is coming and when it is there you'll get a new post from me, promised! But for now, you need to be aware of where the NuGet versioning algorithm differs from SemVer.
</p><h1>But I want to do this the "right" way!
</h1><p>So do I! I think – for now – there is not really a <em>right</em> way, at least it doesn't feel like that to me. The latest SemVer spec has improved guidance in terms of adding <em>metadata</em>. A build stamp actually is just a piece of metadata, it has <em>no semantics</em> whatsoever. It makes your build unique, and you can maybe trace it back to your VCS commits or work items. But it doesn't mean anything to the consumer of your package! Lovely approach, I couldn't agree more!
</p><p>As long as NuGet doesn't support this spec to its full extent, it just doesn't feel <em>right</em>. However, the approach I explain below doesn't feel <em>wrong</em> either. It is a little bit of a hack, I agree: I'll be abusing the pre-release tag for this. But CI packages aren't full releases anyway, are they? Only if you decide to <em>promote</em> a given CI package to the release repository and strip off the pre-release tag, you end up with a release (note: no recompilation). Actually, you <em>don't have to</em> strip it from its pre-release tag, you're free to promote pre-releases for consumption as well. I'm not violating any of this in my approach for CI package versioning.
</p><h2>Why don't you use the revision number for CI?
</h2><blockquote><p>"Oh, I know, let's add a 4<sup>th</sup> number – the revision number – this is perfectly fine <a href="http://msdn.microsoft.com/en-us/library/51ket42z(v=vs.110).aspx">according to MSDN</a>!"
</p></blockquote><p>Please… don't! Either you apply SemVer, or you don't. SemVer doesn't have a revision number. Actually, <a href="http://msdn.microsoft.com/en-us/magazine/jj851071.aspx">using the revision number for NuGet packages is an anti-pattern</a> in my book.
</p><p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2013-04-30/nuget_semver_comparison2.png" alt="" style="max-width:600px;"/>
    </p><blockquote><p>"But NuGet supports it!"
</p></blockquote><p>Yep, but are you aware that a version with a revision number is considered higher than a version without a revision number? Once there is a package with a 4<sup>th</sup> version number in you repository, your repository is no longer SemVer-compliant. A package with version 1.2.1.20130429 will always be considered newer than 1.2.1. I'm sure you like a proper release version and prefer 1.2.1 for the actual release? Also, you can't include any dots in the pre-release tag. Oh, and it's not even supported by SemVer, which is the topic of this post!
</p><p>As stated earlier, your package consumer doesn't care about the build stamp, it's meaningless to them, so why would you bother them (and yourself?) with it?
</p><h2>Change the package ID!
</h2><p>Again, don't! It's like changing the assembly name instead of the version. And these packages can co-exist on the same repository! And before you come up with anything else, please: <a href="http://msdn.microsoft.com/en-us/magazine/jj851071.aspx">read my NuGet (anti-)patterns article on MSDN</a>
        <span style="font-family:Wingdings">J</span>
    </p><h2>Hijacking the pre-release tag
</h2><p>No revision number then. What else do we have: the pre-release tag. Let's abuse it in a righteous way: let's add the build metadata to the pre-release tag. The pitfall here is to make sure we don't brake package sorting:
</p><ul><li>Datetimestamps are easy if you have a fixed format: you can come up with something like –pre201304291755 (heh, 24h time scheme proves useful after all <span style="font-family:Wingdings">J</span>)
</li><li>Auto-incrementing number is a little harder, but still possible. I'll explain this one below.
</li></ul><p><strong>Fact: NuGet sorts pre-release tags alphabetically.</strong> (Technically: <a href="http://docs.nuget.org/docs/Reference/Versioning">in lexicographic ASCII sort order</a>)
</p><p>This effectively means that the following package precedence definition is true: 1.0.0-alpha2 &gt; 1.0.0-alpha10. Oops! We need leading zeros: 1.0.0-alpha02 &lt; 1.0.0-alpha10. Much better. But wait, how do I know how many leading zeros I need? Answer: you don't! Pick a number which is high enough: do you make 100 builds between two releases? 1000? More? Here's the thing: MyGet build services does this for you. No need to worry about the leading zeros, we use 5 digits for the auto-increment by default. You need more? Add another one in front of the placeholder and change it manual if you max out. Note that we will improve this further as soon as full SemVer support is available in NuGet.
</p><p><img src="http://www.xavierdecoster.com/get/042913_1149_SemanticVer3_635028329532561185.png" alt=""/>
    </p><h1>But how do I decide what SemVer to use for vNext?
</h1><blockquote><p>"I just started working on vNext after my 0.11.1 release. What semantic version should I use for my CI builds?"
</p></blockquote><p>The minimum required SemVer version increment is a patch release: start from <strong>0.11.2</strong>-CI00001 and see from there. Also, it's totally fine to increment the SemVer part between 2 sequential pre-releases, e.g. 0.11.2-CI00001 --&gt; 0.12.0-CI00001. Just take into account that only a single SemVer number can be incremented by a single digit between two releases: either you increment the major, the minor or the patch version by 1 (so from 0.11.1 to 0.12.0 is OK, from 0.11.1 to 0.12.1 is not).
</p><p>So you start working on vNext?
</p><ul><li>Reset the build counter
</li><li>Increment the patch number (or the minor or major number, it depends how you look at a release being a hotfix or adding functionality, I tend to take a pessimistic approach here as I can always increment but never decrement)
</li></ul><p>You can apply these principles in any CI tool, it's up to you which one you pick. From experience I can tell you TeamCity is very flexible in supporting this, for TFS you'll need to customize the workflow or go MSBuild all the way. Furthermore, all of the concepts explained in this post are fully supported on MyGet: <a href="http://blog.myget.org/post/2013/03/06/MyGet-Build-Services-Package-Versioning-Explained.aspx">there's a how-to on our blog</a>.
</p><p>Happy packaging!</p></p>
]]></content>
      <post-name type="text"><![CDATA[semantic-versioning-auto-incremented-nuget-package-versions]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="73" date-created="2013-05-10T13:07:00" date-modified="2013-05-10T13:07:00" approved="true" post-url="/2013/05/10/commit-push-consume-continuous-delivery-of-resharper-extensions/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Commit, Push, Consume: continuous delivery of ReSharper extensions]]></title>
      <content type="text"><![CDATA[<p><p>I've recently <a href="http://www.xavierdecoster.com/a-resharper-plugin-to-detect-suspicious-semicolons-in-razor-views">announced my ReSharper Razor plugin</a> and published the EAP package to the brand new ReSharper Plugin feed. I've originally built it against the ReSharper 7 SDK and only recently added support for the <a href="http://confluence.jetbrains.com/display/ReSharper/ReSharper+8+EAP">ReSharper 8 EAP SDK</a>. One of the questions I asked myself when I built the R# 7 version was: how do I ship it? I was quite thrilled to receive an email from Matt Ellis (<a href="https://twitter.com/citizenmatt">@citizenmatt</a>) inviting me to take a look at the latest SDK bits which included the new NuGet-based Extension Manager! In this post I want to show you how I'm using free tools to develop, build, package, test &amp; publish a ReSharper plugin.
</p><h1>The missing link?
</h1><p>The plugin obviously is open source. The source repository for this plugin can be found on GitHub: <a href="https://github.com/xavierdecoster/ReSharper.RazorExtensions">https://github.com/xavierdecoster/ReSharper.RazorExtensions</a>.
</p><p>One of the first things I do when starting a new project is setting up Continuous Integration. Yes! Even for a little OSS pet project! In this case, the output of my build should be a NuGet package containing the plugin, so I need a repository to serve these CI packages for consumption to facilitate testing. Each GitHub repository has this great feature called <a href="https://help.github.com/articles/post-receive-hooks"><em>Post-Receive Hooks</em></a> which allows you to trigger another service whenever someone commits to the repository. Sounds useful, right?
</p><p>Let's rephrase that: whenever GitHub triggers a service, it should <em>build</em> the sources, <em>package</em> the plugin and <em>publish</em> it on a NuGet feed for consumption. I know another free service for that: <a href="http://www.myget.org/">MyGet</a>!
</p><p>MyGet "Wonka" <a href="http://blog.myget.org/post/2013/03/22/Whats-new-in-Build-Services.aspx">Build Services</a> allows you to connect your GitHub repository to a MyGet feed. It is designed to take care of building, testing, packaging and publishing <em>consumables</em>. I like to think in terms of <em>consumables</em> and <em>consumers</em>: don't try to build and package your enterprise web sites on there. We're likely missing some fancy SDKs anyway and we refuse to install Visual Studio <span style="font-family:Wingdings">J</span> For this scenario however it's perfect! But I'm biased <span style="font-family:Wingdings">J</span>
    </p><h1>Connecting the services
</h1><p>To develop a ReSharper plugin you need to reference the ReSharper SDK. It's not available on NuGet, so you'll need to download the MSI. It comes with some nice project and item templates for Visual Studio, and the SDK is quite large. My plugin only used a limited set of binaries from this SDK so I decided to commit them into Git (yeah, I know, bite me…). It's for the greater good, as the SDK won't be installed on the build agent and isn't available as a NuGet package to restore.
</p><p>When you're a MyGet feed owner, you can add and configure a <em>build source</em> for your feed. Click on the <em>Add from GitHub</em> button and select the repository you want.
</p><p><img src="http://www.xavierdecoster.com/get/043013_2028_CommitPushC1_635029505354155325.png" alt="" style="max-width:600px;"/>
    </p><p>You'll need to authorize MyGet to get access to your GitHub repository, and you'll be prompted with a dialog to select the repository you want to connect to.
</p><p><img src="http://www.xavierdecoster.com/get/043013_2028_CommitPushC2_635029505359311245.png" alt="" style="max-width:600px;"/>
    </p><p>We'll select the master branch by default, but you can obviously change that if you want. You don't need to edit anything else on this build source for now as you're already presented with a HTTP POST hook URL.
</p><p><img src="http://www.xavierdecoster.com/get/043013_2028_CommitPushC3_635029505361654845.png" alt="" style="max-width:600px;"/>
    </p><p>Next up, connect your build source to GitHub. Browse your GitHub repository settings and look for the Service Hooks tab. There you're able to enter a <em>WebHook URL</em> as shown below. This URL will be hit with a POST request whenever someone pushes to your GitHub repository and passes some information about the push event.
</p><p><img src="http://www.xavierdecoster.com/get/043013_2028_CommitPushC4_635029505365248365.png" alt="" style="max-width:600px;"/>
    </p><p>This provides enough information to MyGet in order to clone this repository and run a build. MyGet Build Services uses a conventional approach and selects one of the following artifacts in order of precedence:
</p><ol><li>Build.bat (or build.cmd or build.ps1)
</li><li>MyGet.sln
</li><li>Any other .sln
</li><li>All .csproj files (or other project types)
</li><li>All .nuspec files
</li></ol><p>It is up to you to ensure your repository is in a suitable format for an automated build. If you like full control over the build process, then you'll be happy to find a <a href="https://github.com/xavierdecoster/ReSharper.RazorExtensions/blob/master/build.bat">build.bat file in my repository</a>. That's it, whenever I push a commit to my GitHub repository, a MyGet build will be triggered: it will compile my sources, run any tests available, create a NuGet package for the plugin in the <a href="http://confluence.jetbrains.com/display/ReSharper/1.9+Packaging+%28R8%29">ReSharper plugin package format</a>, and push the package on my MyGet feed for consumption.
</p><h1>Consuming the plugin from a MyGet feed
</h1><p>Open the ReSharper Extension Manager (of all places, it's available in ReSharper &gt; Extension Manager), and click on <em>Settings</em>. Just as with the NuGet Visual Studio extension, the ReSharper Extension Manager allows you to configure any NuGet feed for consumption. Simply add your MyGet feed url into the list:
</p><p><img src="http://www.xavierdecoster.com/get/043013_2028_CommitPushC5_635029505369623085.png" alt="" style="max-width:600px;"/>
    </p><p>Save your settings and reopen the Extension Manager: you'll find your newly added feed in there. All CI packages you publish on that feed will be available for consumption.
</p><p><img src="http://www.xavierdecoster.com/get/043013_2028_CommitPushC6_635029505374466525.png" alt="" style="max-width:600px;"/>
    </p><p>Even better: ReSharper will notify you about available updates for your plugins!
</p><p><img src="http://www.xavierdecoster.com/get/043013_2028_CommitPushC7_635029505377278845.png" alt="" style="max-width:600px;"/>
    </p><h1>Release some!
</h1><p>As soon as you're satisfied with your plugin, you can release it to the masses. Here I'm going to use MyGet's <em>package sources</em> feature: any MyGet feed can have one or more upstream NuGet feeds. This allows for various scenarios such as aggregating feeds, filtering, proxying &amp; mirroring, but also <em>package promotion</em>.
</p><p>In order release a CI package, you need to promote a package to the ReSharper Plugin feed (and optionally change the package version, e.g. strip the pre-release tag). To be able to do this, you first have to configure the ReSharper plugin feed as an upstream package source. We just <a href="http://blog.myget.org/post/2013/04/29/Create-a-list-of-favorite-ReSharper-plugins.aspx">announced the availability of a new <em>preset</em></a> for this on the MyGet blog.
</p><p>Browse to your feed settings and select the Package Sources tab. Select <em>Add Package Source</em> and click on the <em>Preset</em> button in the top-left of the dialog. You'll find a new <em>ReSharper extension gallery</em> preset. Don't forget to configure your API key for the <a href="http://resharper-plugins.jetbrains.com/">ReSharper Gallery</a> or your package can't be pushed upstream as the request would be unauthorized.
</p><p><img src="http://www.xavierdecoster.com/get/043013_2028_CommitPushC8_635029505380559885.png" alt="" style="max-width:600px;"/>
    </p><p>Whenever you want to release a new version for consumption, simply promote your package to the release repository with a click of a button.<br/>
<img src="https://xavierdecosterblog.blob.core.windows.net/blog/2013-05-10_1504.png" style="max-width:600px;" alt="" />
</p><h1>Conclusion
</h1><p>Matt and the ReSharper team have really done a great job by adopting NuGet as a protocol for distributing plugins. It makes these plugins more discoverable and it's a breeze to install them or keep them up to date. As a plugin author (actually, any OSS developer), you should really leverage all the (often free for OSS!) tooling available: many organizations can only dream of such a streamlined development workflow. Releasing a new version of my plugin is really just a commit (or a pull request) away! Commit, push &amp; consume!</p></p>
]]></content>
      <post-name type="text"><![CDATA[commit-push-consume-continuous-delivery-of-resharper-extensions]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="74" date-created="2013-07-23T00:00:00" date-modified="2013-07-23T00:00:00" approved="true" post-url="/2013/07/23/how-to-nuget-package-restore-when-sharing-projects-between-solutions/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[How to: NuGet Package Restore when sharing projects between solutions]]></title>
      <content type="text"><![CDATA[<p><p>Although it is a situation I try to avoid, it is not uncommon to share project files between solutions. If you are using NuGet package restore on these solutions, and one or more of these shared projects is consuming NuGet packages, you'll likely hit issues. <a href="http://stackoverflow.com/questions/17797052/nuget-not-getting-missing-packages">This StackOverflow question</a> is an illustration of exactly this problem.
</p><h1>Symptoms
</h1><p>Developer A:
</p><blockquote><p> "I can't compile Solution2 anymore after pulling the latest version!"
</p></blockquote><p>Followed by:
</p><blockquote><p>"That's strange… it works on my machine." – Developer B
</p></blockquote><p>Instantly followed by handing out a Pink Sombrero™ to Developer B: (yes, you broke the build! Hopefully…)
</p><p><img src="http://www.xavierdecoster.com/get/072313_2304_HowtoNuGetP1_635102175057965339.jpg" alt=""/>
    </p><p>Many teams have lost time debugging this issue, and although I already have quite <a href="http://xavierdecoster.com/debugging-nuget-package-restore">an exhaustive checklist</a>, this particular issue is not covered as I never really had to deal with this one. I prefer to consume the NuGet package instead of sharing the project…
</p><h1>Example
</h1><p>Behold the following sample folder structure containing 2 solutions. <code>Solution2.sln</code> also references the existing <code>Library1.csproj</code> file (note that it is not inside the solution's root directory):
</p><p><img src="http://www.xavierdecoster.com/get/072313_2304_HowtoNuGetP2_635102175062339946.png" alt=""/>
    </p><p>Both solutions have package restore enabled. Solution1.sln has no issues at all.
</p><p><code>Solution2.sln</code> cannot build, because the referenced <code>Library1.csproj</code> project cannot reference its packages. This is tricky: <strong>package restore did work</strong>! But by convention, the packages consumed by <code>Library1.csproj</code> got installed into the solution's Packages folder, which in this case is <code>Solution2\Packages</code>. Package restore (behind the scenes <code>nuget.exe install</code> – horrible command name mismatch) does not <em>install</em> any packages: it downloads and extracts them. None of the package scripts are run, no content is injected, no references added.
</p><p>If you locally have both solutions and you restored the packages consumed by <code>Solution1.sln</code>, then you'll be in the situation of Developer B where <em>it works on your machine</em>. However, Developer A who only opened Solution2 and never built Solution1 will get build failures (as will the build server).
</p><h1>Root Cause
</h1><ol><li>NuGet Package Restore is MSBuild-based at the moment. It is being redesigned so I expect great improvements in the foreseeable future.
</li><li>You're sharing projects and code between solutions. Why not package them instead? Wait, here comes the "debugging experience complex"… It is so convenient to just reference the damn code. I agree within the scope of a <span style="text-decoration:underline">single</span> solution.
</li></ol><p>Sharing between multiple solutions? Here's the deal: set up continuous (package) delivery and use <a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-symbol-package">symbols packages</a> (or a symbols server as the one built-in to TFS). You can use <a href="http://www.symbolsource.org">SymbolSource.org</a> or <a href="http://xavierdecoster.com/setting-up-your-own-symbolsource-server-step-by-step">set up your own SymbolSource Server</a>. If you need more in order to debug your solution, then frankly you might want to rethink what you're sharing here… This smells like tight coupling and a missed opportunity to share a package.
</p><h1>Patching up the open wound
</h1><p>Although I'd strongly recommend taking a closer look at these projects you're sharing, a short term solution to your problem is also MSBuild-based. You'll need to tweak the package restore command per project. The easiest way to do this is by introducing a new MSBuild property and only deviate from the default conventions when absolutely required. The projects that will require a deviation are those that are being shared obviously.
</p><p>If you disregard the concerns I raised earlier in this post, then here's what I would do to fix this mess (quick-n-dirty style):
</p><ul><li>In <code>Solution1.nuget\nuget.targets</code>, add the following MSBuild property before the <code>&lt;RestoreCommand&gt;</code> element:
</li></ul><p><pre><span style="color:blue">&lt;</span><span style="color:#a31515">PackageRestoreDir </span><span style="color:red">Condition</span>=<span style="color:black">"</span>$(PackageRestoreDir) == ''<span style="color:black">"</span><span style="color:blue">&gt;</span><span style="color:black">$(SolutionDir)\Packages</span><span style="color:blue">&lt;</span>/<span style="color:#a31515">PackageRestoreDir</span><span style="color:blue">&gt;</span></pre></p><ul><li>Within the same file, update the &lt;RestoreCommand&gt; by appending the following:
</li></ul><p><pre><span style="color:blue">&lt;</span><span style="color:#a31515">RestoreCommand<span style="color:blue">&gt;</span><span style="color:black">$(NuGetCommand) install … -o "$(PackageRestoreDir) "<span style="color:blue">&lt;</span>/</span><span style="color:#a31515">RestoreCommand<span style="color:blue">&gt;</span></span></span></pre></p><ul><li>In the Library1.csproj file, add the following MSBuild property (mind the order of precedence with &lt;SolutionDir&gt;):
</li></ul><p><pre><span style="color:blue">&lt;</span><span style="color:#a31515">SolutionDir </span><span style="color:red">Condition</span>=<span style="color:black">"</span>$(SolutionDir) == '' Or $(SolutionDir) == '<em>Undefined</em>'<span style="color:black">"</span><span style="color:blue">&gt;</span><span style="color:black">..\</span><span style="color:blue">&lt;</span>/<span style="color:#a31515">SolutionDir</span><span style="color:blue">&gt;</span><span style="color:black"></span><br/><span style="color:blue">&lt;</span><span style="color:#a31515">RestorePackages</span><span style="color:blue">&gt;</span><span style="color:black">true</span><span style="color:blue">&lt;</span>/<span style="color:#a31515">RestorePackages</span><span style="color:blue">&gt;</span><span style="color:black"></span><br/><span style="color:blue">&lt;</span><span style="color:#a31515">PackageRestoreDir</span><span style="color:blue">&gt;</span><span style="color:black">$(SolutionDir)..\Libraries\Packages</span><span style="color:blue">&lt;</span>/<span style="color:#a31515">PackageRestoreDir</span><span style="color:blue">&gt;</span></pre></p><p>Repeat the last step for each existing shared project you referenced in your second solution. The <code>&lt;PackageRestoreDir&gt;</code> should match the project reference and the default package restore directory of the main solution of that project.</p><p>You can download a sample solution <a href="https://xavierdecosterblog.blob.core.windows.net/blog/2013-07-24/multisolutionroot.zip">here</a>.
</p><p>Happy packaging!</p></p>
]]></content>
      <post-name type="text"><![CDATA[how-to-nuget-package-restore-when-sharing-projects-between-solutions]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="75" date-created="2013-09-26T14:33:33" date-modified="2013-09-26T14:33:33" approved="true" post-url="/2013/09/26/install-nuspec-with-intellisense/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Install-NuSpec with IntelliSense]]></title>
      <content type="text"><![CDATA[<p>If you have quite a few projects you want to get out on NuGet for the first time, it can be a little confusing to find a good starting point. My recommendation usually is to simply create a <a href="http://docs.nuget.org/docs/reference/nuspec-reference#Replacement_Tokens" target="_blank">tokenized</a> NuSpec and package your projects. Target a csproj file, and make sure there's a nuspec file in the same directory with the same name as the csproj file. NuGet will merge the two during package creation.</p>

<p>If you hate manipulating the file system for a single project, imagine doing this for 50 projects. Let's automate this task and preferably without leaving our Visual Studio environment. There's the NuGet Package Manager Console after all.</p>

<p>Well, there you go: <b>Install-Package NuSpec</b><br/>
<a href="https://github.com/myget/NuGetPackages/releases/tag/v3.0.0" target="_blank">Sources on GitHub</a></p>

<p>This package will install itself in the NuGet PowerShell profile, so you can immediately uninstall it, the new cmdlets will still be available. The following new cmdlets are available:</p>

<ul>
<li><b>Install-NuSpec</b> <i>&lt;ProjectName&gt; [-EnableIntelliSense] [-TemplatePath]</i></li>
<li><b>Enable-NuSpecIntelliSense</b></li>
</ul>

<p>Happy Packaging!</p>
]]></content>
      <post-name type="text"><![CDATA[install-nuspec-with-intellisense]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="76" date-created="2013-10-02T08:18:02" date-modified="2013-10-02T08:18:02" approved="true" post-url="/2013/10/02/awarded-mvp-visual-studio-alm/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Awarded MVP Visual Studio ALM]]></title>
      <content type="text"><![CDATA[<p>I was quite thrilled and surprised yesterday to receive an email notification with the subject "<i>Congratulations 2013 Microsoft MVP!</i>".<br/></p>

<div style="text-align:center;"><img src="https://xavierdecosterblog.blob.core.windows.net/blog/MVP-Logo.png" alt="MVP Logo"/></div>

<p>I'm really honored to receive this award and find great satisfaction in the fact that Microsoft and the Community are appreciating my efforts to share experiences and insights in terms of NuGet, Visual Studio and ALM in general.</p>

<p>I hope to keep up to your expectations and deliver quality in everything I do, and I'm really looking forward to see what the next 12 months will bring. Challenge accepted! :-)</p>

<p>Thank you Microsoft for the <a href="http://mvp.microsoft.com/en-us/overview.aspx" target="_blank">MVP award</a>. Thank you <a href="http://www.microsoft.com/belux/meet/" target="_blank">MEET</a> for the awesome work you do! Thank you Community for a great collaboration and for giving me the opportunity to grow as a developer and as a person. Thanks to everyone who supported me in my efforts, including family and friends, colleagues, MVPs and many more!</p>
]]></content>
      <post-name type="text"><![CDATA[awarded-mvp-visual-studio-alm]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="77" date-created="2014-03-06T09:07:46" date-modified="2014-03-06T09:07:46" approved="true" post-url="/2014/03/06/migrate-away-from-msbuild-based-nuget-package-restore/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Migrate away from MSBuild-based NuGet package restore]]></title>
      <content type="text"><![CDATA[<h1>Back in the days...</h1>

<p>
NuGet package restore used to be MSBuild-based. You had to explicitly enable it using the context menu on a Visual Studio solution: right-click the solution and select Enable NuGet Package Restore. In fact, if you go to the NuGet docs, you'll see that this scenario is still fully documented. A quick search for "package restore" will throw this old scenario "in your face", as it is the first hit in the search results.</p>

<p><a href="http://docs.nuget.org/search?q=package%20restore" target="_blank"><img alt="First hit in search results when looking for Package Restore on the NuGet docs" src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-03-06/searchresults.png" style="max-width:600px;"/></a></p>

<p>
To be fair, the page does highlight that there's a new way of doing this. But many people don't read. At best some look at the pictures. That's why I won't even include a screenshot of that page, as it is full of project setup details that no one should ever go through again. Instead, I'll give you a clear picture of what you should <strong>not</strong> do :)
</p>

<p><a href="https://xavierdecosterblog.blob.core.windows.net/blog/2014-03-06/dontdothis.png" target="_blank"><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-03-06/dontdothis.png" alt="Don't do this!" style="max-height:450px;"/></a></p>

<h1>You're doing it wrong!</h1>

<p>
I can't stress it enough. I'm a huge proponent of NuGet package restore! But if you follow this workflow, then <a href="http://blog.davidebbo.com/2014/01/the-right-way-to-restore-nuget-packages.html" target="_blank">please do it right</a>! (and <a href="http://blog.ploeh.dk/2014/02/03/using-nuget-with-autonomous-repositories" target="_blank">design for failure</a>, obviously).
</p>

<p><p>
The MSBuild-based NuGet package restore has issues. For one: it's MSBuild-based. This means that anything that happens during package restore is run within the MSBuild process, which is particularly annoying for packages that want to modify project files and inject MSBuild targets (as these aren't picked up until the next run).</p><p>The moment you manually enable NuGet package restore through the context menu, you're actually installing a few NuGet packages: <a href="https://www.nuget.org/packages/NuGet.Build/" target="_blank">NuGet.Build</a>, which depends on <a href="https://www.nuget.org/packages/NuGet.CommandLine/" target="_blank">NuGet.Commandline</a>. The <code>nuget.exe</code> along with a <code>nuget.config</code> and a <code>nuget.targets</code> file are created within a <code>.nuget</code> folder, and all projects that have NuGet package references will be modified to import the NuGet.targets file. The nuget.targets file ensures that nuget.exe is invoked <strong>during</strong> builds (as in: <strong>not before</strong> builds!).
</p></p>

<h1>The right way</h1>

<p>All you need to do is to make sure that your Visual Studio options allow NuGet to download any missing packages in a pre-build phase (note: even before MSBuild compilation starts!). I'm not going to rephrase step-by-step what you should do as <a href="http://blog.davidebbo.com/2014/01/the-right-way-to-restore-nuget-packages.html" target="_blank">David Ebbo already has a great post explaining all of this</a>!</p>

<p><img alt="Ensure NuGet is allowed to download missing packages" src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-03-06/options.png" style="max-width:600px;"/></p>

<p>If you're cloning a new project that did not commit any NuGet packages (and is not using the old MSBuild-based restore), then it just works!</p>

<h1>Migrating from the old way</h1>

<p>If you still have a <code>.nuget</code> folder in your repository, then <strong>please migrate away from it</strong>! Think about all those adorable kittens...</p>

<p>Did you know this has been <a href="http://docs.nuget.org/docs/workflows/migrating-to-automatic-package-restore" target="_blank">documented on the NuGet Docs</a> all along?! Follow this how-to and save yourself and everyone using your codebase some trouble and follow it step-by-step.</p>

<p>Even better: <a href="https://github.com/owen2/AutomaticPackageRestoreMigrationScript" target="_blank" style="font-weight:bold;">automate your migration using these awesome scripts</a>!</p>

<p>For those not using Visual Studio or perhaps not even on the Windows platform: a simple call to <code>nuget.exe restore *.sln</code> before calling the compiler does the trick as well (add it to your build script, or perhaps you can configure your IDE to do this for you before each build...).</p>

<h1>But... my precious (build server)</h1>

<p>As long as you did not set the environment variable <code>EnableNuGetPackageRestore=false</code> then you're good to go. (default: <code>EnableNuGetPackageRestore=true</code>)</p>

<p>The following tools support the new automatic package restore out-of-the-box and Just Work&#8482;!</p>

<ul>
<li>Anything based on Project Kudu (<a href="http://www.xavierdecoster.com/deploying-to-azure-web-sites-using-nuget-package-restore-from-a-secured-feed" target="_blank">Windows Azure Web Sites deployments</a>, Windows Azure Mobile Services C# backend, ...)</li>
<li><a href="http://docs.myget.org/docs/reference/build-services#Package_Restore" target="_blank">MyGet Build Services</a></li>
</ul>

<p>The next list of tools requires some minor modifications to the build process:</p>

<ul>
<li>Visual Studio Online / Team Foundation Server (<a href="http://blogs.msdn.com/b/dotnet/archive/2013/08/27/nuget-package-restore-with-team-foundation-build.aspx" target="_blank">how-to</a>)</li>
<li>TeamCity (<a href="http://blog.jetbrains.com/teamcity/2013/08/nuget-package-restore-with-teamcity/" target="_blank">how-to</a>)</li>
</ul>

<p style="font-weight:bold;">Note that you don't need to worry about development machines! As long as you all have the latest NuGet Visual Studio extension installed (as of NuGet v2.7).</p>

<p>Upgrading your NuGet extension is generally a good idea anyway, as there are lots of improvements in the latest versions!</p>

<h1>Going forward</h1>

<p>
Here's what I'd love to see happen going forward:
<ul>
<li>The NuGet Docs should by default show the new non-MSBuild-based package restore instructions. There are close to none, but this should be thrown in your face when looking for it.</li>
<li>Migration instructions should be clearly linked to.</li>
<li>The old MSBuild-based instructions should be archived, perhaps even removed.</li>
<li>Currently, when installing a NuGet package that injects MSBuild targets, you'll see the following piece of logic appear in your project files:<br/>
<pre>
  &lt;Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild"&gt;
    &lt;PropertyGroup&gt;
      &lt;ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.&lt;/ErrorText&gt;
    &lt;/PropertyGroup&gt;
    &lt;Error Condition="!Exists('..\packages\SomePackageId\Build\SomeMSBuild.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\SomePackageId\Build\SomeMSBuild.targets'))" /&gt;
  &lt;/Target&gt;
</pre>
This is horrible as it is suggesting you to do the wrong thing: you should call <code>nuget.exe restore</code> instead!</li>
<li>The context menu-item to manually enable NuGet package restore (MSBuild-based) should be completely removed from the extension. I don't see any reason to keep it. Do you? If you do, please <a href="https://nuget.codeplex.com/workitem/4019" target="_blank">comment on this CodePlex issue</a>, if you agree, then vote for it :)</li>
<li>Preferably, the next NuGet Visual Studio extension detects you are using the "old" restore option when you open a solution, and asks you to migrate/upgrade to the new way. Ideally, this removes the targets and import statements, and custom package sources and credentials are taken into account if they are in the nuget.config file.
</ul>
</p>

<p>I'm happy to take on an issue or send PR's for any of the above, but some of the bullet-points seem too big to me to be taken in as a PR.</p>
]]></content>
      <post-name type="text"><![CDATA[migrate-away-from-msbuild-based-nuget-package-restore]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="1077" date-created="2014-03-24T00:00:00" date-modified="2014-03-24T00:00:00" approved="true" post-url="/2014/03/24/semantic-versioning-state-your-intentions-please/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Semantic Versioning: State your intentions please!]]></title>
      <content type="text"><![CDATA[<p><p>I'm quite a fan of Semantic Versioning (<a href="http://www.semver.org">SemVer</a>). It is the most pragmatic approach towards software versioning that I know of. If you don't know about SemVer, then you should go read the spec now. However, it is not perfect. Mostly because people are not perfect and some aspects of the specification can be interpreted differently. Actually, the spec itself is pointing this out – and I quote:
</p><blockquote><p><span style="font-family:Arial; font-size:10pt">For this system to work, you first need to declare a public API. This may consist of documentation or be enforced by the code itself. Regardless, it is important that this API be clear and precise. Once you identify your public API, you communicate changes to it with specific increments to your version number.
</span></p></blockquote><p>Now, that's a big judgement call, isn't it? What is a public API? How do you define it in such way that it is clear to everyone without room for interpretation?
</p><h1>Recap: the semantic version format
</h1><p>I'm not going to explain the spec in detail here, but I want to quickly recap the most fundamental basics of it. SemVer has three version parts expressing semantics.
</p><p><pre>major.minor.patch</pre>
</p><p>I'm ignoring the metadata that can be appended (such as build stamps etc). It's just metadata after all, so not important in this context. Instead, I'm going to focus on the semantics here, because that's really what this spec is all about: semantics and intent. These three version parts are indicators of the author's intentions:
</p><ul><li>Major: incrementing this version part means that the author intends to indicate a breaking change in the public API (I'll try to define this public API later in this post)
</li><li>Minor: incrementing this version part means that the author intends not to break anything (and truly thinks he won't), but backwards compatible additions or changes to the public API have been introduced (at least, the intent here is that these things are backwards compatible)
</li><li>Patch: incrementing this version part means that the author intends not to break anything, and believes no changes to the public API happened. Furthermore, the author thinks you can safely upgrade to the latest patch release without any risks as changes are internal.
</li></ul><h1>Defining the public API
</h1><p>As simple as the SemVer format may sound, the devil's in the details. How do you assess that your intentions match with the changes you may have introduced in your new release?
</p><p>The first time you ever read the spec and start thinking about your <em>public API</em>, you'll likely limit your thinking to your code base and the public types and methods exposed in your libraries. Now that's obviously a good start, but reality is a little bit more complex. Let's assess the impact of the following, and these are real questions people ask themselves (rightfully!):
</p><ul><li>What if I don't change anything in my code base and only upgrade one of my dependencies?
</li><li>What if the internal behavior of a public method on a public type changed, but did not affect its signature? (eg: public bool Type.IsSecure now returns false instead of true)
</li><li>What if a type moved to another assembly without changing namespace or any of its publicly visible members? (so only the "packaging" of this type changed)
</li></ul><p>You can already tell that a <em>public API</em> likely shouldn't be defined solely by signatures and type visibility.
</p><p>First and foremost: this is just my personal perspective on things. This is what works for me and hopefully as well for anyone consuming the API's I create. If it doesn't work for you, then please don't hesitate to tell me why in the comments. If you have a better approach, then please share it with the world so I can learn from you.
</p><h2>SemVer is technology agnostic
</h2><p>SemVer is a set of pragmatic rules and tries to provide guidelines. However, it is also technology agnostic. On purpose! As much as I believe that the guidelines set forth in this spec are valuable, I also believe there's a need to define a standard definition of <em>public API</em> within the scope of a certain technology.
</p><p>In .NET, we have a long history of looking at assemblies as the release vehicle. History shows us that versioning assemblies can quickly become problematic, and the words <em>dependency hell</em> may come to mind. That's mainly because a release vehicle also brings technical limitations to the way your API can and will be referenced.
</p><ul><li>You apply strong naming? Why does that even exist? Oh, right, the Global Assembly Cache… Wait a minute, isn't that a Windows thing? Why should my <em>public API</em> care about that?
</li><li>You remember .NET Remoting? Then you're probably familiar with the <a href="http://msdn.microsoft.com/en-us/library/aa302331.aspx">breaking aspects</a> of changing version numbers...
</li><li>Moving a type to another assembly requires consumers to recompile against your new assemblies, so again: breaking (even without any changes to the API of the type being moved)!
</li></ul><p>And then along came NuGet! Another release vehicle. Some packages contain a single assembly, some contain multiple assemblies, and some contain none at all! This is where many people lose faith in SemVer and start asking questions similar to the ones I mentioned earlier in this post. In fact, the SemVer FAQ and issue list on GitHub is full of those questions and related discussions.
</p><h2>My definition for .NET development
</h2><p>I'm trying to define a strict public API in an attempt that anyone consuming it has a clear understanding of what to expect. I'll restrict my definition to any .NET API that ships as an assembly (or set of assemblies) through NuGet. Why? Because I'm taking into account any changes to the release vehicles into the versioning strategy of my public API.
</p><p>Hence, in my definition for .NET development, a <em>public API</em> is defined by:
</p><ul><li>The <strong>public types, members and method signatures</strong> exposed in the consumable components
</li><li>The <strong>behavior</strong> of those types and members (if the <em>semantics</em> of an unchanged method signature change, that's breaking)
</li><li>The <strong>assembly qualified name</strong> of these types: did the type change assembly? (if so, that's breaking)
</li><li>The <strong>assembly signing</strong>: <a href="http://haacked.com/archive/2012/02/16/changing-a-strong-name-is-a-major-breaking-change.aspx/">changing SNK is breaking</a>! (and why the hell are you still signing assemblies? Can't we just stop doing that and move on?)
</li><li>The <strong>packaging</strong> of these assemblies: did the assembly change NuGet package? (if so, that's breaking)
</li></ul><p>I'm not sure whether I'm overlooking any other aspects of the public API, but using the above interpretation hasn't led me into discovering any. This definition also really helps me to clearly state my <em>intentions</em> when defining the semantic version vNext of any public API I own.
</p><h1>The sad part
</h1><p>The sad part about SemVer is that you can't interpret an author's intentions solely based on the version format. It's not because your versioning format happens to comply with the guidelines set forth by SemVer that you are using SemVer properly. If you're a log4net user, <a href="http://www.wiktorzychla.com/2012/03/pathetic-breaking-change-between.html">you might have been bitten by this before</a>.
</p><p>Or perhaps you jumped from v4.0 to v4.5? (Looking at you .NET Framework <span style="font-family:Wingdings">J</span>) This is clearly an example of what I would call Marketing Driven Versioning. Technically, the .NET Framework doesn't apply SemVer (and no one ever claimed it does). In fact, most (if not all?) .NET 4.5 libraries have a version number of v4.0 (remember, it's an in-place upgrade). However, people get confused as the version format <em>seems</em> to be SemVer-compliant.
</p><h1>Moving forward
</h1><p>Moving forward, I really hope to see NuGet be fully SemVer compliant one day (I know it won't be trivial as there's quite a legacy of non-SemVer compliant packages on the Gallery). But even if all new packages would be enforced to be SemVer-compliant, I'd argue they're likely just SemVer-<strong>format</strong> compliant. And that's totally fine from a NuGet perspective as there's nothing more that can be done about that!
</p><p>At the same time, that's why I'd love to see a <em>standard definition of public API</em> for anything that ships through NuGet. People need guidance and preferably this guidance is specific to their needs/scenario. The version format alone simply doesn't cut it: it doesn't say that it was the author's intention to be SemVer-compliant and as such, the version format alone doesn't clearly state the author's intentions with any new release.
</p><p>If there is any metric I want to know about a package, then it is not the download count, but rather the number of times a package author has broken SemVer-compliance for a given package. Not sure how to solve that. Perhaps people should be able to report that a package upgrade from one version to another broke their stuff? Correlate the number of reports against the number of <em>package-updates</em> (not installs, not restores …)?
</p><p>Anyway, I don't have control over any of this (and likely no one has), but I believe guidance is critical, and I hope someone finds value in this way of working. SemVer is awesome! I understand the reasoning behind it being agnostic on some levels. We should just state our intentions. I'd be happy even if just a single package author finds value in this post and improves his versioning strategy. Note that the goal is to propagate this happiness to all package consumers ;)</p></p>

<p>SemVer is not about code, it's about stating your intentions...</p>
]]></content>
      <post-name type="text"><![CDATA[semantic-versioning-state-your-intentions-please]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="1078" date-created="2014-04-17T17:03:10" date-modified="2014-04-17T17:03:10" approved="true" post-url="/2014/04/17/using-myget-as-a-oneget-package-source/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Using MyGet as a OneGet package source]]></title>
      <content type="text"><![CDATA[<p>At the Build conference, Microsoft announced the <a href="http://www.microsoft.com/en-eg/download/details.aspx?id=42316" target="_blank" title="Windows Management Framework 5.0 Preview">Windows Management Framework 5.0 Preview</a> which includes Windows PowerShell 5.0, updates to the PowerShell ISE, Network Switch Cmdlets and ... <b>OneGet</b>!</p>

<h1>What is OneGet?</h1>

<blockquote>OneGet a unified package management interface component with a set of managed and native APIs, a set of PowerShell cmdlets, and a WMI provider. The component accepts both Microsoft-provided and 3rd party-provided plugins which extend the functionality for a given package type.</blockquote>

<p>The OneGet team also has a weekly community meeting of which you can see the first introductionary recording below.</p>

<iframe width="640" height="360" src="//www.youtube-nocookie.com/embed/r0yfCSAGCLM" frameborder="0" allowfullscreen></iframe>

<p>As part of this Preview, OneGet is shipping with a prototype plugin compatible with Chocolatey, the so called <i>ChocolateyProvider</i>. This is a prototype implementation of a Chocolatey-compatible package manager that can install existing Chocolatey packages. This is a clear confirmation for the hard work done by the Chocolatey folks, and both systems will continue to evolve together, as <a href="https://twitter.com/ferventcoder" target="_blank">Rob Reynolds</a> explains in <a href="https://groups.google.com/forum/#!topic/chocolatey/a8WdEoF-M58" target="_blank">this post</a>. If you want to follow-up on OneGet, then check out <a href="https://github.com/OneGet/oneget" target="_blank">its GitHub repository</a> and <a href="https://twitter.com/PSOneGet" target="_blank">follow PSOneGet</a> on Twitter.</p>

<h1>Something about a forest and trees...</h1>

<p>NuGet, MyGet, Chocolatey, OneGet... what?! People ask questions and occasionally can't see the forest for the trees. Here's a quick recap:</p>

<ul>
<li><b>NuGet</b>: a <i>solution-level</i> package management tool, used to manage software dependencies within the scope of a solution. It is accompanied by the <a href="http://nuget.org" target="_blank">NuGet Gallery</a>, the home of many if not all .NET open source components.</li>
<li><b>Chocolatey</b>: a <i>system-level</i> package management tool, used to manage software installations on a Windows system. It (currently) leverages PowerShell and NuGet, supports the Web Platform Installer (WebPI), MSI, RubyGems and many more, and is accompanied by the <a href="http://chocolatey.org" target="_blank">Chocolatey Gallery</a> where you can find many popular software packages. Rob describes Chocolatey as somewhat like "apt-get", but with Windows in mind.</li>
<li><b>MyGet</b>: a <i>hosted NuGet package server</i> where you can create and secure your own feeds. In essence, <a href="https://www.myget.org" target="_blank">MyGet</a> is able to host vanilla NuGet feeds, <a href="http://docs.myget.org/docs/reference/package-sources" target="_blank">as well as Chocolatey feeds</a>.</li>
<li><b>OneGet</b>: a <i>a unified interface to package management systems</i> (see above)</li>
</ul>

<p>So what does this mean? How do these package managers play along?</p>

<p>OneGet supports multiple package sources, and as stated earlier, OneGet comes with a <i>ChocolateyProvider</i>. As MyGet also supports Chocolatey feeds, this effectively means that you can register a MyGet feed as a Chocolatey package source in OneGet! The below diagram is an attempt to illustrate how they relate:</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-04-18/2014-04-17_1958.png" alt="How do OneGet, Chocolatey, NuGet and MyGet play along?" style="max-width:650px;"/></p>

<p>OneGet supports several commands at this stage:</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-04-18/2014-04-04_1058.png" alt="OneGet Preview cmdlets" style="max-width:650px"/></p>

<h1>How can I use a private OneGet package source?</h1>

<p>So how can I register a private OneGet package source? Well, let's first see how you can register any package source using the Add-PackageSource cmdlet. Here's what the built-in help currently says:</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-04-18/2014-04-04_1101.png" alt="OneGet Add-PackageSource Help" style="max-width:650px;"/></p>

<p>Note that this is a Preview: help is incomplete and cmdlets might change name, but this should already give you a good idea of what you can do with this cmdlet!</p>

<p>Now, let's register a MyGet feed on which you can host Chocolatey packages:</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-04-18/2014-04-04_1128.png" alt="Register a MyGet feed as a OneGet package source" style="max-width:650px;"/></p>

<p>Did you notice how OneGet asked you to install the NuGet package manager?</p>

<p>That went easy right? That's because that feed was public :) OneGet does not support basic-authentication at this point, nor does it leverage any nuget.config settings you might configure (tried it). However, MyGet just <a href="http://docs.myget.org/docs/reference/feed-endpoints" target="_blank">added the possibility to use a "private-by-obscurity" endpoint on private feeds</a>, which should allow you to use private feeds as well. Note: we don't actively promote this, as it requires you to share one of your feed's access tokens. This is a work-around for clients that don't support the basic-auth flow, and we'd prefer to have proper basic-authentication support in OneGet, so fingers crossed!</p>

<p>You can verify the correct registration of your OneGet package source using the following commands:</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-04-18/2014-04-04_1129.png" alt="Get OneGet package sources" style="max-width:650px;"/>
<img src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-04-18/2014-04-04_1134.png" alt="List available packages on a OneGet package source" style="max-width:650px;"/></p>

<p>Installing a software package from this MyGet feed is straightforward as well:</p>

<p><img src="https://xavierdecosterblog.blob.core.windows.net/blog/2014-04-18/2014-04-04_1141_001.png" alt="Install a software package from a specific OneGet feed" style="max-width:650px;"/></p>

<p>This flow allows you to control what packages get distributed through OneGet, avoids the need to publish your internal software to the general public, and still allows you to leverage the great new scenarios that OneGet offers!</p>

<p>As usual, happy packaging! :)</p>
]]></content>
      <post-name type="text"><![CDATA[using-myget-as-a-oneget-package-source]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="1079" date-created="2014-11-17T00:00:00" date-modified="2014-11-17T00:00:00" approved="true" post-url="/2014/11/17/deploying-the-asp-net-beta1-kruntime-to-azure-websites/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Deploying the ASP.NET KRuntime Beta1 to Azure Websites]]></title>
      <content type="text"><![CDATA[<p><p>Unless you lived under a rock during the last few days, you should know by now that Microsoft shipped a Preview of VS2015 with support for ASP.NET vNext. Such announcements traditionally result in developers screaming "yeay, new bits!", late night coding and unlocking Untappd badges with each commit.</p><p>Working on a little side project, I wanted to explore ASP.NET vNext beta1 on Azure Websites. I quickly learned that <a href="http://blog.davidebbo.com/2014/09/deploying-aspnet-vnext-toazure-websites.html">Azure Websites currently only provides alpha-support</a>. On top of that, the kvm command switches have changed (esp. <code>kvm install</code>), so there's no straightforward kvm upgrade that will do the trick. This post shows you how I got an ASP.NET MVC6 beta1 application working on Azure Websites using x64 CoreCLR (Note: my Azure Website is configured to run x64 on the Basic tier). Feel free to use whatever version you want, YMMV!
</p><h1>Instructing Kudu to run a custom deployment</h1><p>First things first: for this to work, you'll need to take advantage of Kudu by connecting your Git repository to Azure Websites. <a href="http://bing.lmgtfy.com/?q=azure+websites+git+repository">Let me Google that for you with Bing</a>! Kudu will generate deployment scripts under the hood and deploy your website when pushing changes to your source repository. However, deployment will fail for an ASP.NET vNext beta1 application. To fix this, you'll need to customize the deployment scripts. This is the easiest part: simply add a <code>.deployment</code> file and an empty <code>deploy.cmd</code> to your source repository (don't bother downloading the script that Kudu uses out-of-the-box, it's flawed at the moment). The <code>.deployment</code> file looks like this:</p><p><pre><code>[config]<br/>command = deploy.cmd</code></pre></p><p>Before we take a look at the deploy.cmd, we'll first have to setup the <a href="https://github.com/aspnet/Home/wiki/version-manager">K Version Manager</a> (KVM).</p><h1>Setting up KVM</h1><p>As the interactions with the Azure Websites environment are constrained due to security, we can't just install kvm by following the <a href="https://github.com/aspnet/Home">Getting Started</a> guide (not during deployment, and not from within site extensions). Installation will fail as the <code>kvm.ps1</code> script being used under the hood contains lots of <code>Write-Host</code> statements that will cause exceptions. In fact, when you try this, the first Write-Host statement encountered is the one that should log an exception to the console, so it just doesn't work.
</p><p>This leaves only one option: having a <code>kvm.cmd</code> in the repository root calling into a customized <code>kvm.ps1</code>, and call it from a custom <code>deploy.cmd</code>. Let's skip the download process and adapt the PowerShell script to our needs and check-it into source control. The following links point to their gists:</p><ul><li><a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">kvm.cmd</a></li><li><a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">kvm.ps1</a></li></ul><p>The <code>kvm.cmd</code> file is unmodified and <a href="https://github.com/aspnet/Home/blob/v1.0.0-beta1/kvm.cmd">matches</a> the one from the ASP.NET GitHub repository. The <code>kvm.ps1</code> file I created is also <a href="https://github.com/aspnet/Home/blob/v1.0.0-beta1/kvm.ps1">based on the v1.0.0-beta1 tag</a> and has the following modifications:</p><ul><li>It uses a <code>WriteLine</code> function that simply echo's the text into the console host, and all calls to Write-Host are replaced by calls to this <code>WriteLine</code> function.</li><li>The ZIP unpack logic in the script (which uses PowerShell's built-in unzip functionality) is replaced by calling into .NET's <a href="http://msdn.microsoft.com/en-us/library/hh485723(v=vs.110).aspx"><span style="font-family:Consolas; font-size:10pt">ZipFile::ExtractToDirectory</span></a> method. The original extract logic didn't work and silently failed.</li></ul><h1>Customizing the deployment</h1><p>Now we have almost everything in place except for the real deployment instructions. The <code>deploy.cmd</code> file is the one that our <code>.deployment</code> file points to so let's take a look at how we can leverage our custom KVM.</p><p>I didn't create this from scratch though. Remember, I started from the deployment scripts that got generated by Kudu. In a nutshell, here's what the script does:</p><ol><li>Check pre-requisites and configure environment variables
</li><li>Install KRE (by <a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">calling</a> into the custom <code>kvm.ps1</code> file)</li><li>Run KPM restore</li><li>Run KPM pack</li><li>Run <a href="https://github.com/projectkudu/KuduSync">KuduSync</a></li><li>First-hit of the web site (warm-up call)</li></ol><p>The full deploy.cmd file can be found here: <a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">deploy.cmd</a>. You can easily customize the script to your needs by changing the variables set in <a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">lines 82-85</a>.
</p><pre><code>SET KRE VERSION=1.0.0-beta1<br/>SET KRE_ARCH=amd64<br/>SET KRE_CLR=CoreCLR<br/>SET ProjectJsonFile=My.Awesome.DemoApp\project.json</code></pre><h1>Wrapping up</h1><p>I'm sure built-in support is coming, but if you want to have a play with it on Azure Websites today, this might just do the trick for you. I'd like to thank <a href="https://twitter.com/davidebbo">David Ebbo</a> for pointing me towards <a href="https://twitter.com/loudej/status/530543638351462400">this tweet</a>, referencing <a href="https://twitter.com/loudej">Louis DeJardin</a>'s GitHub <a href="https://github.com/lodejard/LockingProblems">repository</a>: it helped me to get this working :)</p><p>Link to all gists used in this post: <a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">https://gist.github.com/xavierdecoster/c56561312891eb788b8d</a></p></p>
]]></content>
      <post-name type="text"><![CDATA[deploying-the-asp-net-beta1-kruntime-to-azure-websites]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
    <post id="1080" date-created="2015-01-27T08:21:00" date-modified="2015-01-27T08:21:00" approved="true" post-url="/2015/01/27/joining-microsoft/" type="normal" hasexcerpt="false" views="0">
      <title type="text"><![CDATA[Joining Microsoft]]></title>
      <content type="text"><![CDATA[<p><p>It's been over 7 years since I joined RealDolmen, one of Belgium's larger consultancy firms. I got to meet many interesting folks and had a wide variation in challenges. I was also lucky enough to attend a few conferences and was even allowed to speak abroad when I had the opportunity. Thank you <a href="http://www.realdolmen.com">RealDolmen</a>! And thank you everyone I worked with!
</p><p>It was in 2011 at TechDays Belgium, after a talk by Scott Hanselman (<a href="http://www.hanselman.com/blog/TechDaysDevDaysNetherlandsAndBelgium.aspx">NuGet in depth: empowering OSS on the .NET platform</a>), when <a href="http://blog.maartenballiauw.be">Maarten Balliauw</a> and I got talking about an idea we had. We created a prototype and by the end of the month, we launched <a href="https://www.myget.org">MyGet</a>, a hosted NuGet server on Azure.
</p><p>At first, we used it as a playground for ourselves and some friends. A few weeks later we had about a hundred people using the service and we had our first feature requests coming in: people told us they wanted secured feeds. We bootstrapped a business model to cover for the hosting costs, and executed as lean as we possibly could. Today, 3.5 years later, we serve thousands of feeds and provide a solution for many developers, OSS projects and companies worldwide. You can find us in the Azure Store, we became VSO Launch partners at TechEd, and we even host <a href="https://www.myget.org/gallery/aspnetvnext">nightly builds for ASP.NET</a> and many other Microsoft products!
</p><p>Some time ago, I noticed a vacant position on the NuGet team (well, two, in fact). Today, I'm super-excited to share that I'm joining Microsoft and the NuGet team!
</p><p>I'll be working remotely on stuff I'm passionate about and feel I'm joining at an exciting time with many cool things to come: NuGet (and package management) is still building momentum! A few years ago, the average .NET developer didn't know about packages. Then NuGet got introduced. Soon, we'll be dealing with NuGet, NPM, Bower and many more tools integrated in our development on both .NET (vNext) and other languages.
</p><p>What does this mean for MyGet? MyGet remains our private business and product. We'll continue to provide the great service and support you're used to! The only difference is that both Maarten and my agenda are now more aligned, and we'll be in package management 24/7.
</p><p>Looking very much forward for what's next!</p></p>
]]></content>
      <post-name type="text"><![CDATA[joining-microsoft]]></post-name>
      <comments />
      <authors>
        <author ref="1000" />
      </authors>
    </post>
  </posts>
</blog>