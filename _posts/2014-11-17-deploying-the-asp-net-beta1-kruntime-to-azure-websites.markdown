---
layout: single
title: "Deploying the ASP.NET KRuntime Beta1 to Azure Websites"
date: 2014-11-17 00:00:00 +0100
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET","Azure"]
alias: ["/2014/11/17/deploying-the-asp-net-beta1-kruntime-to-azure-websites/"]
author: Xavier Decoster
redirect_from:
 - /2014/11/17/deploying-the-asp-net-beta1-kruntime-to-azure-websites/.html
 - /deploying-the-asp-net-beta1-kruntime-to-azure-websites
---
<p><p>Unless you lived under a rock during the last few days, you should know by now that Microsoft shipped a Preview of VS2015 with support for ASP.NET vNext. Such announcements traditionally result in developers screaming "yeay, new bits!", late night coding and unlocking Untappd badges with each commit.</p><p>Working on a little side project, I wanted to explore ASP.NET vNext beta1 on Azure Websites. I quickly learned that <a href="http://blog.davidebbo.com/2014/09/deploying-aspnet-vnext-toazure-websites.html">Azure Websites currently only provides alpha-support</a>. On top of that, the kvm command switches have changed (esp. <code>kvm install</code>), so there's no straightforward kvm upgrade that will do the trick. This post shows you how I got an ASP.NET MVC6 beta1 application working on Azure Websites using x64 CoreCLR (Note: my Azure Website is configured to run x64 on the Basic tier). Feel free to use whatever version you want, YMMV!
</p><h1>Instructing Kudu to run a custom deployment</h1><p>First things first: for this to work, you'll need to take advantage of Kudu by connecting your Git repository to Azure Websites. <a href="http://bing.lmgtfy.com/?q=azure+websites+git+repository">Let me Google that for you with Bing</a>! Kudu will generate deployment scripts under the hood and deploy your website when pushing changes to your source repository. However, deployment will fail for an ASP.NET vNext beta1 application. To fix this, you'll need to customize the deployment scripts. This is the easiest part: simply add a <code>.deployment</code> file and an empty <code>deploy.cmd</code> to your source repository (don't bother downloading the script that Kudu uses out-of-the-box, it's flawed at the moment). The <code>.deployment</code> file looks like this:</p><p><pre><code>[config]<br/>command = deploy.cmd</code></pre></p><p>Before we take a look at the deploy.cmd, we'll first have to setup the <a href="https://github.com/aspnet/Home/wiki/version-manager">K Version Manager</a> (KVM).</p><h1>Setting up KVM</h1><p>As the interactions with the Azure Websites environment are constrained due to security, we can't just install kvm by following the <a href="https://github.com/aspnet/Home">Getting Started</a> guide (not during deployment, and not from within site extensions). Installation will fail as the <code>kvm.ps1</code> script being used under the hood contains lots of <code>Write-Host</code> statements that will cause exceptions. In fact, when you try this, the first Write-Host statement encountered is the one that should log an exception to the console, so it just doesn't work.
</p><p>This leaves only one option: having a <code>kvm.cmd</code> in the repository root calling into a customized <code>kvm.ps1</code>, and call it from a custom <code>deploy.cmd</code>. Let's skip the download process and adapt the PowerShell script to our needs and check-it into source control. The following links point to their gists:</p><ul><li><a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">kvm.cmd</a></li><li><a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">kvm.ps1</a></li></ul><p>The <code>kvm.cmd</code> file is unmodified and <a href="https://github.com/aspnet/Home/blob/v1.0.0-beta1/kvm.cmd">matches</a> the one from the ASP.NET GitHub repository. The <code>kvm.ps1</code> file I created is also <a href="https://github.com/aspnet/Home/blob/v1.0.0-beta1/kvm.ps1">based on the v1.0.0-beta1 tag</a> and has the following modifications:</p><ul><li>It uses a <code>WriteLine</code> function that simply echo's the text into the console host, and all calls to Write-Host are replaced by calls to this <code>WriteLine</code> function.</li><li>The ZIP unpack logic in the script (which uses PowerShell's built-in unzip functionality) is replaced by calling into .NET's <a href="http://msdn.microsoft.com/en-us/library/hh485723(v=vs.110).aspx"><span style="font-family:Consolas; font-size:10pt">ZipFile::ExtractToDirectory</span></a> method. The original extract logic didn't work and silently failed.</li></ul><h1>Customizing the deployment</h1><p>Now we have almost everything in place except for the real deployment instructions. The <code>deploy.cmd</code> file is the one that our <code>.deployment</code> file points to so let's take a look at how we can leverage our custom KVM.</p><p>I didn't create this from scratch though. Remember, I started from the deployment scripts that got generated by Kudu. In a nutshell, here's what the script does:</p><ol><li>Check pre-requisites and configure environment variables
</li><li>Install KRE (by <a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">calling</a> into the custom <code>kvm.ps1</code> file)</li><li>Run KPM restore</li><li>Run KPM pack</li><li>Run <a href="https://github.com/projectkudu/KuduSync">KuduSync</a></li><li>First-hit of the web site (warm-up call)</li></ol><p>The full deploy.cmd file can be found here: <a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">deploy.cmd</a>. You can easily customize the script to your needs by changing the variables set in <a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">lines 82-85</a>.
</p><pre><code>SET KRE VERSION=1.0.0-beta1<br/>SET KRE_ARCH=amd64<br/>SET KRE_CLR=CoreCLR<br/>SET ProjectJsonFile=My.Awesome.DemoApp\project.json</code></pre><h1>Wrapping up</h1><p>I'm sure built-in support is coming, but if you want to have a play with it on Azure Websites today, this might just do the trick for you. I'd like to thank <a href="https://twitter.com/davidebbo">David Ebbo</a> for pointing me towards <a href="https://twitter.com/loudej/status/530543638351462400">this tweet</a>, referencing <a href="https://twitter.com/loudej">Louis DeJardin</a>'s GitHub <a href="https://github.com/lodejard/LockingProblems">repository</a>: it helped me to get this working :)</p><p>Link to all gists used in this post: <a href="https://gist.github.com/xavierdecoster/c56561312891eb788b8d">https://gist.github.com/xavierdecoster/c56561312891eb788b8d</a></p></p>
